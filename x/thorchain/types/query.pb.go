// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("types/query.proto", fileDescriptor_3dd69a0a5972f391) }

var fileDescriptor_3dd69a0a5972f391 = []byte{
	// 1459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x4d, 0x6f, 0x1c, 0x45,
	0x13, 0xce, 0xbe, 0x6f, 0x1c, 0xec, 0x8e, 0x43, 0x92, 0xca, 0x87, 0xed, 0xb5, 0xbd, 0xbb, 0xfe,
	0x48, 0x42, 0x02, 0x78, 0xa4, 0x04, 0x71, 0xe2, 0x62, 0x0b, 0x21, 0x45, 0x90, 0x10, 0xe2, 0x60,
	0xa4, 0x08, 0xb1, 0xea, 0xf5, 0x34, 0xeb, 0xc1, 0xb3, 0xdd, 0x9b, 0xe9, 0x19, 0x3b, 0xab, 0xd5,
	0x06, 0x89, 0xdc, 0x38, 0x21, 0x71, 0xe1, 0xc4, 0xef, 0xe1, 0x18, 0x89, 0x0b, 0x47, 0x14, 0xf3,
	0x3b, 0x10, 0x9a, 0x9a, 0xee, 0xd9, 0xee, 0x99, 0x9e, 0xb1, 0x2f, 0x96, 0x55, 0x4f, 0xf5, 0xf3,
	0x54, 0x55, 0xf7, 0x74, 0xd5, 0x36, 0xb9, 0x1a, 0x8f, 0x86, 0x4c, 0x7a, 0x2f, 0x12, 0x16, 0x8d,
	0xb6, 0x86, 0x91, 0x88, 0x05, 0xcc, 0xa0, 0xa9, 0xb9, 0xd2, 0x17, 0xa2, 0x1f, 0x32, 0x8f, 0x0e,
	0x03, 0x8f, 0x72, 0x2e, 0x62, 0x1a, 0x07, 0x82, 0xcb, 0xcc, 0xa9, 0x79, 0xbd, 0x2f, 0xfa, 0x02,
	0xff, 0xf5, 0xd2, 0xff, 0x94, 0xf5, 0xa6, 0xc1, 0xd6, 0x1d, 0x0a, 0x11, 0x2a, 0x7b, 0xcb, 0xb4,
	0xfb, 0x2c, 0x0a, 0x8e, 0x98, 0x6f, 0xe2, 0x9b, 0x26, 0x1e, 0x06, 0x2f, 0x92, 0xc0, 0x0f, 0xe2,
	0x51, 0x77, 0x18, 0x89, 0xa3, 0xc0, 0x67, 0x91, 0xf2, 0x5a, 0x30, 0xbd, 0x24, 0x3d, 0xca, 0x81,
	0xa6, 0x09, 0xf4, 0x44, 0x14, 0x89, 0xe3, 0x1c, 0x5b, 0x31, 0xb1, 0x38, 0xa2, 0x3e, 0xeb, 0x26,
	0x3c, 0x88, 0x15, 0xda, 0x2e, 0xa3, 0x74, 0x7f, 0x5f, 0x24, 0x3c, 0x76, 0x65, 0xc4, 0x85, 0xcf,
	0x94, 0x7d, 0xb9, 0x98, 0x69, 0x57, 0x86, 0xc1, 0xd0, 0x95, 0xae, 0x48, 0xe2, 0x9e, 0x48, 0xb8,
	0xdf, 0xfd, 0x9e, 0xe9, 0xc5, 0x1d, 0x2b, 0x91, 0x38, 0x62, 0x74, 0x10, 0xf0, 0x7e, 0x57, 0x1e,
	0x53, 0xcd, 0x70, 0xc3, 0xca, 0x88, 0x72, 0x3b, 0xd1, 0xf4, 0x6f, 0x6a, 0xed, 0x1e, 0x89, 0xd8,
	0x5d, 0x84, 0x88, 0xf6, 0x39, 0x8d, 0xc4, 0xa1, 0x2b, 0xda, 0x28, 0xe1, 0xcc, 0x2c, 0x7e, 0xbb,
	0x0c, 0xd6, 0xd4, 0x7d, 0x10, 0x0c, 0x02, 0x0d, 0xac, 0x99, 0x40, 0xc0, 0xb3, 0x34, 0xa9, 0xef,
	0x47, 0x4c, 0xea, 0x73, 0xb2, 0x64, 0xba, 0x1c, 0xb1, 0x48, 0x06, 0x82, 0xbb, 0x02, 0x8e, 0x0f,
	0x44, 0xc4, 0xe9, 0x80, 0xb9, 0x76, 0x2d, 0xe0, 0x47, 0x34, 0x0a, 0x28, 0x8f, 0x9d, 0xa4, 0x9c,
	0xc5, 0xc7, 0x22, 0x3a, 0x74, 0x95, 0xb6, 0x47, 0x43, 0xca, 0xf7, 0x59, 0x77, 0x20, 0xfc, 0x24,
	0x54, 0xd4, 0xf7, 0xff, 0xdd, 0x20, 0x33, 0x5f, 0xa5, 0x30, 0x3c, 0x27, 0xe7, 0x9f, 0x08, 0x11,
	0xc2, 0xc2, 0x16, 0x2e, 0xda, 0x42, 0x6b, 0x6a, 0x79, 0xca, 0x5e, 0x24, 0x4c, 0xc6, 0xcd, 0xc5,
	0x32, 0x20, 0x87, 0x82, 0x4b, 0xb6, 0xde, 0xfe, 0xe9, 0xcf, 0x7f, 0x7e, 0xfd, 0xdf, 0x12, 0x2c,
	0x78, 0x69, 0xe0, 0xfb, 0x07, 0x34, 0xe0, 0x5e, 0x5a, 0x52, 0x6f, 0x4c, 0xa5, 0x64, 0xf1, 0x04,
	0xf6, 0xc8, 0x4c, 0xba, 0x40, 0x42, 0x89, 0x43, 0x6a, 0xf6, 0x25, 0x07, 0xa2, 0xe8, 0x17, 0x91,
	0x1e, 0xe0, 0x4a, 0x81, 0x5e, 0xc2, 0x90, 0x5c, 0xfc, 0x34, 0xfb, 0x7e, 0x30, 0xf4, 0x96, 0xc9,
	0x61, 0x00, 0x5a, 0xa3, 0x5d, 0x89, 0x2b, 0xa5, 0x0e, 0x2a, 0x35, 0x61, 0xd1, 0x50, 0xf2, 0xad,
	0x4c, 0x42, 0x32, 0x6f, 0x2c, 0x94, 0x50, 0x45, 0x99, 0xe7, 0xd5, 0xa9, 0x76, 0x50, 0xa2, 0x4b,
	0x28, 0x7a, 0x0d, 0xae, 0x16, 0x45, 0x25, 0xfc, 0xde, 0x20, 0x57, 0xbf, 0xd0, 0x17, 0xc0, 0x13,
	0x75, 0x0e, 0x61, 0xd3, 0xa4, 0x2c, 0xc1, 0x5a, 0xf8, 0xd6, 0x29, 0x5e, 0x4a, 0xfd, 0x13, 0x54,
	0xff, 0x18, 0x3e, 0xaa, 0xd8, 0x3b, 0xaf, 0x7c, 0x01, 0x79, 0x63, 0x75, 0xaa, 0x27, 0xf0, 0x5b,
	0x83, 0x40, 0x89, 0x5b, 0x42, 0xbd, 0x76, 0x5e, 0x9b, 0xdb, 0xa7, 0xb9, 0xa9, 0x18, 0x1f, 0x60,
	0x8c, 0x1f, 0xc2, 0xfb, 0x67, 0x8f, 0x51, 0xc2, 0x80, 0xcc, 0xec, 0xa6, 0xb7, 0xa2, 0x7d, 0xe6,
	0xd0, 0xe4, 0x3c, 0x73, 0x0a, 0x51, 0x92, 0x1e, 0x4a, 0xde, 0x85, 0x3b, 0x55, 0x92, 0x78, 0xe3,
	0x1a, 0x95, 0xe8, 0x93, 0x0b, 0xc8, 0x20, 0xa1, 0xcc, 0x9a, 0x27, 0xdc, 0x74, 0x41, 0x4a, 0xf1,
	0x36, 0x2a, 0x76, 0xa0, 0x55, 0xab, 0x28, 0x61, 0x44, 0x66, 0x77, 0xd4, 0xa5, 0x0e, 0xcb, 0x26,
	0x9f, 0xb6, 0x6a, 0xb1, 0x15, 0x37, 0xa8, 0xe4, 0xee, 0xa3, 0xdc, 0x07, 0x70, 0xaf, 0x4a, 0x4e,
	0x77, 0x0e, 0x23, 0x47, 0x49, 0xe6, 0x34, 0x8f, 0x04, 0x27, 0x7d, 0x9e, 0xe9, 0x6a, 0x05, 0xaa,
	0xd4, 0xef, 0xa2, 0xfa, 0x06, 0xac, 0x9d, 0xa6, 0x2e, 0x41, 0x90, 0xb9, 0x67, 0x69, 0x2b, 0xfa,
	0x9a, 0x07, 0xb1, 0x2d, 0x9a, 0x9b, 0x9d, 0xa2, 0x06, 0xaa, 0x44, 0x6f, 0xa1, 0x68, 0x1b, 0x56,
	0x0d, 0x51, 0xec, 0x72, 0x5e, 0xda, 0x03, 0xf3, 0x4f, 0xfc, 0x90, 0x90, 0x7c, 0xad, 0x04, 0x37,
	0x67, 0x9e, 0x67, 0xab, 0x0a, 0x56, 0x9a, 0x2d, 0xd4, 0x5c, 0x84, 0x9b, 0x4e, 0x4d, 0x09, 0xaf,
	0xc8, 0x3c, 0xae, 0xda, 0xce, 0xfa, 0xac, 0x7d, 0x9f, 0x98, 0x88, 0x16, 0x5c, 0xab, 0x72, 0x98,
	0x6a, 0xde, 0x43, 0xcd, 0x4d, 0x58, 0x2f, 0x69, 0xaa, 0x6e, 0x6e, 0x6c, 0xe9, 0x8f, 0xe4, 0x92,
	0x45, 0x02, 0x9d, 0x1a, 0xfe, 0x33, 0x47, 0xe0, 0xda, 0x5e, 0x2b, 0x02, 0x99, 0x57, 0xfb, 0x5b,
	0x72, 0xfe, 0xb1, 0xf0, 0x99, 0xdd, 0x76, 0x52, 0x8b, 0xb3, 0xed, 0x64, 0x80, 0x52, 0x59, 0x43,
	0x95, 0x65, 0x58, 0x32, 0x54, 0xd2, 0xa1, 0xc4, 0x48, 0x6f, 0x8f, 0xcc, 0xa4, 0x4b, 0x0a, 0x8d,
	0x07, 0x4d, 0xce, 0x4b, 0x40, 0x21, 0x35, 0x8d, 0x87, 0x23, 0x5d, 0x9f, 0xcc, 0xa6, 0x97, 0xf8,
	0x6e, 0x18, 0x0c, 0xed, 0x8f, 0x50, 0x5b, 0x9d, 0x47, 0x52, 0x83, 0xb2, 0xb6, 0x73, 0xa6, 0xa3,
	0x53, 0x5e, 0x9e, 0x1e, 0x99, 0xcb, 0x57, 0xd9, 0xa7, 0xdf, 0x20, 0x3b, 0x93, 0x94, 0x2b, 0x19,
	0x89, 0xb4, 0x2f, 0xc9, 0xc5, 0x2f, 0xd5, 0x58, 0xf6, 0x19, 0x63, 0x76, 0x17, 0x35, 0x00, 0x67,
	0x47, 0x33, 0xf0, 0xa9, 0xd4, 0x1d, 0x94, 0x5a, 0x83, 0xb6, 0x21, 0x65, 0x0e, 0x7e, 0x79, 0x76,
	0x92, 0xcc, 0x9b, 0x04, 0xf6, 0xe9, 0xb7, 0xa9, 0xcf, 0xaa, 0xed, 0x6a, 0xe1, 0xa6, 0xb6, 0x4c,
	0x8f, 0xfc, 0xae, 0x9e, 0x32, 0x77, 0x8f, 0xe9, 0xd0, 0x3e, 0xf2, 0x16, 0xe4, 0x3c, 0xf2, 0x05,
	0x8f, 0x9a, 0x23, 0x9f, 0x8e, 0xb0, 0x5e, 0x3e, 0xd1, 0x7a, 0xe3, 0xf8, 0x65, 0x37, 0xf0, 0x27,
	0x30, 0x26, 0xef, 0x5a, 0x1c, 0x12, 0xaa, 0xf9, 0xf3, 0xcc, 0xd7, 0xeb, 0x5c, 0x54, 0x0c, 0xeb,
	0x18, 0xc3, 0x0a, 0x34, 0x0b, 0x31, 0xc8, 0x69, 0x10, 0xf0, 0x84, 0xfc, 0x7f, 0x87, 0x72, 0xb8,
	0x69, 0xdd, 0xcf, 0x94, 0x6b, 0x99, 0xcb, 0xca, 0xbe, 0x43, 0xf9, 0x5e, 0x3a, 0x4e, 0x3b, 0xeb,
	0xd9, 0xa3, 0xdc, 0xf8, 0xc6, 0x7a, 0x64, 0xf6, 0xa9, 0x1a, 0xb0, 0xed, 0x6f, 0x41, 0x5b, 0x9d,
	0x0d, 0x69, 0x0a, 0xaa, 0xe0, 0x97, 0x51, 0xe8, 0x06, 0x5c, 0x33, 0x84, 0xf4, 0xe0, 0x8e, 0x1a,
	0x09, 0x67, 0x38, 0xe5, 0xd9, 0x1a, 0xca, 0xea, 0xd6, 0xc8, 0xc1, 0x3a, 0x8d, 0x84, 0xb3, 0xb4,
	0xf5, 0xc0, 0x84, 0xcc, 0xe3, 0x02, 0x3d, 0x66, 0xb5, 0x4b, 0x54, 0x85, 0x09, 0xab, 0x53, 0xed,
	0x50, 0x73, 0x13, 0x5b, 0xbf, 0x29, 0x8c, 0x32, 0x1e, 0x93, 0x4b, 0x26, 0x47, 0xe1, 0x26, 0xb6,
	0x20, 0xe7, 0xb1, 0x2c, 0x78, 0xd4, 0xdc, 0x91, 0x56, 0x04, 0x12, 0x0e, 0xc8, 0xc5, 0x47, 0xe9,
	0xcf, 0x98, 0x3d, 0x1a, 0x26, 0x4c, 0xda, 0x9f, 0xbf, 0x01, 0x38, 0x87, 0x68, 0x0b, 0xaf, 0xb9,
	0x68, 0xf0, 0x77, 0x12, 0x24, 0x64, 0x1e, 0x17, 0x7c, 0x13, 0xc4, 0x07, 0x9f, 0xb3, 0x11, 0x94,
	0xa9, 0x14, 0xe2, 0xac, 0xb0, 0xed, 0x50, 0x73, 0xe4, 0x51, 0xcc, 0x3b, 0x64, 0x23, 0x6f, 0x7c,
	0xc8, 0x46, 0x13, 0x98, 0x90, 0x2b, 0xb8, 0x76, 0xdb, 0x1f, 0x04, 0x5c, 0x65, 0xb9, 0x51, 0x62,
	0x36, 0x50, 0x2d, 0xbf, 0x59, 0xef, 0x54, 0xd3, 0xe2, 0xb3, 0x10, 0x68, 0xea, 0x0d, 0x3f, 0x37,
	0xc8, 0x35, 0x5c, 0x8c, 0xcd, 0x65, 0x3b, 0x0c, 0x55, 0x08, 0xb7, 0x4b, 0xec, 0xb6, 0x83, 0x8e,
	0xe2, 0xce, 0xa9, 0x7e, 0xa7, 0xd6, 0x02, 0x9b, 0x56, 0x97, 0x86, 0x61, 0x5e, 0x0b, 0xa4, 0xa8,
	0xac, 0x85, 0x81, 0x56, 0xd7, 0xc2, 0x72, 0x3a, 0xb5, 0x16, 0x59, 0xdf, 0x7c, 0xdd, 0x20, 0x97,
	0xf3, 0xc5, 0x4a, 0x7e, 0xdd, 0xc9, 0x6c, 0xab, 0x6f, 0xd4, 0xfa, 0xd4, 0xb4, 0x9d, 0xa9, 0xb8,
	0xf1, 0xa9, 0xbd, 0x6e, 0x90, 0x2b, 0x0f, 0xb3, 0x1f, 0xe8, 0xdb, 0x99, 0xad, 0x58, 0x85, 0x22,
	0xea, 0xac, 0x42, 0xd9, 0x49, 0x05, 0xb2, 0x89, 0x81, 0xb4, 0x60, 0xc5, 0x08, 0xa4, 0xf0, 0x20,
	0xc0, 0x24, 0x7c, 0x47, 0xde, 0xd9, 0xcb, 0x9e, 0x00, 0xc0, 0xfa, 0x5d, 0xa0, 0x8c, 0x5a, 0x72,
	0xd9, 0x89, 0x29, 0xa5, 0x26, 0x2a, 0x5d, 0x07, 0x30, 0x94, 0xd4, 0xbb, 0x02, 0x04, 0x64, 0xf6,
	0x99, 0x7a, 0x47, 0xb0, 0xef, 0x4c, 0x6d, 0x75, 0xde, 0x99, 0x53, 0xb0, 0xe6, 0x54, 0xe9, 0xf7,
	0x09, 0x6f, 0x9c, 0xfe, 0x9d, 0xc0, 0x80, 0xcc, 0x3d, 0xd4, 0xcf, 0x12, 0xf6, 0x94, 0x92, 0x9b,
	0x9d, 0x53, 0x8a, 0x81, 0x2a, 0xb5, 0x0d, 0x54, 0x5b, 0x85, 0x65, 0xab, 0x74, 0xca, 0xcb, 0x1b,
	0x0f, 0x69, 0x7c, 0x30, 0x81, 0x1f, 0x08, 0xc9, 0x57, 0x16, 0x26, 0xf4, 0xa9, 0xdd, 0x39, 0xa1,
	0x9b, 0xb0, 0x52, 0x5c, 0x45, 0xc5, 0x05, 0xb8, 0xe1, 0x52, 0xc4, 0x5d, 0x7a, 0x9c, 0xbd, 0xa9,
	0xd8, 0xbb, 0xa4, 0x8c, 0xce, 0x5d, 0xca, 0xb1, 0x9a, 0x5d, 0x52, 0x0f, 0x35, 0xf0, 0x8a, 0x5c,
	0xda, 0xc9, 0x1e, 0x66, 0x1e, 0xe1, 0xbb, 0x8c, 0x7d, 0xed, 0x5b, 0x90, 0xf3, 0xda, 0x2f, 0x78,
	0x28, 0xc5, 0xf7, 0x50, 0x71, 0x1d, 0x3a, 0x56, 0xd7, 0x46, 0x4f, 0x2f, 0x7b, 0xff, 0x51, 0x5b,
	0xb7, 0xf3, 0xf0, 0x8f, 0xb7, 0xad, 0xc6, 0x9b, 0xb7, 0xad, 0xc6, 0xdf, 0x6f, 0x5b, 0x8d, 0x5f,
	0x4e, 0x5a, 0xe7, 0xde, 0x9c, 0xb4, 0xce, 0xfd, 0x75, 0xd2, 0x3a, 0xf7, 0xdc, 0xeb, 0x07, 0x71,
	0x48, 0x7b, 0x5b, 0xfb, 0x62, 0x50, 0xdc, 0xfa, 0xf4, 0x73, 0x7a, 0x69, 0x1a, 0xd3, 0x78, 0x7a,
	0x17, 0xf0, 0x49, 0xe9, 0xc1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xbc, 0x4c, 0xf0, 0x46,
	0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the extended pool information for the provided asset.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error)
	DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error)
	Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error)
	Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error)
	Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error)
	Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error)
	TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error)
	TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error)
	TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
	TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
	Node(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*QueryNodeResponse, error)
	Nodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error)
	PoolSlip(ctx context.Context, in *QueryPoolSlipRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error)
	PoolSlips(ctx context.Context, in *QueryPoolSlipsRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error)
	OutboundFee(ctx context.Context, in *QueryOutboundFeeRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error)
	OutboundFees(ctx context.Context, in *QueryOutboundFeesRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error)
	StreamingSwap(ctx context.Context, in *QueryStreamingSwapRequest, opts ...grpc.CallOption) (*QueryStreamingSwapResponse, error)
	StreamingSwaps(ctx context.Context, in *QueryStreamingSwapsRequest, opts ...grpc.CallOption) (*QueryStreamingSwapsResponse, error)
	Ban(ctx context.Context, in *QueryBanRequest, opts ...grpc.CallOption) (*BanVoter, error)
	Ragnarok(ctx context.Context, in *QueryRagnarokRequest, opts ...grpc.CallOption) (*QueryRagnarokResponse, error)
	RunePool(ctx context.Context, in *QueryRunePoolRequest, opts ...grpc.CallOption) (*QueryRunePoolResponse, error)
	RuneProvider(ctx context.Context, in *QueryRuneProviderRequest, opts ...grpc.CallOption) (*QueryRuneProviderResponse, error)
	RuneProviders(ctx context.Context, in *QueryRuneProvidersRequest, opts ...grpc.CallOption) (*QueryRuneProvidersResponse, error)
	MimirValues(ctx context.Context, in *QueryMimirValuesRequest, opts ...grpc.CallOption) (*QueryMimirValuesResponse, error)
	MimirWithKey(ctx context.Context, in *QueryMimirWithKeyRequest, opts ...grpc.CallOption) (*QueryMimirWithKeyResponse, error)
	MimirAdminValues(ctx context.Context, in *QueryMimirAdminValuesRequest, opts ...grpc.CallOption) (*QueryMimirAdminValuesResponse, error)
	MimirNodesAllValues(ctx context.Context, in *QueryMimirNodesAllValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesAllValuesResponse, error)
	MimirNodesValues(ctx context.Context, in *QueryMimirNodesValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesValuesResponse, error)
	MimirNodeValues(ctx context.Context, in *QueryMimirNodeValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodeValuesResponse, error)
	InboundAddresses(ctx context.Context, in *QueryInboundAddressesRequest, opts ...grpc.CallOption) (*QueryInboundAddressesResponse, error)
	Version(ctx context.Context, in *QueryVersionRequest, opts ...grpc.CallOption) (*QueryVersionResponse, error)
	Thorname(ctx context.Context, in *QueryThornameRequest, opts ...grpc.CallOption) (*QueryThornameResponse, error)
	Invariant(ctx context.Context, in *QueryInvariantRequest, opts ...grpc.CallOption) (*QueryInvariantResponse, error)
	Invariants(ctx context.Context, in *QueryInvariantsRequest, opts ...grpc.CallOption) (*QueryInvariantsResponse, error)
	Network(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error)
	BalanceModule(ctx context.Context, in *QueryBalanceModuleRequest, opts ...grpc.CallOption) (*QueryBalanceModuleResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error) {
	out := new(QueryDerivedPoolResponse)
	err := c.cc.Invoke(ctx, "/types.Query/DerivedPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error) {
	out := new(QueryDerivedPoolsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/DerivedPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error) {
	out := new(QueryLiquidityProviderResponse)
	err := c.cc.Invoke(ctx, "/types.Query/LiquidityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error) {
	out := new(QueryLiquidityProvidersResponse)
	err := c.cc.Invoke(ctx, "/types.Query/LiquidityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error) {
	out := new(QuerySaverResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Saver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error) {
	out := new(QuerySaversResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Savers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error) {
	out := new(QueryBorrowerResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Borrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error) {
	out := new(QueryBorrowersResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Borrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error) {
	out := new(QueryTradeUnitResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error) {
	out := new(QueryTradeUnitsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Node(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*QueryNodeResponse, error) {
	out := new(QueryNodeResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Nodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error) {
	out := new(QueryNodesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSlip(ctx context.Context, in *QueryPoolSlipRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error) {
	out := new(QueryPoolSlipsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/PoolSlip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSlips(ctx context.Context, in *QueryPoolSlipsRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error) {
	out := new(QueryPoolSlipsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/PoolSlips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundFee(ctx context.Context, in *QueryOutboundFeeRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error) {
	out := new(QueryOutboundFeesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/OutboundFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundFees(ctx context.Context, in *QueryOutboundFeesRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error) {
	out := new(QueryOutboundFeesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/OutboundFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamingSwap(ctx context.Context, in *QueryStreamingSwapRequest, opts ...grpc.CallOption) (*QueryStreamingSwapResponse, error) {
	out := new(QueryStreamingSwapResponse)
	err := c.cc.Invoke(ctx, "/types.Query/StreamingSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamingSwaps(ctx context.Context, in *QueryStreamingSwapsRequest, opts ...grpc.CallOption) (*QueryStreamingSwapsResponse, error) {
	out := new(QueryStreamingSwapsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/StreamingSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ban(ctx context.Context, in *QueryBanRequest, opts ...grpc.CallOption) (*BanVoter, error) {
	out := new(BanVoter)
	err := c.cc.Invoke(ctx, "/types.Query/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ragnarok(ctx context.Context, in *QueryRagnarokRequest, opts ...grpc.CallOption) (*QueryRagnarokResponse, error) {
	out := new(QueryRagnarokResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Ragnarok", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunePool(ctx context.Context, in *QueryRunePoolRequest, opts ...grpc.CallOption) (*QueryRunePoolResponse, error) {
	out := new(QueryRunePoolResponse)
	err := c.cc.Invoke(ctx, "/types.Query/RunePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RuneProvider(ctx context.Context, in *QueryRuneProviderRequest, opts ...grpc.CallOption) (*QueryRuneProviderResponse, error) {
	out := new(QueryRuneProviderResponse)
	err := c.cc.Invoke(ctx, "/types.Query/RuneProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RuneProviders(ctx context.Context, in *QueryRuneProvidersRequest, opts ...grpc.CallOption) (*QueryRuneProvidersResponse, error) {
	out := new(QueryRuneProvidersResponse)
	err := c.cc.Invoke(ctx, "/types.Query/RuneProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirValues(ctx context.Context, in *QueryMimirValuesRequest, opts ...grpc.CallOption) (*QueryMimirValuesResponse, error) {
	out := new(QueryMimirValuesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirWithKey(ctx context.Context, in *QueryMimirWithKeyRequest, opts ...grpc.CallOption) (*QueryMimirWithKeyResponse, error) {
	out := new(QueryMimirWithKeyResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirWithKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirAdminValues(ctx context.Context, in *QueryMimirAdminValuesRequest, opts ...grpc.CallOption) (*QueryMimirAdminValuesResponse, error) {
	out := new(QueryMimirAdminValuesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirAdminValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodesAllValues(ctx context.Context, in *QueryMimirNodesAllValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesAllValuesResponse, error) {
	out := new(QueryMimirNodesAllValuesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirNodesAllValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodesValues(ctx context.Context, in *QueryMimirNodesValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesValuesResponse, error) {
	out := new(QueryMimirNodesValuesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirNodesValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodeValues(ctx context.Context, in *QueryMimirNodeValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodeValuesResponse, error) {
	out := new(QueryMimirNodeValuesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/MimirNodeValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundAddresses(ctx context.Context, in *QueryInboundAddressesRequest, opts ...grpc.CallOption) (*QueryInboundAddressesResponse, error) {
	out := new(QueryInboundAddressesResponse)
	err := c.cc.Invoke(ctx, "/types.Query/InboundAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Version(ctx context.Context, in *QueryVersionRequest, opts ...grpc.CallOption) (*QueryVersionResponse, error) {
	out := new(QueryVersionResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Thorname(ctx context.Context, in *QueryThornameRequest, opts ...grpc.CallOption) (*QueryThornameResponse, error) {
	out := new(QueryThornameResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Thorname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invariant(ctx context.Context, in *QueryInvariantRequest, opts ...grpc.CallOption) (*QueryInvariantResponse, error) {
	out := new(QueryInvariantResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Invariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invariants(ctx context.Context, in *QueryInvariantsRequest, opts ...grpc.CallOption) (*QueryInvariantsResponse, error) {
	out := new(QueryInvariantsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Invariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Network(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error) {
	out := new(QueryNetworkResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Network", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceModule(ctx context.Context, in *QueryBalanceModuleRequest, opts ...grpc.CallOption) (*QueryBalanceModuleResponse, error) {
	out := new(QueryBalanceModuleResponse)
	err := c.cc.Invoke(ctx, "/types.Query/BalanceModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns the extended pool information for the provided asset.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	DerivedPool(context.Context, *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error)
	DerivedPools(context.Context, *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(context.Context, *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(context.Context, *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error)
	Saver(context.Context, *QuerySaverRequest) (*QuerySaverResponse, error)
	Savers(context.Context, *QuerySaversRequest) (*QuerySaversResponse, error)
	Borrower(context.Context, *QueryBorrowerRequest) (*QueryBorrowerResponse, error)
	Borrowers(context.Context, *QueryBorrowersRequest) (*QueryBorrowersResponse, error)
	TradeUnit(context.Context, *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error)
	TradeUnits(context.Context, *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error)
	TradeAccount(context.Context, *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error)
	TradeAccounts(context.Context, *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error)
	Node(context.Context, *QueryNodeRequest) (*QueryNodeResponse, error)
	Nodes(context.Context, *QueryNodesRequest) (*QueryNodesResponse, error)
	PoolSlip(context.Context, *QueryPoolSlipRequest) (*QueryPoolSlipsResponse, error)
	PoolSlips(context.Context, *QueryPoolSlipsRequest) (*QueryPoolSlipsResponse, error)
	OutboundFee(context.Context, *QueryOutboundFeeRequest) (*QueryOutboundFeesResponse, error)
	OutboundFees(context.Context, *QueryOutboundFeesRequest) (*QueryOutboundFeesResponse, error)
	StreamingSwap(context.Context, *QueryStreamingSwapRequest) (*QueryStreamingSwapResponse, error)
	StreamingSwaps(context.Context, *QueryStreamingSwapsRequest) (*QueryStreamingSwapsResponse, error)
	Ban(context.Context, *QueryBanRequest) (*BanVoter, error)
	Ragnarok(context.Context, *QueryRagnarokRequest) (*QueryRagnarokResponse, error)
	RunePool(context.Context, *QueryRunePoolRequest) (*QueryRunePoolResponse, error)
	RuneProvider(context.Context, *QueryRuneProviderRequest) (*QueryRuneProviderResponse, error)
	RuneProviders(context.Context, *QueryRuneProvidersRequest) (*QueryRuneProvidersResponse, error)
	MimirValues(context.Context, *QueryMimirValuesRequest) (*QueryMimirValuesResponse, error)
	MimirWithKey(context.Context, *QueryMimirWithKeyRequest) (*QueryMimirWithKeyResponse, error)
	MimirAdminValues(context.Context, *QueryMimirAdminValuesRequest) (*QueryMimirAdminValuesResponse, error)
	MimirNodesAllValues(context.Context, *QueryMimirNodesAllValuesRequest) (*QueryMimirNodesAllValuesResponse, error)
	MimirNodesValues(context.Context, *QueryMimirNodesValuesRequest) (*QueryMimirNodesValuesResponse, error)
	MimirNodeValues(context.Context, *QueryMimirNodeValuesRequest) (*QueryMimirNodeValuesResponse, error)
	InboundAddresses(context.Context, *QueryInboundAddressesRequest) (*QueryInboundAddressesResponse, error)
	Version(context.Context, *QueryVersionRequest) (*QueryVersionResponse, error)
	Thorname(context.Context, *QueryThornameRequest) (*QueryThornameResponse, error)
	Invariant(context.Context, *QueryInvariantRequest) (*QueryInvariantResponse, error)
	Invariants(context.Context, *QueryInvariantsRequest) (*QueryInvariantsResponse, error)
	Network(context.Context, *QueryNetworkRequest) (*QueryNetworkResponse, error)
	BalanceModule(context.Context, *QueryBalanceModuleRequest) (*QueryBalanceModuleResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) DerivedPool(ctx context.Context, req *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPool not implemented")
}
func (*UnimplementedQueryServer) DerivedPools(ctx context.Context, req *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPools not implemented")
}
func (*UnimplementedQueryServer) LiquidityProvider(ctx context.Context, req *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvider not implemented")
}
func (*UnimplementedQueryServer) LiquidityProviders(ctx context.Context, req *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProviders not implemented")
}
func (*UnimplementedQueryServer) Saver(ctx context.Context, req *QuerySaverRequest) (*QuerySaverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Saver not implemented")
}
func (*UnimplementedQueryServer) Savers(ctx context.Context, req *QuerySaversRequest) (*QuerySaversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Savers not implemented")
}
func (*UnimplementedQueryServer) Borrower(ctx context.Context, req *QueryBorrowerRequest) (*QueryBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrower not implemented")
}
func (*UnimplementedQueryServer) Borrowers(ctx context.Context, req *QueryBorrowersRequest) (*QueryBorrowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrowers not implemented")
}
func (*UnimplementedQueryServer) TradeUnit(ctx context.Context, req *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnit not implemented")
}
func (*UnimplementedQueryServer) TradeUnits(ctx context.Context, req *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnits not implemented")
}
func (*UnimplementedQueryServer) TradeAccount(ctx context.Context, req *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccount not implemented")
}
func (*UnimplementedQueryServer) TradeAccounts(ctx context.Context, req *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccounts not implemented")
}
func (*UnimplementedQueryServer) Node(ctx context.Context, req *QueryNodeRequest) (*QueryNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (*UnimplementedQueryServer) Nodes(ctx context.Context, req *QueryNodesRequest) (*QueryNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (*UnimplementedQueryServer) PoolSlip(ctx context.Context, req *QueryPoolSlipRequest) (*QueryPoolSlipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSlip not implemented")
}
func (*UnimplementedQueryServer) PoolSlips(ctx context.Context, req *QueryPoolSlipsRequest) (*QueryPoolSlipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSlips not implemented")
}
func (*UnimplementedQueryServer) OutboundFee(ctx context.Context, req *QueryOutboundFeeRequest) (*QueryOutboundFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundFee not implemented")
}
func (*UnimplementedQueryServer) OutboundFees(ctx context.Context, req *QueryOutboundFeesRequest) (*QueryOutboundFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundFees not implemented")
}
func (*UnimplementedQueryServer) StreamingSwap(ctx context.Context, req *QueryStreamingSwapRequest) (*QueryStreamingSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamingSwap not implemented")
}
func (*UnimplementedQueryServer) StreamingSwaps(ctx context.Context, req *QueryStreamingSwapsRequest) (*QueryStreamingSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamingSwaps not implemented")
}
func (*UnimplementedQueryServer) Ban(ctx context.Context, req *QueryBanRequest) (*BanVoter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedQueryServer) Ragnarok(ctx context.Context, req *QueryRagnarokRequest) (*QueryRagnarokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ragnarok not implemented")
}
func (*UnimplementedQueryServer) RunePool(ctx context.Context, req *QueryRunePoolRequest) (*QueryRunePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunePool not implemented")
}
func (*UnimplementedQueryServer) RuneProvider(ctx context.Context, req *QueryRuneProviderRequest) (*QueryRuneProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuneProvider not implemented")
}
func (*UnimplementedQueryServer) RuneProviders(ctx context.Context, req *QueryRuneProvidersRequest) (*QueryRuneProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuneProviders not implemented")
}
func (*UnimplementedQueryServer) MimirValues(ctx context.Context, req *QueryMimirValuesRequest) (*QueryMimirValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirValues not implemented")
}
func (*UnimplementedQueryServer) MimirWithKey(ctx context.Context, req *QueryMimirWithKeyRequest) (*QueryMimirWithKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirWithKey not implemented")
}
func (*UnimplementedQueryServer) MimirAdminValues(ctx context.Context, req *QueryMimirAdminValuesRequest) (*QueryMimirAdminValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirAdminValues not implemented")
}
func (*UnimplementedQueryServer) MimirNodesAllValues(ctx context.Context, req *QueryMimirNodesAllValuesRequest) (*QueryMimirNodesAllValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodesAllValues not implemented")
}
func (*UnimplementedQueryServer) MimirNodesValues(ctx context.Context, req *QueryMimirNodesValuesRequest) (*QueryMimirNodesValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodesValues not implemented")
}
func (*UnimplementedQueryServer) MimirNodeValues(ctx context.Context, req *QueryMimirNodeValuesRequest) (*QueryMimirNodeValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodeValues not implemented")
}
func (*UnimplementedQueryServer) InboundAddresses(ctx context.Context, req *QueryInboundAddressesRequest) (*QueryInboundAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundAddresses not implemented")
}
func (*UnimplementedQueryServer) Version(ctx context.Context, req *QueryVersionRequest) (*QueryVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedQueryServer) Thorname(ctx context.Context, req *QueryThornameRequest) (*QueryThornameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thorname not implemented")
}
func (*UnimplementedQueryServer) Invariant(ctx context.Context, req *QueryInvariantRequest) (*QueryInvariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invariant not implemented")
}
func (*UnimplementedQueryServer) Invariants(ctx context.Context, req *QueryInvariantsRequest) (*QueryInvariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invariants not implemented")
}
func (*UnimplementedQueryServer) Network(ctx context.Context, req *QueryNetworkRequest) (*QueryNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Network not implemented")
}
func (*UnimplementedQueryServer) BalanceModule(ctx context.Context, req *QueryBalanceModuleRequest) (*QueryBalanceModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceModule not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/DerivedPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPool(ctx, req.(*QueryDerivedPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/DerivedPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPools(ctx, req.(*QueryDerivedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/LiquidityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProvider(ctx, req.(*QueryLiquidityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/LiquidityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProviders(ctx, req.(*QueryLiquidityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Saver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Saver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Saver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Saver(ctx, req.(*QuerySaverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Savers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Savers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Savers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Savers(ctx, req.(*QuerySaversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Borrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrower(ctx, req.(*QueryBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Borrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrowers(ctx, req.(*QueryBorrowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnit(ctx, req.(*QueryTradeUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnits(ctx, req.(*QueryTradeUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccount(ctx, req.(*QueryTradeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccounts(ctx, req.(*QueryTradeAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Node(ctx, req.(*QueryNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Nodes(ctx, req.(*QueryNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolSlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/PoolSlip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSlip(ctx, req.(*QueryPoolSlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSlips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolSlipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSlips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/PoolSlips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSlips(ctx, req.(*QueryPoolSlipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboundFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/OutboundFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundFee(ctx, req.(*QueryOutboundFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboundFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/OutboundFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundFees(ctx, req.(*QueryOutboundFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamingSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamingSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamingSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/StreamingSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamingSwap(ctx, req.(*QueryStreamingSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamingSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamingSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamingSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/StreamingSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamingSwaps(ctx, req.(*QueryStreamingSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ban(ctx, req.(*QueryBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ragnarok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRagnarokRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ragnarok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Ragnarok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ragnarok(ctx, req.(*QueryRagnarokRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRunePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/RunePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunePool(ctx, req.(*QueryRunePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RuneProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRuneProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RuneProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/RuneProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RuneProvider(ctx, req.(*QueryRuneProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RuneProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRuneProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RuneProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/RuneProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RuneProviders(ctx, req.(*QueryRuneProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirValues(ctx, req.(*QueryMimirValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirWithKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirWithKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirWithKey(ctx, req.(*QueryMimirWithKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirAdminValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirAdminValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirAdminValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirAdminValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirAdminValues(ctx, req.(*QueryMimirAdminValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodesAllValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodesAllValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodesAllValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirNodesAllValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodesAllValues(ctx, req.(*QueryMimirNodesAllValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodesValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodesValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodesValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirNodesValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodesValues(ctx, req.(*QueryMimirNodesValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodeValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/MimirNodeValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodeValues(ctx, req.(*QueryMimirNodeValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInboundAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/InboundAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundAddresses(ctx, req.(*QueryInboundAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Version(ctx, req.(*QueryVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Thorname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThornameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Thorname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Thorname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Thorname(ctx, req.(*QueryThornameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Invariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invariant(ctx, req.(*QueryInvariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Invariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invariants(ctx, req.(*QueryInvariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Network(ctx, req.(*QueryNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/BalanceModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceModule(ctx, req.(*QueryBalanceModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "DerivedPool",
			Handler:    _Query_DerivedPool_Handler,
		},
		{
			MethodName: "DerivedPools",
			Handler:    _Query_DerivedPools_Handler,
		},
		{
			MethodName: "LiquidityProvider",
			Handler:    _Query_LiquidityProvider_Handler,
		},
		{
			MethodName: "LiquidityProviders",
			Handler:    _Query_LiquidityProviders_Handler,
		},
		{
			MethodName: "Saver",
			Handler:    _Query_Saver_Handler,
		},
		{
			MethodName: "Savers",
			Handler:    _Query_Savers_Handler,
		},
		{
			MethodName: "Borrower",
			Handler:    _Query_Borrower_Handler,
		},
		{
			MethodName: "Borrowers",
			Handler:    _Query_Borrowers_Handler,
		},
		{
			MethodName: "TradeUnit",
			Handler:    _Query_TradeUnit_Handler,
		},
		{
			MethodName: "TradeUnits",
			Handler:    _Query_TradeUnits_Handler,
		},
		{
			MethodName: "TradeAccount",
			Handler:    _Query_TradeAccount_Handler,
		},
		{
			MethodName: "TradeAccounts",
			Handler:    _Query_TradeAccounts_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Query_Node_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Query_Nodes_Handler,
		},
		{
			MethodName: "PoolSlip",
			Handler:    _Query_PoolSlip_Handler,
		},
		{
			MethodName: "PoolSlips",
			Handler:    _Query_PoolSlips_Handler,
		},
		{
			MethodName: "OutboundFee",
			Handler:    _Query_OutboundFee_Handler,
		},
		{
			MethodName: "OutboundFees",
			Handler:    _Query_OutboundFees_Handler,
		},
		{
			MethodName: "StreamingSwap",
			Handler:    _Query_StreamingSwap_Handler,
		},
		{
			MethodName: "StreamingSwaps",
			Handler:    _Query_StreamingSwaps_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Query_Ban_Handler,
		},
		{
			MethodName: "Ragnarok",
			Handler:    _Query_Ragnarok_Handler,
		},
		{
			MethodName: "RunePool",
			Handler:    _Query_RunePool_Handler,
		},
		{
			MethodName: "RuneProvider",
			Handler:    _Query_RuneProvider_Handler,
		},
		{
			MethodName: "RuneProviders",
			Handler:    _Query_RuneProviders_Handler,
		},
		{
			MethodName: "MimirValues",
			Handler:    _Query_MimirValues_Handler,
		},
		{
			MethodName: "MimirWithKey",
			Handler:    _Query_MimirWithKey_Handler,
		},
		{
			MethodName: "MimirAdminValues",
			Handler:    _Query_MimirAdminValues_Handler,
		},
		{
			MethodName: "MimirNodesAllValues",
			Handler:    _Query_MimirNodesAllValues_Handler,
		},
		{
			MethodName: "MimirNodesValues",
			Handler:    _Query_MimirNodesValues_Handler,
		},
		{
			MethodName: "MimirNodeValues",
			Handler:    _Query_MimirNodeValues_Handler,
		},
		{
			MethodName: "InboundAddresses",
			Handler:    _Query_InboundAddresses_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Query_Version_Handler,
		},
		{
			MethodName: "Thorname",
			Handler:    _Query_Thorname_Handler,
		},
		{
			MethodName: "Invariant",
			Handler:    _Query_Invariant_Handler,
		},
		{
			MethodName: "Invariants",
			Handler:    _Query_Invariants_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _Query_Network_Handler,
		},
		{
			MethodName: "BalanceModule",
			Handler:    _Query_BalanceModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/query.proto",
}
