// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("types/query.proto", fileDescriptor_3dd69a0a5972f391) }

var fileDescriptor_3dd69a0a5972f391 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0x9b, 0x47, 0x4f, 0x2a, 0xba, 0x14, 0x89, 0x0e, 0xa8, 0x49, 0x4c, 0xea, 0xa4, 0x25,
	0x2d, 0x6a, 0x81, 0xac, 0xd4, 0x22, 0x4e, 0x5c, 0xa8, 0xb8, 0x20, 0x71, 0x28, 0xaf, 0x87, 0x5e,
	0x22, 0x27, 0x5e, 0x39, 0x16, 0xae, 0xd7, 0xf1, 0x6c, 0x02, 0x51, 0x55, 0x90, 0xf8, 0x04, 0x48,
	0x5c, 0x38, 0xf1, 0x79, 0x38, 0x56, 0xe2, 0xc2, 0x11, 0x25, 0x7c, 0x0e, 0x84, 0xbc, 0x59, 0x9b,
	0x75, 0x6d, 0x27, 0xbd, 0x59, 0xf3, 0x9f, 0xfd, 0xff, 0x66, 0xf6, 0x65, 0x4c, 0xd6, 0xc4, 0x38,
	0x60, 0x48, 0x07, 0x43, 0x16, 0x8e, 0xdb, 0x41, 0xc8, 0x05, 0x87, 0xb2, 0x0c, 0x19, 0x75, 0x87,
	0x73, 0xc7, 0x63, 0xd4, 0x0a, 0x5c, 0x6a, 0xf9, 0x3e, 0x17, 0x96, 0x70, 0xb9, 0x8f, 0xb3, 0x24,
	0xe3, 0xa6, 0xc3, 0x1d, 0x2e, 0x3f, 0x69, 0xf4, 0xa5, 0xa2, 0xeb, 0x9a, 0x5b, 0x27, 0xe0, 0xdc,
	0x53, 0x71, 0x53, 0x8f, 0xdb, 0x2c, 0x74, 0x47, 0xcc, 0xd6, 0xf5, 0x96, 0xae, 0x7b, 0xee, 0x60,
	0xe8, 0xda, 0xae, 0x18, 0x77, 0x82, 0x90, 0x8f, 0x5c, 0x9b, 0x85, 0x2a, 0xab, 0xa2, 0x67, 0xa1,
	0x35, 0x4a, 0x04, 0x43, 0x17, 0xba, 0x3c, 0x0c, 0xf9, 0xbb, 0x44, 0xab, 0xeb, 0x9a, 0x08, 0x2d,
	0x9b, 0x75, 0x86, 0xbe, 0x2b, 0x94, 0xda, 0xc8, 0xaa, 0x56, 0xaf, 0xc7, 0x87, 0xbe, 0x4a, 0xd8,
	0xff, 0xb3, 0x4a, 0xca, 0xcf, 0x23, 0x15, 0x8e, 0xc9, 0xff, 0x47, 0x9c, 0x7b, 0x50, 0x69, 0xcb,
	0x35, 0x6d, 0x19, 0x8d, 0x22, 0x2f, 0xd8, 0x60, 0xc8, 0x50, 0x18, 0xd5, 0xac, 0x80, 0x01, 0xf7,
	0x91, 0x6d, 0x35, 0x3e, 0xfd, 0xf8, 0xfd, 0xe5, 0xbf, 0x1a, 0x54, 0xa8, 0xe8, 0xf3, 0xb0, 0xd7,
	0xb7, 0x5c, 0x9f, 0x46, 0xdd, 0xd3, 0x53, 0x0b, 0x91, 0x89, 0x33, 0x78, 0x43, 0xca, 0xd1, 0x02,
	0x84, 0x8c, 0x07, 0xc6, 0xee, 0xb5, 0x1c, 0x45, 0xd9, 0x57, 0xa5, 0x3d, 0xc0, 0xf5, 0x0b, 0xf6,
	0x08, 0x01, 0xb9, 0xfa, 0x64, 0xb6, 0xdb, 0xb2, 0x74, 0x53, 0xf7, 0xd0, 0x84, 0x98, 0xd1, 0x28,
	0xd4, 0x15, 0xa9, 0x29, 0x49, 0x06, 0x54, 0x35, 0x92, 0x9d, 0xea, 0xc4, 0x23, 0xab, 0xda, 0x42,
	0x84, 0x22, 0xcb, 0xa4, 0xaf, 0x66, 0x71, 0x82, 0x82, 0xd6, 0x24, 0xf4, 0x06, 0xac, 0x5d, 0x84,
	0x22, 0x7c, 0x2b, 0x91, 0xb5, 0x67, 0xf1, 0x75, 0x39, 0x52, 0xb7, 0x05, 0x5a, 0xba, 0x65, 0x46,
	0x8e, 0xc1, 0xdb, 0x0b, 0xb2, 0x14, 0xfd, 0x91, 0xa4, 0x3f, 0x84, 0x07, 0x05, 0x67, 0x47, 0xb3,
	0xd7, 0x95, 0x9e, 0x5a, 0xb6, 0x1d, 0x32, 0xc4, 0x33, 0xf8, 0x5a, 0x22, 0x90, 0xf1, 0x46, 0x98,
	0xcf, 0x4e, 0xf6, 0x66, 0x67, 0x51, 0x9a, 0xaa, 0xf1, 0x40, 0xd6, 0x78, 0x1f, 0xee, 0x5e, 0xbe,
	0x46, 0x84, 0x13, 0x52, 0x7e, 0x19, 0xbd, 0xa1, 0xf4, 0x9d, 0x93, 0xa1, 0xdc, 0x3b, 0xa7, 0x14,
	0x85, 0xa4, 0x12, 0xb9, 0x0b, 0x77, 0x8a, 0x90, 0xf2, 0x7d, 0x6a, 0x3b, 0xe1, 0x90, 0x65, 0xe9,
	0x80, 0x90, 0x75, 0x4d, 0x1a, 0x36, 0xf2, 0x24, 0x45, 0xdc, 0x91, 0xc4, 0x26, 0x98, 0x73, 0x89,
	0x08, 0x63, 0x72, 0xe5, 0x50, 0x8d, 0x00, 0xb8, 0xa5, 0xfb, 0xc5, 0xd1, 0x18, 0x56, 0xcf, 0x17,
	0x15, 0x6e, 0x5f, 0xe2, 0xee, 0xc1, 0x5e, 0x11, 0x2e, 0x9e, 0x33, 0x5a, 0x8f, 0x48, 0x56, 0x62,
	0x1f, 0x84, 0x5c, 0xfb, 0xa4, 0xd3, 0x8d, 0x02, 0x55, 0xd1, 0x77, 0x25, 0xfd, 0x36, 0x6c, 0x2e,
	0xa2, 0x23, 0x70, 0xb2, 0xf2, 0x2a, 0x1a, 0x5c, 0xaf, 0x7d, 0x57, 0xa4, 0xa1, 0x49, 0x38, 0x17,
	0xaa, 0xa9, 0x0a, 0xba, 0x2d, 0xa1, 0x0d, 0xd8, 0xd0, 0xa0, 0x72, 0x26, 0xd2, 0x68, 0x62, 0x26,
	0x4f, 0xfc, 0x2d, 0x21, 0xc9, 0x5a, 0x84, 0x7c, 0xcf, 0xa4, 0x4f, 0xb3, 0x48, 0x56, 0x4c, 0x53,
	0x32, 0xab, 0xb0, 0x9e, 0xcb, 0x44, 0xf8, 0x40, 0x56, 0xe5, 0xaa, 0xc7, 0xb3, 0xa9, 0x9c, 0x9e,
	0x27, 0xba, 0x12, 0x03, 0x37, 0x8b, 0x12, 0xfe, 0x31, 0xf7, 0x24, 0xb3, 0x05, 0x5b, 0x19, 0xa6,
	0x9a, 0xfd, 0xda, 0x91, 0x7e, 0x24, 0xd7, 0x52, 0x26, 0xd0, 0x9c, 0xe3, 0x7f, 0xe9, 0x0a, 0xf2,
	0x8e, 0x37, 0x55, 0x01, 0xc6, 0xbb, 0x7d, 0xf8, 0xf4, 0xfb, 0xc4, 0x2c, 0x9d, 0x4f, 0xcc, 0xd2,
	0xaf, 0x89, 0x59, 0xfa, 0x3c, 0x35, 0x97, 0xce, 0xa7, 0xe6, 0xd2, 0xcf, 0xa9, 0xb9, 0x74, 0x4c,
	0x1d, 0x57, 0x78, 0x56, 0xb7, 0xdd, 0xe3, 0x27, 0xba, 0x4d, 0x9f, 0x87, 0x3e, 0xb7, 0x19, 0x7d,
	0xaf, 0x07, 0xa3, 0x82, 0xba, 0xcb, 0xf2, 0x97, 0x76, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x48,
	0xde, 0x08, 0x66, 0xf4, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the extended pool information for the provided asset.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error)
	DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error)
	Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error)
	Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error)
	Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error)
	Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error)
	TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error)
	TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error)
	TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
	TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error) {
	out := new(QueryDerivedPoolResponse)
	err := c.cc.Invoke(ctx, "/types.Query/DerivedPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error) {
	out := new(QueryDerivedPoolsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/DerivedPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error) {
	out := new(QueryLiquidityProviderResponse)
	err := c.cc.Invoke(ctx, "/types.Query/LiquidityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error) {
	out := new(QueryLiquidityProvidersResponse)
	err := c.cc.Invoke(ctx, "/types.Query/LiquidityProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error) {
	out := new(QuerySaverResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Saver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error) {
	out := new(QuerySaversResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Savers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error) {
	out := new(QueryBorrowerResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Borrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error) {
	out := new(QueryBorrowersResponse)
	err := c.cc.Invoke(ctx, "/types.Query/Borrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error) {
	out := new(QueryTradeUnitResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error) {
	out := new(QueryTradeUnitsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, "/types.Query/TradeAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns the extended pool information for the provided asset.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	DerivedPool(context.Context, *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error)
	DerivedPools(context.Context, *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(context.Context, *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(context.Context, *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error)
	Saver(context.Context, *QuerySaverRequest) (*QuerySaverResponse, error)
	Savers(context.Context, *QuerySaversRequest) (*QuerySaversResponse, error)
	Borrower(context.Context, *QueryBorrowerRequest) (*QueryBorrowerResponse, error)
	Borrowers(context.Context, *QueryBorrowersRequest) (*QueryBorrowersResponse, error)
	TradeUnit(context.Context, *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error)
	TradeUnits(context.Context, *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error)
	TradeAccount(context.Context, *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error)
	TradeAccounts(context.Context, *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) DerivedPool(ctx context.Context, req *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPool not implemented")
}
func (*UnimplementedQueryServer) DerivedPools(ctx context.Context, req *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPools not implemented")
}
func (*UnimplementedQueryServer) LiquidityProvider(ctx context.Context, req *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvider not implemented")
}
func (*UnimplementedQueryServer) LiquidityProviders(ctx context.Context, req *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProviders not implemented")
}
func (*UnimplementedQueryServer) Saver(ctx context.Context, req *QuerySaverRequest) (*QuerySaverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Saver not implemented")
}
func (*UnimplementedQueryServer) Savers(ctx context.Context, req *QuerySaversRequest) (*QuerySaversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Savers not implemented")
}
func (*UnimplementedQueryServer) Borrower(ctx context.Context, req *QueryBorrowerRequest) (*QueryBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrower not implemented")
}
func (*UnimplementedQueryServer) Borrowers(ctx context.Context, req *QueryBorrowersRequest) (*QueryBorrowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrowers not implemented")
}
func (*UnimplementedQueryServer) TradeUnit(ctx context.Context, req *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnit not implemented")
}
func (*UnimplementedQueryServer) TradeUnits(ctx context.Context, req *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnits not implemented")
}
func (*UnimplementedQueryServer) TradeAccount(ctx context.Context, req *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccount not implemented")
}
func (*UnimplementedQueryServer) TradeAccounts(ctx context.Context, req *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccounts not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/DerivedPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPool(ctx, req.(*QueryDerivedPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/DerivedPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPools(ctx, req.(*QueryDerivedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/LiquidityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProvider(ctx, req.(*QueryLiquidityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/LiquidityProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProviders(ctx, req.(*QueryLiquidityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Saver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Saver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Saver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Saver(ctx, req.(*QuerySaverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Savers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Savers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Savers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Savers(ctx, req.(*QuerySaversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Borrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrower(ctx, req.(*QueryBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/Borrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrowers(ctx, req.(*QueryBorrowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnit(ctx, req.(*QueryTradeUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnits(ctx, req.(*QueryTradeUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccount(ctx, req.(*QueryTradeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Query/TradeAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccounts(ctx, req.(*QueryTradeAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "DerivedPool",
			Handler:    _Query_DerivedPool_Handler,
		},
		{
			MethodName: "DerivedPools",
			Handler:    _Query_DerivedPools_Handler,
		},
		{
			MethodName: "LiquidityProvider",
			Handler:    _Query_LiquidityProvider_Handler,
		},
		{
			MethodName: "LiquidityProviders",
			Handler:    _Query_LiquidityProviders_Handler,
		},
		{
			MethodName: "Saver",
			Handler:    _Query_Saver_Handler,
		},
		{
			MethodName: "Savers",
			Handler:    _Query_Savers_Handler,
		},
		{
			MethodName: "Borrower",
			Handler:    _Query_Borrower_Handler,
		},
		{
			MethodName: "Borrowers",
			Handler:    _Query_Borrowers_Handler,
		},
		{
			MethodName: "TradeUnit",
			Handler:    _Query_TradeUnit_Handler,
		},
		{
			MethodName: "TradeUnits",
			Handler:    _Query_TradeUnits_Handler,
		},
		{
			MethodName: "TradeAccount",
			Handler:    _Query_TradeAccount_Handler,
		},
		{
			MethodName: "TradeAccounts",
			Handler:    _Query_TradeAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/query.proto",
}
