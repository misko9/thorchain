// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_tss_keysign_fail.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgTssKeysignFail struct {
	ID     string                                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height int64                                         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Blame  Blame                                         `protobuf:"bytes,3,opt,name=blame,proto3" json:"blame"`
	Memo   string                                        `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Coins  gitlab_com_thorchain_thornode_common.Coins    `protobuf:"bytes,5,rep,name=coins,proto3,castrepeated=gitlab.com/thorchain/thornode/common.Coins" json:"coins"`
	PubKey gitlab_com_thorchain_thornode_common.PubKey   `protobuf:"bytes,6,opt,name=pub_key,json=pubKey,proto3,casttype=gitlab.com/thorchain/thornode/common.PubKey" json:"pub_key,omitempty"`
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgTssKeysignFail) Reset()         { *m = MsgTssKeysignFail{} }
func (m *MsgTssKeysignFail) String() string { return proto.CompactTextString(m) }
func (*MsgTssKeysignFail) ProtoMessage()    {}
func (*MsgTssKeysignFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3201b65b4ff2b8b, []int{0}
}
func (m *MsgTssKeysignFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTssKeysignFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTssKeysignFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTssKeysignFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTssKeysignFail.Merge(m, src)
}
func (m *MsgTssKeysignFail) XXX_Size() int {
	return m.Size()
}
func (m *MsgTssKeysignFail) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTssKeysignFail.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTssKeysignFail proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgTssKeysignFail)(nil), "types.MsgTssKeysignFail")
}

func init() { proto.RegisterFile("types/msg_tss_keysign_fail.proto", fileDescriptor_e3201b65b4ff2b8b) }

var fileDescriptor_e3201b65b4ff2b8b = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xbf, 0xee, 0xd3, 0x30,
	0x10, 0x8e, 0xd3, 0x26, 0x3f, 0x61, 0xba, 0x60, 0x50, 0x15, 0x75, 0x48, 0x22, 0xa6, 0x08, 0xd4,
	0x5a, 0x94, 0x27, 0x68, 0x40, 0x88, 0xaa, 0xaa, 0x84, 0x22, 0xc4, 0xc0, 0x12, 0xe5, 0x8f, 0x71,
	0xac, 0x26, 0x71, 0x14, 0xa7, 0x12, 0x7d, 0x0b, 0x9e, 0x83, 0x27, 0xe9, 0xd8, 0x91, 0x29, 0x40,
	0xba, 0xf3, 0x00, 0x9d, 0x90, 0xed, 0x0c, 0x9d, 0x10, 0x8b, 0xef, 0xf3, 0x77, 0x77, 0xdf, 0x9d,
	0x3f, 0x43, 0xbf, 0x3b, 0x35, 0x44, 0xe0, 0x4a, 0xd0, 0xb8, 0x13, 0x22, 0x3e, 0x90, 0x93, 0x60,
	0xb4, 0x8e, 0xbf, 0x24, 0xac, 0x5c, 0x35, 0x2d, 0xef, 0x38, 0xb2, 0x54, 0xc5, 0x62, 0xae, 0x0b,
	0xe5, 0x19, 0xa7, 0x65, 0x52, 0x11, 0x9d, 0x5e, 0x3c, 0xcd, 0x78, 0x55, 0xf1, 0x1a, 0xeb, 0x30,
	0x92, 0xcf, 0x28, 0xa7, 0x5c, 0x41, 0x2c, 0x91, 0x66, 0x9f, 0xff, 0x31, 0xe1, 0x93, 0xbd, 0xa0,
	0x1f, 0x85, 0xd8, 0xe9, 0x31, 0xef, 0x12, 0x56, 0xa2, 0x39, 0x34, 0x59, 0xee, 0x00, 0x1f, 0x04,
	0x8f, 0x42, 0x7b, 0xe8, 0x3d, 0x73, 0xfb, 0x36, 0x32, 0x59, 0x8e, 0xe6, 0xd0, 0x2e, 0x08, 0xa3,
	0x45, 0xe7, 0x98, 0x3e, 0x08, 0x26, 0xd1, 0x78, 0x43, 0x01, 0xb4, 0xd4, 0x7c, 0x67, 0xe2, 0x83,
	0xe0, 0xf1, 0x7a, 0xb6, 0x52, 0x8b, 0xad, 0x42, 0xc9, 0x85, 0xd3, 0x73, 0xef, 0x19, 0x91, 0x2e,
	0x40, 0x08, 0x4e, 0x2b, 0x52, 0x71, 0x67, 0x2a, 0xb5, 0x23, 0x85, 0xd1, 0x27, 0x68, 0x65, 0x9c,
	0xd5, 0xc2, 0xb1, 0xfc, 0x89, 0xea, 0x1e, 0xf7, 0x7e, 0xc3, 0x59, 0x1d, 0xae, 0x65, 0xf7, 0xf7,
	0x9f, 0xde, 0x0b, 0xca, 0xba, 0x32, 0x49, 0x65, 0x0e, 0x77, 0x05, 0x6f, 0xb3, 0x22, 0x61, 0xb5,
	0x42, 0x35, 0xcf, 0x09, 0xbe, 0x6b, 0x11, 0x91, 0x96, 0x43, 0xef, 0xe1, 0x43, 0x73, 0x4c, 0xa5,
	0x7f, 0x8e, 0xad, 0x9e, 0x82, 0x6f, 0xbd, 0xf7, 0xf2, 0xbf, 0x74, 0x3e, 0x1c, 0xd3, 0x1d, 0x39,
	0x45, 0x76, 0xa3, 0x22, 0xda, 0x42, 0x5b, 0x7a, 0x43, 0x5a, 0xe7, 0xc1, 0x07, 0xc1, 0x2c, 0x7c,
	0x75, 0xeb, 0xbd, 0x25, 0x65, 0x5d, 0x71, 0xd4, 0x42, 0x19, 0x17, 0x15, 0x17, 0x63, 0x58, 0x8a,
	0xfc, 0x80, 0xb5, 0x01, 0x9b, 0x2c, 0xdb, 0xe4, 0x79, 0x4b, 0x84, 0x88, 0x46, 0x81, 0x70, 0x7f,
	0xfe, 0xed, 0x1a, 0xe7, 0xc1, 0x05, 0x97, 0xc1, 0x05, 0xbf, 0x06, 0x17, 0x7c, 0xbb, 0xba, 0xc6,
	0xe5, 0xea, 0x1a, 0x3f, 0xae, 0xae, 0xf1, 0x19, 0xff, 0x7b, 0xbb, 0xaf, 0xf7, 0xa4, 0x9c, 0x90,
	0xda, 0xea, 0x1b, 0x5f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x11, 0x1f, 0xe8, 0x8e, 0x34, 0x02,
	0x00, 0x00,
}

func (m *MsgTssKeysignFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTssKeysignFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTssKeysignFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Blame.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Height != 0 {
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintMsgTssKeysignFail(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgTssKeysignFail(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgTssKeysignFail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTssKeysignFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMsgTssKeysignFail(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMsgTssKeysignFail(uint64(m.Height))
	}
	l = m.Blame.Size()
	n += 1 + l + sovMsgTssKeysignFail(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovMsgTssKeysignFail(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovMsgTssKeysignFail(uint64(l))
		}
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMsgTssKeysignFail(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgTssKeysignFail(uint64(l))
	}
	return n
}

func sovMsgTssKeysignFail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgTssKeysignFail(x uint64) (n int) {
	return sovMsgTssKeysignFail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTssKeysignFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgTssKeysignFail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTssKeysignFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTssKeysignFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, common.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = gitlab_com_thorchain_thornode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgTssKeysignFail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgTssKeysignFail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgTssKeysignFail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgTssKeysignFail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTssKeysignFail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgTssKeysignFail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgTssKeysignFail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgTssKeysignFail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgTssKeysignFail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgTssKeysignFail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgTssKeysignFail = fmt.Errorf("proto: unexpected end of group")
)
