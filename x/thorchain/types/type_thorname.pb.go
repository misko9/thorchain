// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_thorname.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type THORNameAlias struct {
	Chain   gitlab_com_thorchain_thornode_common.Chain   `protobuf:"bytes,1,opt,name=chain,proto3,casttype=gitlab.com/thorchain/thornode/common.Chain" json:"chain,omitempty"`
	Address gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,2,opt,name=address,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"address,omitempty"`
}

func (m *THORNameAlias) Reset()         { *m = THORNameAlias{} }
func (m *THORNameAlias) String() string { return proto.CompactTextString(m) }
func (*THORNameAlias) ProtoMessage()    {}
func (*THORNameAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fc089c417300976, []int{0}
}
func (m *THORNameAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *THORNameAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_THORNameAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *THORNameAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_THORNameAlias.Merge(m, src)
}
func (m *THORNameAlias) XXX_Size() int {
	return m.Size()
}
func (m *THORNameAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_THORNameAlias.DiscardUnknown(m)
}

var xxx_messageInfo_THORNameAlias proto.InternalMessageInfo

func (m *THORNameAlias) GetChain() gitlab_com_thorchain_thornode_common.Chain {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *THORNameAlias) GetAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.Address
	}
	return ""
}

type THORName struct {
	Name              string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExpireBlockHeight int64                                         `protobuf:"varint,2,opt,name=expire_block_height,json=expireBlockHeight,proto3" json:"expire_block_height,omitempty"`
	Owner             github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	PreferredAsset    common.Asset                                  `protobuf:"bytes,4,opt,name=preferred_asset,json=preferredAsset,proto3" json:"preferred_asset"`
	Aliases           []THORNameAlias                               `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases"`
}

func (m *THORName) Reset()         { *m = THORName{} }
func (m *THORName) String() string { return proto.CompactTextString(m) }
func (*THORName) ProtoMessage()    {}
func (*THORName) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fc089c417300976, []int{1}
}
func (m *THORName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *THORName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_THORName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *THORName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_THORName.Merge(m, src)
}
func (m *THORName) XXX_Size() int {
	return m.Size()
}
func (m *THORName) XXX_DiscardUnknown() {
	xxx_messageInfo_THORName.DiscardUnknown(m)
}

var xxx_messageInfo_THORName proto.InternalMessageInfo

func (m *THORName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *THORName) GetExpireBlockHeight() int64 {
	if m != nil {
		return m.ExpireBlockHeight
	}
	return 0
}

func (m *THORName) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *THORName) GetPreferredAsset() common.Asset {
	if m != nil {
		return m.PreferredAsset
	}
	return common.Asset{}
}

func (m *THORName) GetAliases() []THORNameAlias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func init() {
	proto.RegisterType((*THORNameAlias)(nil), "types.THORNameAlias")
	proto.RegisterType((*THORName)(nil), "types.THORName")
}

func init() { proto.RegisterFile("types/type_thorname.proto", fileDescriptor_7fc089c417300976) }

var fileDescriptor_7fc089c417300976 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x14, 0x14, 0x6d, 0xab, 0x6e, 0xe9, 0xba, 0x45, 0x69, 0x0f, 0xaa, 0x07, 0x49, 0xf0, 0x24, 0x14,
	0xb5, 0xd4, 0xba, 0x1d, 0xbb, 0x58, 0x2d, 0x50, 0xb7, 0x43, 0x0b, 0x08, 0x99, 0xb2, 0x08, 0xb4,
	0xc4, 0x48, 0x82, 0x2d, 0x51, 0x20, 0x15, 0xc4, 0xf9, 0x86, 0x2c, 0xf9, 0x85, 0xfc, 0x8d, 0x47,
	0x8f, 0x99, 0x84, 0xc0, 0xfe, 0x0b, 0x4f, 0x01, 0x49, 0x2b, 0x48, 0x96, 0x20, 0x8b, 0xf8, 0x70,
	0xc7, 0x7b, 0x77, 0xef, 0x89, 0xf0, 0x63, 0x75, 0x59, 0x12, 0xee, 0x89, 0x6f, 0x58, 0xa5, 0x94,
	0x15, 0x38, 0x27, 0x6e, 0xc9, 0x68, 0x45, 0x91, 0x2e, 0xa9, 0xd1, 0x20, 0xa2, 0x79, 0x4e, 0x0b,
	0x4f, 0x1d, 0x8a, 0x1b, 0x0d, 0x13, 0x9a, 0x50, 0x59, 0x7a, 0xa2, 0x52, 0xe8, 0xf8, 0x06, 0xc0,
	0xfe, 0xc9, 0xfc, 0x7f, 0xf0, 0x0f, 0xe7, 0x64, 0xb6, 0xca, 0x30, 0x47, 0xbf, 0xa0, 0x1e, 0xa5,
	0x38, 0x2b, 0x0c, 0x60, 0x03, 0xe7, 0x8d, 0xef, 0x1e, 0x6a, 0xeb, 0x53, 0x92, 0x55, 0x2b, 0xbc,
	0x70, 0x23, 0x9a, 0x7b, 0xc2, 0x51, 0xf2, 0xb2, 0x2a, 0x68, 0x4c, 0x1a, 0x9b, 0x9f, 0x02, 0x0d,
	0x94, 0x18, 0xfd, 0x85, 0x5d, 0x1c, 0xc7, 0x8c, 0x70, 0x6e, 0xb4, 0x64, 0x9f, 0x2f, 0x87, 0xda,
	0xfa, 0xfc, 0xa2, 0x3e, 0x33, 0xa5, 0x0b, 0x9a, 0x06, 0xe3, 0xab, 0x16, 0x7c, 0xdd, 0x64, 0x44,
	0x08, 0x76, 0xc4, 0xc0, 0x2a, 0x5d, 0x20, 0x6b, 0xe4, 0xc2, 0x01, 0x59, 0x97, 0x19, 0x23, 0xe1,
	0x62, 0x45, 0xa3, 0x65, 0x98, 0x92, 0x2c, 0x49, 0x2b, 0x69, 0xdc, 0x0e, 0x3e, 0x28, 0xca, 0x17,
	0xcc, 0x5c, 0x12, 0xe8, 0x37, 0xd4, 0xe9, 0x45, 0x41, 0x98, 0xd1, 0xb6, 0x81, 0xf3, 0xd6, 0xff,
	0x7a, 0xa8, 0xad, 0x49, 0x92, 0x55, 0xe9, 0xb9, 0x8a, 0x16, 0x51, 0x9e, 0x53, 0x7e, 0x3c, 0x26,
	0x3c, 0x5e, 0xca, 0x5d, 0x73, 0x77, 0x16, 0x45, 0x4d, 0x36, 0xa5, 0x47, 0x3f, 0xe0, 0xfb, 0x92,
	0x91, 0x33, 0xc2, 0x18, 0x89, 0x43, 0xcc, 0x39, 0xa9, 0x8c, 0x8e, 0x0d, 0x9c, 0xde, 0xb4, 0xef,
	0x36, 0xc3, 0x08, 0xd0, 0xef, 0x6c, 0x6a, 0x4b, 0x0b, 0xde, 0x3d, 0xdc, 0x95, 0x28, 0xfa, 0x0e,
	0xbb, 0x58, 0xac, 0x9c, 0x70, 0x43, 0xb7, 0xdb, 0x4e, 0x6f, 0x3a, 0x74, 0x95, 0xd1, 0x93, 0x1f,
	0x72, 0x14, 0x37, 0x57, 0xfd, 0x3f, 0x9b, 0x9d, 0x09, 0xb6, 0x3b, 0x13, 0xdc, 0xed, 0x4c, 0x70,
	0xbd, 0x37, 0xb5, 0xed, 0xde, 0xd4, 0x6e, 0xf7, 0xa6, 0x76, 0xea, 0x3d, 0xbf, 0xde, 0xf5, 0x63,
	0x50, 0xf8, 0x2c, 0x5e, 0xc9, 0x37, 0xf0, 0xed, 0x3e, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xdf, 0xbd,
	0x72, 0x52, 0x02, 0x00, 0x00,
}

func (m *THORNameAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *THORNameAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *THORNameAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypeThorname(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypeThorname(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *THORName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *THORName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *THORName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Aliases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeThorname(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.PreferredAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeThorname(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypeThorname(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpireBlockHeight != 0 {
		i = encodeVarintTypeThorname(dAtA, i, uint64(m.ExpireBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypeThorname(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeThorname(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeThorname(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *THORNameAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypeThorname(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypeThorname(uint64(l))
	}
	return n
}

func (m *THORName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypeThorname(uint64(l))
	}
	if m.ExpireBlockHeight != 0 {
		n += 1 + sovTypeThorname(uint64(m.ExpireBlockHeight))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypeThorname(uint64(l))
	}
	l = m.PreferredAsset.Size()
	n += 1 + l + sovTypeThorname(uint64(l))
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovTypeThorname(uint64(l))
		}
	}
	return n
}

func sovTypeThorname(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeThorname(x uint64) (n int) {
	return sovTypeThorname(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *THORNameAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeThorname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: THORNameAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: THORNameAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = gitlab_com_thorchain_thornode_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeThorname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *THORName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeThorname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: THORName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: THORName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireBlockHeight", wireType)
			}
			m.ExpireBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreferredAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeThorname
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, THORNameAlias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeThorname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeThorname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeThorname(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeThorname
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeThorname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeThorname
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeThorname
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeThorname
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeThorname        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeThorname          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeThorname = fmt.Errorf("proto: unexpected end of group")
)
