// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_network.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryNetworkRequest struct {
}

func (m *QueryNetworkRequest) Reset()         { *m = QueryNetworkRequest{} }
func (m *QueryNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkRequest) ProtoMessage()    {}
func (*QueryNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb9f8f442a8cc0ad, []int{0}
}
func (m *QueryNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkRequest.Merge(m, src)
}
func (m *QueryNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkRequest proto.InternalMessageInfo

type QueryNetworkResponse struct {
	BondRewardRune        string `protobuf:"bytes,1,opt,name=bond_reward_rune,json=bondRewardRune,proto3" json:"bond_reward_rune,omitempty"`
	TotalBondUnits        string `protobuf:"bytes,2,opt,name=total_bond_units,json=totalBondUnits,proto3" json:"total_bond_units,omitempty"`
	EffectiveSecurityBond string `protobuf:"bytes,3,opt,name=effective_security_bond,json=effectiveSecurityBond,proto3" json:"effective_security_bond,omitempty"`
	TotalReserve          string `protobuf:"bytes,4,opt,name=total_reserve,json=totalReserve,proto3" json:"total_reserve,omitempty"`
	VaultsMigrating       bool   `protobuf:"varint,5,opt,name=vaults_migrating,json=vaultsMigrating,proto3" json:"vaults_migrating,omitempty"`
	GasSpentRune          string `protobuf:"bytes,6,opt,name=gas_spent_rune,json=gasSpentRune,proto3" json:"gas_spent_rune,omitempty"`
	GasWithheldRune       string `protobuf:"bytes,7,opt,name=gas_withheld_rune,json=gasWithheldRune,proto3" json:"gas_withheld_rune,omitempty"`
	OutboundFeeMultiplier string `protobuf:"bytes,8,opt,name=outbound_fee_multiplier,json=outboundFeeMultiplier,proto3" json:"outbound_fee_multiplier,omitempty"`
	NativeOutboundFeeRune string `protobuf:"bytes,9,opt,name=native_outbound_fee_rune,json=nativeOutboundFeeRune,proto3" json:"native_outbound_fee_rune,omitempty"`
	NativeTxFeeRune       string `protobuf:"bytes,10,opt,name=native_tx_fee_rune,json=nativeTxFeeRune,proto3" json:"native_tx_fee_rune,omitempty"`
	TnsRegisterFeeRune    string `protobuf:"bytes,11,opt,name=tns_register_fee_rune,json=tnsRegisterFeeRune,proto3" json:"tns_register_fee_rune,omitempty"`
	TnsFeePerBlockRune    string `protobuf:"bytes,12,opt,name=tns_fee_per_block_rune,json=tnsFeePerBlockRune,proto3" json:"tns_fee_per_block_rune,omitempty"`
	RunePriceInTor        string `protobuf:"bytes,13,opt,name=rune_price_in_tor,json=runePriceInTor,proto3" json:"rune_price_in_tor,omitempty"`
	TorPriceInRune        string `protobuf:"bytes,14,opt,name=tor_price_in_rune,json=torPriceInRune,proto3" json:"tor_price_in_rune,omitempty"`
}

func (m *QueryNetworkResponse) Reset()         { *m = QueryNetworkResponse{} }
func (m *QueryNetworkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkResponse) ProtoMessage()    {}
func (*QueryNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb9f8f442a8cc0ad, []int{1}
}
func (m *QueryNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkResponse.Merge(m, src)
}
func (m *QueryNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkResponse proto.InternalMessageInfo

func (m *QueryNetworkResponse) GetBondRewardRune() string {
	if m != nil {
		return m.BondRewardRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTotalBondUnits() string {
	if m != nil {
		return m.TotalBondUnits
	}
	return ""
}

func (m *QueryNetworkResponse) GetEffectiveSecurityBond() string {
	if m != nil {
		return m.EffectiveSecurityBond
	}
	return ""
}

func (m *QueryNetworkResponse) GetTotalReserve() string {
	if m != nil {
		return m.TotalReserve
	}
	return ""
}

func (m *QueryNetworkResponse) GetVaultsMigrating() bool {
	if m != nil {
		return m.VaultsMigrating
	}
	return false
}

func (m *QueryNetworkResponse) GetGasSpentRune() string {
	if m != nil {
		return m.GasSpentRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetGasWithheldRune() string {
	if m != nil {
		return m.GasWithheldRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetOutboundFeeMultiplier() string {
	if m != nil {
		return m.OutboundFeeMultiplier
	}
	return ""
}

func (m *QueryNetworkResponse) GetNativeOutboundFeeRune() string {
	if m != nil {
		return m.NativeOutboundFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetNativeTxFeeRune() string {
	if m != nil {
		return m.NativeTxFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTnsRegisterFeeRune() string {
	if m != nil {
		return m.TnsRegisterFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTnsFeePerBlockRune() string {
	if m != nil {
		return m.TnsFeePerBlockRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetRunePriceInTor() string {
	if m != nil {
		return m.RunePriceInTor
	}
	return ""
}

func (m *QueryNetworkResponse) GetTorPriceInRune() string {
	if m != nil {
		return m.TorPriceInRune
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryNetworkRequest)(nil), "types.QueryNetworkRequest")
	proto.RegisterType((*QueryNetworkResponse)(nil), "types.QueryNetworkResponse")
}

func init() { proto.RegisterFile("types/query_network.proto", fileDescriptor_eb9f8f442a8cc0ad) }

var fileDescriptor_eb9f8f442a8cc0ad = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x6b, 0xa0, 0xa5, 0x5d, 0xda, 0xb4, 0x35, 0x0d, 0x35, 0x1c, 0xac, 0xaa, 0x70, 0x48,
	0x41, 0x6a, 0x04, 0x48, 0xe5, 0x9e, 0x43, 0xa5, 0x1e, 0x0a, 0xc5, 0x2d, 0x42, 0xe2, 0xb2, 0x72,
	0x9c, 0x89, 0xb3, 0xaa, 0xb3, 0xeb, 0xce, 0x8e, 0xf3, 0xe7, 0x2d, 0x78, 0x03, 0x5e, 0x87, 0x63,
	0x8f, 0x1c, 0x51, 0xf2, 0x22, 0x68, 0x67, 0x9d, 0x84, 0xde, 0xac, 0xef, 0xfb, 0xfd, 0x76, 0x3d,
	0xab, 0x5d, 0xf1, 0x92, 0xa6, 0x25, 0xd8, 0xf6, 0x5d, 0x05, 0x38, 0x95, 0x1a, 0x68, 0x6c, 0xf0,
	0xf6, 0xb4, 0x44, 0x43, 0x26, 0x5c, 0xe7, 0xea, 0xd5, 0x41, 0x6e, 0x72, 0xc3, 0x49, 0xdb, 0x7d,
	0xf9, 0xf2, 0xb8, 0x29, 0x9e, 0x7f, 0x75, 0xce, 0x67, 0xaf, 0x24, 0x70, 0x57, 0x81, 0xa5, 0xe3,
	0x5f, 0xeb, 0xe2, 0xe0, 0x61, 0x6e, 0x4b, 0xa3, 0x2d, 0x84, 0x2d, 0xb1, 0xd7, 0x35, 0xba, 0x27,
	0x11, 0xc6, 0x29, 0xf6, 0x24, 0x56, 0x1a, 0xa2, 0xe0, 0x28, 0x68, 0x6d, 0x25, 0x0d, 0x97, 0x27,
	0x1c, 0x27, 0x95, 0x66, 0x92, 0x0c, 0xa5, 0x85, 0x64, 0xbe, 0xd2, 0x8a, 0x6c, 0xf4, 0xc8, 0x93,
	0x9c, 0x77, 0x8c, 0xee, 0x7d, 0x73, 0x69, 0x78, 0x26, 0x0e, 0xa1, 0xdf, 0x87, 0x8c, 0xd4, 0x08,
	0xa4, 0x85, 0xac, 0x42, 0x45, 0x53, 0xd6, 0xa2, 0xc7, 0x2c, 0x34, 0x97, 0xf5, 0x75, 0xdd, 0x3a,
	0x39, 0x7c, 0x2d, 0x76, 0xfc, 0x0e, 0x08, 0x16, 0x70, 0x04, 0xd1, 0x13, 0xa6, 0xb7, 0x39, 0x4c,
	0x7c, 0x16, 0x9e, 0x88, 0xbd, 0x51, 0x5a, 0x15, 0x64, 0xe5, 0x50, 0xe5, 0x98, 0x92, 0xd2, 0x79,
	0xb4, 0x7e, 0x14, 0xb4, 0x36, 0x93, 0x5d, 0x9f, 0x5f, 0x2e, 0xe2, 0xf0, 0x8d, 0x68, 0xe4, 0xa9,
	0x95, 0xb6, 0x04, 0x4d, 0x7e, 0xb2, 0x0d, 0xbf, 0x60, 0x9e, 0xda, 0x6b, 0x17, 0xf2, 0x5c, 0x6f,
	0xc5, 0xbe, 0xa3, 0xc6, 0x8a, 0x06, 0x03, 0x28, 0xea, 0x23, 0x78, 0xca, 0xe0, 0x6e, 0x9e, 0xda,
	0xef, 0x75, 0xce, 0xec, 0x99, 0x38, 0x34, 0x15, 0x75, 0x4d, 0xa5, 0x7b, 0xb2, 0x0f, 0x20, 0x87,
	0x55, 0x41, 0xaa, 0x2c, 0x14, 0x60, 0xb4, 0xe9, 0x27, 0x5b, 0xd4, 0xe7, 0x00, 0x97, 0xcb, 0x32,
	0xfc, 0x24, 0x22, 0x9d, 0xf2, 0x71, 0x3c, 0xd0, 0x79, 0xab, 0x2d, 0x2f, 0xfa, 0xfe, 0xcb, 0x4a,
	0xe7, 0x0d, 0xdf, 0x89, 0xb0, 0x16, 0x69, 0xb2, 0x52, 0x84, 0xff, 0x3b, 0xdf, 0xdc, 0x4c, 0x16,
	0xf0, 0x7b, 0xd1, 0x24, 0x6d, 0x25, 0x42, 0xae, 0x2c, 0x01, 0xae, 0xf8, 0x67, 0xcc, 0x87, 0xa4,
	0x6d, 0x52, 0x77, 0x0b, 0xe5, 0x83, 0x78, 0xe1, 0x14, 0x47, 0x96, 0x80, 0xb2, 0x5b, 0x98, 0xec,
	0xd6, 0x3b, 0xdb, 0x4b, 0xe7, 0x1c, 0xe0, 0x0a, 0xb0, 0xe3, 0x2a, 0x76, 0x4e, 0xc4, 0xbe, 0x23,
	0x64, 0x89, 0x2a, 0x03, 0xa9, 0xb4, 0x24, 0x83, 0xd1, 0x8e, 0xbf, 0x09, 0xae, 0xb8, 0x72, 0xf9,
	0x85, 0xbe, 0x31, 0xe8, 0x50, 0x32, 0xb8, 0x22, 0x79, 0xe5, 0xc6, 0xe2, 0xd2, 0x60, 0x4d, 0xba,
	0x55, 0x3b, 0x17, 0xbf, 0x67, 0x71, 0x70, 0x3f, 0x8b, 0x83, 0xbf, 0xb3, 0x38, 0xf8, 0x39, 0x8f,
	0xd7, 0xee, 0xe7, 0xf1, 0xda, 0x9f, 0x79, 0xbc, 0xf6, 0xa3, 0x9d, 0x2b, 0x2a, 0xd2, 0xee, 0x69,
	0x66, 0x86, 0x6d, 0x1a, 0x18, 0xcc, 0x06, 0xa9, 0xd2, 0xfc, 0xa5, 0x4d, 0x0f, 0xda, 0x93, 0xff,
	0x43, 0xf7, 0x32, 0xba, 0x1b, 0xfc, 0x14, 0x3e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x33, 0x54,
	0xb5, 0x73, 0x44, 0x03, 0x00, 0x00,
}

func (m *QueryNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TorPriceInRune) > 0 {
		i -= len(m.TorPriceInRune)
		copy(dAtA[i:], m.TorPriceInRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TorPriceInRune)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RunePriceInTor) > 0 {
		i -= len(m.RunePriceInTor)
		copy(dAtA[i:], m.RunePriceInTor)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.RunePriceInTor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TnsFeePerBlockRune) > 0 {
		i -= len(m.TnsFeePerBlockRune)
		copy(dAtA[i:], m.TnsFeePerBlockRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TnsFeePerBlockRune)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TnsRegisterFeeRune) > 0 {
		i -= len(m.TnsRegisterFeeRune)
		copy(dAtA[i:], m.TnsRegisterFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TnsRegisterFeeRune)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NativeTxFeeRune) > 0 {
		i -= len(m.NativeTxFeeRune)
		copy(dAtA[i:], m.NativeTxFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.NativeTxFeeRune)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NativeOutboundFeeRune) > 0 {
		i -= len(m.NativeOutboundFeeRune)
		copy(dAtA[i:], m.NativeOutboundFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.NativeOutboundFeeRune)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OutboundFeeMultiplier) > 0 {
		i -= len(m.OutboundFeeMultiplier)
		copy(dAtA[i:], m.OutboundFeeMultiplier)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.OutboundFeeMultiplier)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GasWithheldRune) > 0 {
		i -= len(m.GasWithheldRune)
		copy(dAtA[i:], m.GasWithheldRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.GasWithheldRune)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GasSpentRune) > 0 {
		i -= len(m.GasSpentRune)
		copy(dAtA[i:], m.GasSpentRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.GasSpentRune)))
		i--
		dAtA[i] = 0x32
	}
	if m.VaultsMigrating {
		i--
		if m.VaultsMigrating {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TotalReserve) > 0 {
		i -= len(m.TotalReserve)
		copy(dAtA[i:], m.TotalReserve)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TotalReserve)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EffectiveSecurityBond) > 0 {
		i -= len(m.EffectiveSecurityBond)
		copy(dAtA[i:], m.EffectiveSecurityBond)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.EffectiveSecurityBond)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalBondUnits) > 0 {
		i -= len(m.TotalBondUnits)
		copy(dAtA[i:], m.TotalBondUnits)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TotalBondUnits)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondRewardRune) > 0 {
		i -= len(m.BondRewardRune)
		copy(dAtA[i:], m.BondRewardRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.BondRewardRune)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondRewardRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TotalBondUnits)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.EffectiveSecurityBond)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TotalReserve)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	if m.VaultsMigrating {
		n += 2
	}
	l = len(m.GasSpentRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.GasWithheldRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.OutboundFeeMultiplier)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.NativeOutboundFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.NativeTxFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TnsRegisterFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TnsFeePerBlockRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.RunePriceInTor)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TorPriceInRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	return n
}

func sovQueryNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryNetwork(x uint64) (n int) {
	return sovQueryNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRewardRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondRewardRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBondUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveSecurityBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveSecurityBond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsMigrating", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VaultsMigrating = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasSpentRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasSpentRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWithheldRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasWithheldRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFeeMultiplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeOutboundFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeOutboundFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTxFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeTxFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnsRegisterFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TnsRegisterFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnsFeePerBlockRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TnsFeePerBlockRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunePriceInTor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunePriceInTor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TorPriceInRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TorPriceInRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryNetwork = fmt.Errorf("proto: unexpected end of group")
)
