// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_node.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryNodeRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryNodeRequest) Reset()         { *m = QueryNodeRequest{} }
func (m *QueryNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNodeRequest) ProtoMessage()    {}
func (*QueryNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{0}
}
func (m *QueryNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeRequest.Merge(m, src)
}
func (m *QueryNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeRequest proto.InternalMessageInfo

func (m *QueryNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// TODO: update with comments and nullables
type QueryNodeResponse struct {
	NodeAddress         string               `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	Status              string               `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	PubKeySet           common.PubKeySet     `protobuf:"bytes,3,opt,name=pub_key_set,json=pubKeySet,proto3" json:"pub_key_set"`
	ValidatorConsPubKey string               `protobuf:"bytes,4,opt,name=validator_cons_pub_key,json=validatorConsPubKey,proto3" json:"validator_cons_pub_key,omitempty"`
	PeerId              string               `protobuf:"bytes,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ActiveBlockHeight   int64                `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
	StatusSince         int64                `protobuf:"varint,7,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty"`
	NodeOperatorAddress string               `protobuf:"bytes,8,opt,name=node_operator_address,json=nodeOperatorAddress,proto3" json:"node_operator_address,omitempty"`
	TotalBond           string               `protobuf:"bytes,9,opt,name=total_bond,json=totalBond,proto3" json:"total_bond,omitempty"`
	BondProviders       *NodeBondProviders   `protobuf:"bytes,10,opt,name=bond_providers,json=bondProviders,proto3" json:"bond_providers,omitempty"`
	SignerMembership    []string             `protobuf:"bytes,11,rep,name=signer_membership,json=signerMembership,proto3" json:"signer_membership,omitempty"`
	RequestedToLeave    bool                 `protobuf:"varint,12,opt,name=requested_to_leave,json=requestedToLeave,proto3" json:"requested_to_leave,omitempty"`
	ForcedToLeave       bool                 `protobuf:"varint,13,opt,name=forced_to_leave,json=forcedToLeave,proto3" json:"forced_to_leave,omitempty"`
	LeaveHeight         int64                `protobuf:"varint,14,opt,name=leave_height,json=leaveHeight,proto3" json:"leave_height,omitempty"`
	IpAddress           string               `protobuf:"bytes,15,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Version             string               `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	SlashPoints         int64                `protobuf:"varint,17,opt,name=slash_points,json=slashPoints,proto3" json:"slash_points,omitempty"`
	Jail                *NodeJail            `protobuf:"bytes,18,opt,name=jail,proto3" json:"jail,omitempty"`
	CurrentAward        string               `protobuf:"bytes,19,opt,name=current_award,json=currentAward,proto3" json:"current_award,omitempty"`
	ObserveChains       []*ChainHeight       `protobuf:"bytes,20,rep,name=observe_chains,json=observeChains,proto3" json:"observe_chains,omitempty"`
	PreflightStatus     *NodePreflightStatus `protobuf:"bytes,21,opt,name=preflight_status,json=preflightStatus,proto3" json:"preflight_status,omitempty"`
}

func (m *QueryNodeResponse) Reset()         { *m = QueryNodeResponse{} }
func (m *QueryNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNodeResponse) ProtoMessage()    {}
func (*QueryNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{1}
}
func (m *QueryNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeResponse.Merge(m, src)
}
func (m *QueryNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeResponse proto.InternalMessageInfo

func (m *QueryNodeResponse) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

func (m *QueryNodeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryNodeResponse) GetPubKeySet() common.PubKeySet {
	if m != nil {
		return m.PubKeySet
	}
	return common.PubKeySet{}
}

func (m *QueryNodeResponse) GetValidatorConsPubKey() string {
	if m != nil {
		return m.ValidatorConsPubKey
	}
	return ""
}

func (m *QueryNodeResponse) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *QueryNodeResponse) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

func (m *QueryNodeResponse) GetStatusSince() int64 {
	if m != nil {
		return m.StatusSince
	}
	return 0
}

func (m *QueryNodeResponse) GetNodeOperatorAddress() string {
	if m != nil {
		return m.NodeOperatorAddress
	}
	return ""
}

func (m *QueryNodeResponse) GetTotalBond() string {
	if m != nil {
		return m.TotalBond
	}
	return ""
}

func (m *QueryNodeResponse) GetBondProviders() *NodeBondProviders {
	if m != nil {
		return m.BondProviders
	}
	return nil
}

func (m *QueryNodeResponse) GetSignerMembership() []string {
	if m != nil {
		return m.SignerMembership
	}
	return nil
}

func (m *QueryNodeResponse) GetRequestedToLeave() bool {
	if m != nil {
		return m.RequestedToLeave
	}
	return false
}

func (m *QueryNodeResponse) GetForcedToLeave() bool {
	if m != nil {
		return m.ForcedToLeave
	}
	return false
}

func (m *QueryNodeResponse) GetLeaveHeight() int64 {
	if m != nil {
		return m.LeaveHeight
	}
	return 0
}

func (m *QueryNodeResponse) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *QueryNodeResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *QueryNodeResponse) GetSlashPoints() int64 {
	if m != nil {
		return m.SlashPoints
	}
	return 0
}

func (m *QueryNodeResponse) GetJail() *NodeJail {
	if m != nil {
		return m.Jail
	}
	return nil
}

func (m *QueryNodeResponse) GetCurrentAward() string {
	if m != nil {
		return m.CurrentAward
	}
	return ""
}

func (m *QueryNodeResponse) GetObserveChains() []*ChainHeight {
	if m != nil {
		return m.ObserveChains
	}
	return nil
}

func (m *QueryNodeResponse) GetPreflightStatus() *NodePreflightStatus {
	if m != nil {
		return m.PreflightStatus
	}
	return nil
}

type QueryNodesRequest struct {
}

func (m *QueryNodesRequest) Reset()         { *m = QueryNodesRequest{} }
func (m *QueryNodesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNodesRequest) ProtoMessage()    {}
func (*QueryNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{2}
}
func (m *QueryNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodesRequest.Merge(m, src)
}
func (m *QueryNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodesRequest proto.InternalMessageInfo

// Update with pagination?
type QueryNodesResponse struct {
	Nodes []*QueryNodeResponse `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *QueryNodesResponse) Reset()         { *m = QueryNodesResponse{} }
func (m *QueryNodesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNodesResponse) ProtoMessage()    {}
func (*QueryNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{3}
}
func (m *QueryNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodesResponse.Merge(m, src)
}
func (m *QueryNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodesResponse proto.InternalMessageInfo

func (m *QueryNodesResponse) GetNodes() []*QueryNodeResponse {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeBondProviders struct {
	NodeOperatorFee string              `protobuf:"bytes,1,opt,name=node_operator_fee,json=nodeOperatorFee,proto3" json:"node_operator_fee,omitempty"`
	Providers       []*NodeBondProvider `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *NodeBondProviders) Reset()         { *m = NodeBondProviders{} }
func (m *NodeBondProviders) String() string { return proto.CompactTextString(m) }
func (*NodeBondProviders) ProtoMessage()    {}
func (*NodeBondProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{4}
}
func (m *NodeBondProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeBondProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeBondProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeBondProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeBondProviders.Merge(m, src)
}
func (m *NodeBondProviders) XXX_Size() int {
	return m.Size()
}
func (m *NodeBondProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeBondProviders.DiscardUnknown(m)
}

var xxx_messageInfo_NodeBondProviders proto.InternalMessageInfo

func (m *NodeBondProviders) GetNodeOperatorFee() string {
	if m != nil {
		return m.NodeOperatorFee
	}
	return ""
}

func (m *NodeBondProviders) GetProviders() []*NodeBondProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

type NodeBondProvider struct {
	BondAddress string `protobuf:"bytes,1,opt,name=bond_address,json=bondAddress,proto3" json:"bond_address,omitempty"`
	Bond        string `protobuf:"bytes,2,opt,name=bond,proto3" json:"bond,omitempty"`
}

func (m *NodeBondProvider) Reset()         { *m = NodeBondProvider{} }
func (m *NodeBondProvider) String() string { return proto.CompactTextString(m) }
func (*NodeBondProvider) ProtoMessage()    {}
func (*NodeBondProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{5}
}
func (m *NodeBondProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeBondProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeBondProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeBondProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeBondProvider.Merge(m, src)
}
func (m *NodeBondProvider) XXX_Size() int {
	return m.Size()
}
func (m *NodeBondProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeBondProvider.DiscardUnknown(m)
}

var xxx_messageInfo_NodeBondProvider proto.InternalMessageInfo

func (m *NodeBondProvider) GetBondAddress() string {
	if m != nil {
		return m.BondAddress
	}
	return ""
}

func (m *NodeBondProvider) GetBond() string {
	if m != nil {
		return m.Bond
	}
	return ""
}

type NodeJail struct {
	ReleaseHeight int64  `protobuf:"varint,1,opt,name=release_height,json=releaseHeight,proto3" json:"release_height,omitempty"`
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *NodeJail) Reset()         { *m = NodeJail{} }
func (m *NodeJail) String() string { return proto.CompactTextString(m) }
func (*NodeJail) ProtoMessage()    {}
func (*NodeJail) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{6}
}
func (m *NodeJail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeJail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeJail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeJail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeJail.Merge(m, src)
}
func (m *NodeJail) XXX_Size() int {
	return m.Size()
}
func (m *NodeJail) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeJail.DiscardUnknown(m)
}

var xxx_messageInfo_NodeJail proto.InternalMessageInfo

func (m *NodeJail) GetReleaseHeight() int64 {
	if m != nil {
		return m.ReleaseHeight
	}
	return 0
}

func (m *NodeJail) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ChainHeight struct {
	Chain  string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ChainHeight) Reset()         { *m = ChainHeight{} }
func (m *ChainHeight) String() string { return proto.CompactTextString(m) }
func (*ChainHeight) ProtoMessage()    {}
func (*ChainHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{7}
}
func (m *ChainHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainHeight.Merge(m, src)
}
func (m *ChainHeight) XXX_Size() int {
	return m.Size()
}
func (m *ChainHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainHeight.DiscardUnknown(m)
}

var xxx_messageInfo_ChainHeight proto.InternalMessageInfo

func (m *ChainHeight) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ChainHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type NodePreflightStatus struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Code   int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *NodePreflightStatus) Reset()         { *m = NodePreflightStatus{} }
func (m *NodePreflightStatus) String() string { return proto.CompactTextString(m) }
func (*NodePreflightStatus) ProtoMessage()    {}
func (*NodePreflightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5f5713cfe920f4, []int{8}
}
func (m *NodePreflightStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePreflightStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePreflightStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodePreflightStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePreflightStatus.Merge(m, src)
}
func (m *NodePreflightStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodePreflightStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePreflightStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodePreflightStatus proto.InternalMessageInfo

func (m *NodePreflightStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodePreflightStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *NodePreflightStatus) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryNodeRequest)(nil), "types.QueryNodeRequest")
	proto.RegisterType((*QueryNodeResponse)(nil), "types.QueryNodeResponse")
	proto.RegisterType((*QueryNodesRequest)(nil), "types.QueryNodesRequest")
	proto.RegisterType((*QueryNodesResponse)(nil), "types.QueryNodesResponse")
	proto.RegisterType((*NodeBondProviders)(nil), "types.NodeBondProviders")
	proto.RegisterType((*NodeBondProvider)(nil), "types.NodeBondProvider")
	proto.RegisterType((*NodeJail)(nil), "types.NodeJail")
	proto.RegisterType((*ChainHeight)(nil), "types.ChainHeight")
	proto.RegisterType((*NodePreflightStatus)(nil), "types.NodePreflightStatus")
}

func init() { proto.RegisterFile("types/query_node.proto", fileDescriptor_aa5f5713cfe920f4) }

var fileDescriptor_aa5f5713cfe920f4 = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xf6, 0x5a, 0xfe, 0xd3, 0xc8, 0xb2, 0x24, 0xca, 0x71, 0x08, 0x03, 0x51, 0x95, 0x0d, 0x5a,
	0x08, 0x6d, 0x20, 0x01, 0x0e, 0x8a, 0xa2, 0xe8, 0xa1, 0x88, 0xd3, 0x16, 0x75, 0x7f, 0xdd, 0x75,
	0x2f, 0xed, 0x85, 0xd8, 0x9f, 0xb1, 0xb4, 0xcd, 0x7a, 0xb9, 0x21, 0x29, 0xb5, 0x7e, 0x85, 0x9e,
	0xfa, 0x58, 0x39, 0xe6, 0xd8, 0x53, 0x51, 0xd8, 0x2f, 0x52, 0x70, 0xc8, 0x55, 0xd6, 0x49, 0x73,
	0x12, 0xe7, 0xfb, 0x66, 0x87, 0xc3, 0x99, 0x6f, 0x46, 0x70, 0x64, 0xae, 0x2b, 0xd4, 0xb3, 0x17,
	0x4b, 0x54, 0xd7, 0xa2, 0x94, 0x19, 0x4e, 0x2b, 0x25, 0x8d, 0x64, 0xdb, 0x84, 0x1f, 0x1f, 0xce,
	0xe5, 0x5c, 0x12, 0x32, 0xb3, 0x27, 0x47, 0x1e, 0x0f, 0x53, 0x79, 0x75, 0x25, 0xcb, 0x99, 0xfb,
	0x71, 0x60, 0xf8, 0x18, 0xfa, 0x3f, 0xd9, 0x28, 0x3f, 0xc8, 0x0c, 0x23, 0x7c, 0xb1, 0x44, 0x6d,
	0x18, 0x87, 0xdd, 0x38, 0xcb, 0x14, 0x6a, 0xcd, 0x83, 0x71, 0x30, 0x69, 0x47, 0xb5, 0x19, 0xfe,
	0xb9, 0x0b, 0x83, 0x86, 0xbb, 0xae, 0x64, 0xa9, 0x91, 0x3d, 0x84, 0x7d, 0x9b, 0x83, 0xb8, 0xfb,
	0x51, 0xc7, 0x62, 0x4f, 0x1d, 0xc4, 0x8e, 0x60, 0x47, 0x9b, 0xd8, 0x2c, 0x35, 0xdf, 0x24, 0xd2,
	0x5b, 0xec, 0x13, 0xe8, 0x54, 0xcb, 0x44, 0x3c, 0xc7, 0x6b, 0xa1, 0xd1, 0xf0, 0xd6, 0x38, 0x98,
	0x74, 0x4e, 0x06, 0x53, 0x9f, 0xe2, 0xf9, 0x32, 0xf9, 0x16, 0xaf, 0x2f, 0xd0, 0x9c, 0x6e, 0xbd,
	0xfc, 0xe7, 0xbd, 0x8d, 0xa8, 0x5d, 0xd5, 0x00, 0x7b, 0x02, 0x47, 0xab, 0xb8, 0xc8, 0xb3, 0xd8,
	0x48, 0x25, 0x52, 0x59, 0x6a, 0xe1, 0xe3, 0xf0, 0x2d, 0xba, 0x60, 0xb8, 0x66, 0x9f, 0xc9, 0x52,
	0xbb, 0x40, 0xec, 0x3e, 0xec, 0x56, 0x88, 0x4a, 0xe4, 0x19, 0xdf, 0x76, 0x69, 0x58, 0xf3, 0x2c,
	0x63, 0x53, 0x18, 0xc6, 0xa9, 0xc9, 0x57, 0x28, 0x92, 0x42, 0xa6, 0xcf, 0xc5, 0x02, 0xf3, 0xf9,
	0xc2, 0xf0, 0x9d, 0x71, 0x30, 0x69, 0x45, 0x03, 0x47, 0x9d, 0x5a, 0xe6, 0x6b, 0x22, 0xec, 0x8b,
	0xdd, 0x03, 0x84, 0xce, 0xcb, 0x14, 0xf9, 0x2e, 0x39, 0x76, 0x1c, 0x76, 0x61, 0x21, 0x76, 0x02,
	0xf7, 0xa8, 0x28, 0xb2, 0x42, 0x45, 0x49, 0xd6, 0xd5, 0xd9, 0x73, 0xf9, 0x59, 0xf2, 0x47, 0xcf,
	0xd5, 0x55, 0x7a, 0x00, 0x60, 0xa4, 0x89, 0x0b, 0x91, 0xc8, 0x32, 0xe3, 0x6d, 0x72, 0x6c, 0x13,
	0x72, 0x2a, 0xcb, 0x8c, 0x7d, 0x0e, 0x07, 0x96, 0x10, 0x95, 0x92, 0xab, 0x3c, 0x43, 0xa5, 0x39,
	0x50, 0xbd, 0xf8, 0x94, 0xda, 0x3e, 0xb5, 0x4d, 0xb1, 0x8e, 0xe7, 0x35, 0x1f, 0x75, 0x93, 0xa6,
	0xc9, 0x3e, 0x82, 0x81, 0xce, 0xe7, 0x25, 0x2a, 0x71, 0x85, 0x57, 0x09, 0x2a, 0xbd, 0xc8, 0x2b,
	0xde, 0x19, 0xb7, 0x26, 0xed, 0xa8, 0xef, 0x88, 0xef, 0xd7, 0x38, 0x7b, 0x0c, 0x4c, 0x39, 0x41,
	0x60, 0x26, 0x8c, 0x14, 0x05, 0xc6, 0x2b, 0xe4, 0xfb, 0xe3, 0x60, 0xb2, 0x17, 0xf5, 0xd7, 0xcc,
	0xcf, 0xf2, 0x3b, 0x8b, 0xb3, 0x0f, 0xa0, 0x77, 0x29, 0x55, 0xda, 0x74, 0xed, 0x92, 0x6b, 0xd7,
	0xc1, 0xb5, 0xdf, 0x43, 0xd8, 0x27, 0xb6, 0x2e, 0xf1, 0x81, 0xab, 0x1c, 0x61, 0xbe, 0xb8, 0x0f,
	0x00, 0xf2, 0x6a, 0x5d, 0xae, 0x9e, 0xab, 0x42, 0x5e, 0xd5, 0x45, 0xe2, 0xb0, 0xbb, 0x42, 0xa5,
	0x73, 0x59, 0xf2, 0xbe, 0x53, 0xa7, 0x37, 0xa9, 0x2b, 0x45, 0xac, 0x17, 0xa2, 0x92, 0x79, 0x69,
	0x34, 0x1f, 0xf8, 0xae, 0x58, 0xec, 0x9c, 0x20, 0xf6, 0x08, 0xb6, 0x7e, 0x8b, 0xf3, 0x82, 0x33,
	0x2a, 0x5c, 0xaf, 0x51, 0xb8, 0x6f, 0xe2, 0xbc, 0x88, 0x88, 0x64, 0x8f, 0xa0, 0x9b, 0x2e, 0x95,
	0xc2, 0xd2, 0x88, 0xf8, 0xf7, 0x58, 0x65, 0x7c, 0x48, 0xf7, 0xec, 0x7b, 0xf0, 0xa9, 0xc5, 0xd8,
	0xa7, 0x70, 0x20, 0x13, 0x8d, 0x6a, 0x85, 0x22, 0x5d, 0xc4, 0x79, 0xa9, 0xf9, 0xe1, 0xb8, 0x35,
	0xe9, 0x9c, 0x30, 0x1f, 0xf3, 0x99, 0x05, 0xdd, 0x8b, 0xa2, 0xae, 0xf7, 0x24, 0x4c, 0xb3, 0x2f,
	0xa1, 0x5f, 0x29, 0xbc, 0x2c, 0x2c, 0x27, 0xfc, 0x58, 0xdc, 0xa3, 0x84, 0x8e, 0x1b, 0x09, 0x9d,
	0xd7, 0x2e, 0x17, 0xe4, 0x11, 0xf5, 0xaa, 0xbb, 0x40, 0x38, 0x6c, 0xcc, 0xa2, 0xf6, 0xb3, 0x1b,
	0x7e, 0x01, 0xac, 0x09, 0xfa, 0x09, 0x9d, 0xc2, 0xb6, 0xd5, 0x9b, 0x1d, 0xcd, 0x56, 0x43, 0x30,
	0x6f, 0x8d, 0x72, 0xe4, 0xdc, 0xc2, 0x15, 0x0c, 0xde, 0x12, 0x13, 0xfb, 0x10, 0x06, 0x77, 0x15,
	0x7d, 0x89, 0xe8, 0x67, 0xbd, 0xd7, 0x54, 0xf3, 0x57, 0x88, 0xec, 0x63, 0x68, 0xbf, 0x56, 0xe9,
	0x26, 0x5d, 0x7a, 0xff, 0x1d, 0x2a, 0x8d, 0x5e, 0x7b, 0x86, 0x67, 0xd0, 0x7f, 0x93, 0xb6, 0x5d,
	0x25, 0xd5, 0xbf, 0xb1, 0x5d, 0x2c, 0x56, 0x4b, 0x82, 0xc1, 0x16, 0x4d, 0x8c, 0xdb, 0x2d, 0x74,
	0x0e, 0xcf, 0x60, 0xaf, 0x6e, 0x2b, 0x7b, 0x1f, 0x0e, 0x14, 0x16, 0x18, 0xeb, 0xb5, 0xec, 0x02,
	0x92, 0x46, 0xd7, 0xa3, 0x5e, 0x78, 0x47, 0xb0, 0xa3, 0x30, 0xd6, 0xb2, 0xac, 0x97, 0x94, 0xb3,
	0xc2, 0xcf, 0xa0, 0xd3, 0xe8, 0x26, 0x3b, 0x84, 0x6d, 0xea, 0xb8, 0xcf, 0xc4, 0x19, 0xf6, 0x63,
	0x1f, 0x7b, 0x93, 0x62, 0x7b, 0x2b, 0xfc, 0x05, 0x86, 0xff, 0xd3, 0xcd, 0xc6, 0x42, 0x0c, 0xee,
	0x2c, 0xc4, 0x77, 0xe4, 0x60, 0x9f, 0x98, 0xca, 0x0c, 0x69, 0x43, 0xb6, 0x22, 0x3a, 0x9f, 0x9e,
	0xbd, 0xbc, 0x19, 0x05, 0xaf, 0x6e, 0x46, 0xc1, 0xbf, 0x37, 0xa3, 0xe0, 0xaf, 0xdb, 0xd1, 0xc6,
	0xab, 0xdb, 0xd1, 0xc6, 0xdf, 0xb7, 0xa3, 0x8d, 0x5f, 0x67, 0xf3, 0xdc, 0x14, 0x71, 0x62, 0xf7,
	0xe8, 0xcc, 0x2c, 0xa4, 0xa2, 0x14, 0xe9, 0x64, 0x1b, 0x35, 0xfb, 0xa3, 0x09, 0xda, 0xa6, 0x24,
	0x3b, 0xf4, 0x6f, 0xf0, 0xe4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0x6b, 0x61, 0x62, 0x59,
	0x06, 0x00, 0x00,
}

func (m *QueryNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreflightStatus != nil {
		{
			size, err := m.PreflightStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ObserveChains) > 0 {
		for iNdEx := len(m.ObserveChains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObserveChains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.CurrentAward) > 0 {
		i -= len(m.CurrentAward)
		copy(dAtA[i:], m.CurrentAward)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.CurrentAward)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Jail != nil {
		{
			size, err := m.Jail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SlashPoints != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.SlashPoints))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if m.LeaveHeight != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.LeaveHeight))
		i--
		dAtA[i] = 0x70
	}
	if m.ForcedToLeave {
		i--
		if m.ForcedToLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.RequestedToLeave {
		i--
		if m.RequestedToLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.SignerMembership) > 0 {
		for iNdEx := len(m.SignerMembership) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SignerMembership[iNdEx])
			copy(dAtA[i:], m.SignerMembership[iNdEx])
			i = encodeVarintQueryNode(dAtA, i, uint64(len(m.SignerMembership[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.BondProviders != nil {
		{
			size, err := m.BondProviders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.TotalBond) > 0 {
		i -= len(m.TotalBond)
		copy(dAtA[i:], m.TotalBond)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.TotalBond)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NodeOperatorAddress) > 0 {
		i -= len(m.NodeOperatorAddress)
		copy(dAtA[i:], m.NodeOperatorAddress)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.NodeOperatorAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.StatusSince != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.StatusSince))
		i--
		dAtA[i] = 0x38
	}
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorConsPubKey) > 0 {
		i -= len(m.ValidatorConsPubKey)
		copy(dAtA[i:], m.ValidatorConsPubKey)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.ValidatorConsPubKey)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.PubKeySet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeBondProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeBondProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeBondProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeOperatorFee) > 0 {
		i -= len(m.NodeOperatorFee)
		copy(dAtA[i:], m.NodeOperatorFee)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.NodeOperatorFee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeBondProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeBondProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeBondProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bond) > 0 {
		i -= len(m.Bond)
		copy(dAtA[i:], m.Bond)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Bond)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondAddress) > 0 {
		i -= len(m.BondAddress)
		copy(dAtA[i:], m.BondAddress)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.BondAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeJail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeJail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeJail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReleaseHeight != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.ReleaseHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodePreflightStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePreflightStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePreflightStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintQueryNode(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQueryNode(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	return n
}

func (m *QueryNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = m.PubKeySet.Size()
	n += 1 + l + sovQueryNode(uint64(l))
	l = len(m.ValidatorConsPubKey)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovQueryNode(uint64(m.ActiveBlockHeight))
	}
	if m.StatusSince != 0 {
		n += 1 + sovQueryNode(uint64(m.StatusSince))
	}
	l = len(m.NodeOperatorAddress)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.TotalBond)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if m.BondProviders != nil {
		l = m.BondProviders.Size()
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if len(m.SignerMembership) > 0 {
		for _, s := range m.SignerMembership {
			l = len(s)
			n += 1 + l + sovQueryNode(uint64(l))
		}
	}
	if m.RequestedToLeave {
		n += 2
	}
	if m.ForcedToLeave {
		n += 2
	}
	if m.LeaveHeight != 0 {
		n += 1 + sovQueryNode(uint64(m.LeaveHeight))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovQueryNode(uint64(l))
	}
	if m.SlashPoints != 0 {
		n += 2 + sovQueryNode(uint64(m.SlashPoints))
	}
	if m.Jail != nil {
		l = m.Jail.Size()
		n += 2 + l + sovQueryNode(uint64(l))
	}
	l = len(m.CurrentAward)
	if l > 0 {
		n += 2 + l + sovQueryNode(uint64(l))
	}
	if len(m.ObserveChains) > 0 {
		for _, e := range m.ObserveChains {
			l = e.Size()
			n += 2 + l + sovQueryNode(uint64(l))
		}
	}
	if m.PreflightStatus != nil {
		l = m.PreflightStatus.Size()
		n += 2 + l + sovQueryNode(uint64(l))
	}
	return n
}

func (m *QueryNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovQueryNode(uint64(l))
		}
	}
	return n
}

func (m *NodeBondProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeOperatorFee)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQueryNode(uint64(l))
		}
	}
	return n
}

func (m *NodeBondProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondAddress)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.Bond)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	return n
}

func (m *NodeJail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseHeight != 0 {
		n += 1 + sovQueryNode(uint64(m.ReleaseHeight))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	return n
}

func (m *ChainHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQueryNode(uint64(m.Height))
	}
	return n
}

func (m *NodePreflightStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovQueryNode(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovQueryNode(uint64(m.Code))
	}
	return n
}

func sovQueryNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryNode(x uint64) (n int) {
	return sovQueryNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKeySet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorConsPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorConsPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSince", wireType)
			}
			m.StatusSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusSince |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BondProviders == nil {
				m.BondProviders = &NodeBondProviders{}
			}
			if err := m.BondProviders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerMembership", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerMembership = append(m.SignerMembership, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedToLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestedToLeave = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcedToLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcedToLeave = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveHeight", wireType)
			}
			m.LeaveHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashPoints", wireType)
			}
			m.SlashPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashPoints |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jail == nil {
				m.Jail = &NodeJail{}
			}
			if err := m.Jail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentAward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserveChains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserveChains = append(m.ObserveChains, &ChainHeight{})
			if err := m.ObserveChains[len(m.ObserveChains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreflightStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreflightStatus == nil {
				m.PreflightStatus = &NodePreflightStatus{}
			}
			if err := m.PreflightStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &QueryNodeResponse{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeBondProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeBondProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeBondProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOperatorFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeOperatorFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &NodeBondProvider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeBondProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeBondProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeBondProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeJail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeJail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeJail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseHeight", wireType)
			}
			m.ReleaseHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePreflightStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePreflightStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePreflightStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryNode = fmt.Errorf("proto: unexpected end of group")
)
