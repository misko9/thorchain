// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_keygen.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeygenType int32

const (
	KeygenType_UnknownKeygen KeygenType = 0
	KeygenType_AsgardKeygen  KeygenType = 1
)

var KeygenType_name = map[int32]string{
	0: "UnknownKeygen",
	1: "AsgardKeygen",
}

var KeygenType_value = map[string]int32{
	"UnknownKeygen": 0,
	"AsgardKeygen":  1,
}

func (x KeygenType) String() string {
	return proto.EnumName(KeygenType_name, int32(x))
}

func (KeygenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32c2c7fafe5b6426, []int{0}
}

type Keygen struct {
	ID      gitlab_com_thorchain_thornode_common.TxID `protobuf:"bytes,1,opt,name=id,proto3,casttype=gitlab.com/thorchain/thornode/common.TxID" json:"id,omitempty"`
	Type    KeygenType                                `protobuf:"varint,2,opt,name=type,proto3,enum=types.KeygenType" json:"type,omitempty"`
	Members []string                                  `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *Keygen) Reset()      { *m = Keygen{} }
func (*Keygen) ProtoMessage() {}
func (*Keygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_32c2c7fafe5b6426, []int{0}
}
func (m *Keygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen.Merge(m, src)
}
func (m *Keygen) XXX_Size() int {
	return m.Size()
}
func (m *Keygen) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen proto.InternalMessageInfo

type KeygenBlock struct {
	Height  int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Keygens []Keygen `protobuf:"bytes,4,rep,name=keygens,proto3" json:"keygens"`
}

func (m *KeygenBlock) Reset()      { *m = KeygenBlock{} }
func (*KeygenBlock) ProtoMessage() {}
func (*KeygenBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_32c2c7fafe5b6426, []int{1}
}
func (m *KeygenBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenBlock.Merge(m, src)
}
func (m *KeygenBlock) XXX_Size() int {
	return m.Size()
}
func (m *KeygenBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenBlock.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenBlock proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.KeygenType", KeygenType_name, KeygenType_value)
	proto.RegisterType((*Keygen)(nil), "types.Keygen")
	proto.RegisterType((*KeygenBlock)(nil), "types.KeygenBlock")
}

func init() { proto.RegisterFile("types/type_keygen.proto", fileDescriptor_32c2c7fafe5b6426) }

var fileDescriptor_32c2c7fafe5b6426 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4e, 0xc2, 0x40,
	0x14, 0x45, 0x67, 0x5a, 0x84, 0xf0, 0x10, 0x03, 0x13, 0xa3, 0x8d, 0x8b, 0xa1, 0x21, 0x31, 0xa9,
	0x26, 0xb6, 0x11, 0xbe, 0xc0, 0xca, 0x86, 0xb8, 0x6b, 0x60, 0xe3, 0xc6, 0x40, 0x3b, 0x69, 0x1b,
	0xe8, 0x0c, 0x69, 0x9b, 0x08, 0x3b, 0xbf, 0xc0, 0xf8, 0x59, 0x2c, 0x59, 0xb2, 0x22, 0xd2, 0xfe,
	0x85, 0x2b, 0xd3, 0x29, 0x44, 0xdd, 0xb8, 0x99, 0xbc, 0x77, 0xef, 0x4d, 0xce, 0x9d, 0x07, 0x97,
	0xe9, 0x6a, 0xc1, 0x12, 0xab, 0x78, 0x5f, 0x66, 0x6c, 0xe5, 0x33, 0x6e, 0x2e, 0x62, 0x91, 0x0a,
	0x72, 0x22, 0x8d, 0xab, 0x73, 0x5f, 0xf8, 0x42, 0x2a, 0x56, 0x31, 0x95, 0x66, 0xf7, 0x1d, 0x43,
	0xf5, 0x49, 0xa6, 0xc9, 0x23, 0x28, 0xa1, 0xa7, 0x61, 0x1d, 0x1b, 0x75, 0xbb, 0x9f, 0xed, 0x3a,
	0xca, 0x70, 0xf0, 0xb5, 0xeb, 0xdc, 0xf8, 0x61, 0x3a, 0x9f, 0x4c, 0x4d, 0x57, 0x44, 0x56, 0x1a,
	0x88, 0xd8, 0x0d, 0x26, 0x21, 0x97, 0x13, 0x17, 0x1e, 0xb3, 0x5c, 0x11, 0x45, 0x82, 0x9b, 0xa3,
	0xe5, 0x70, 0xe0, 0x28, 0xa1, 0x47, 0xae, 0xa1, 0x52, 0xe0, 0x34, 0x45, 0xc7, 0xc6, 0x59, 0xaf,
	0x6d, 0x4a, 0xb6, 0x59, 0x12, 0x46, 0xab, 0x05, 0x73, 0xa4, 0x4d, 0x34, 0xa8, 0x45, 0x2c, 0x9a,
	0xb2, 0x38, 0xd1, 0x54, 0x5d, 0x35, 0xea, 0xce, 0x71, 0xed, 0x8e, 0xa0, 0x51, 0xa6, 0xed, 0xb9,
	0x70, 0x67, 0xe4, 0x02, 0xaa, 0x01, 0x0b, 0xfd, 0x20, 0x95, 0xc5, 0x54, 0xe7, 0xb0, 0x91, 0x3b,
	0xa8, 0x95, 0x9f, 0x4c, 0xb4, 0x8a, 0xae, 0x1a, 0x8d, 0x5e, 0xf3, 0x0f, 0xca, 0xae, 0xac, 0x77,
	0x1d, 0xe4, 0x1c, 0x33, 0xb7, 0xf7, 0x00, 0x3f, 0x1d, 0x48, 0x1b, 0x9a, 0x63, 0x3e, 0xe3, 0xe2,
	0x95, 0x97, 0x62, 0x0b, 0x91, 0x16, 0x9c, 0x3e, 0x24, 0xfe, 0x24, 0xf6, 0x0e, 0x0a, 0xb6, 0xc7,
	0xeb, 0x3d, 0x45, 0xdb, 0x3d, 0x45, 0x6f, 0x19, 0x45, 0xeb, 0x8c, 0xe2, 0x4d, 0x46, 0xf1, 0x67,
	0x46, 0xf1, 0x47, 0x4e, 0xd1, 0x26, 0xa7, 0x68, 0x9b, 0x53, 0xf4, 0x6c, 0xfd, 0x7f, 0x9e, 0xe5,
	0x6f, 0xb1, 0xe8, 0x37, 0xad, 0xca, 0xbb, 0xf7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x33,
	0xb0, 0xb9, 0xaf, 0x01, 0x00, 0x00,
}

func (m *Keygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintTypeKeygen(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypeKeygen(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypeKeygen(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keygens) > 0 {
		for iNdEx := len(m.Keygens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keygens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeKeygen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypeKeygen(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeKeygen(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeKeygen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypeKeygen(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypeKeygen(uint64(m.Type))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovTypeKeygen(uint64(l))
		}
	}
	return n
}

func (m *KeygenBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypeKeygen(uint64(m.Height))
	}
	if len(m.Keygens) > 0 {
		for _, e := range m.Keygens {
			l = e.Size()
			n += 1 + l + sovTypeKeygen(uint64(l))
		}
	}
	return n
}

func sovTypeKeygen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeKeygen(x uint64) (n int) {
	return sovTypeKeygen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = gitlab_com_thorchain_thornode_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeygenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keygens = append(m.Keygens, Keygen{})
			if err := m.Keygens[len(m.Keygens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeKeygen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeKeygen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeKeygen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeKeygen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeKeygen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeKeygen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeKeygen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeKeygen = fmt.Errorf("proto: unexpected end of group")
)
