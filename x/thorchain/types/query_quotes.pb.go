// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_quotes.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryQuoteSwapRequest struct {
	FromAsset         string `protobuf:"bytes,1,opt,name=from_asset,json=fromAsset,proto3" json:"from_asset,omitempty"`
	ToAsset           string `protobuf:"bytes,2,opt,name=to_asset,json=toAsset,proto3" json:"to_asset,omitempty"`
	Amount            string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	StreamingInterval string `protobuf:"bytes,4,opt,name=streaming_interval,json=streamingInterval,proto3" json:"streaming_interval,omitempty"`
	StreamingQuantity string `protobuf:"bytes,5,opt,name=streaming_quantity,json=streamingQuantity,proto3" json:"streaming_quantity,omitempty"`
	Destination       string `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination,omitempty"`
	ToleranceBps      string `protobuf:"bytes,7,opt,name=tolerance_bps,json=toleranceBps,proto3" json:"tolerance_bps,omitempty"`
	RefundAddress     string `protobuf:"bytes,8,opt,name=refund_address,json=refundAddress,proto3" json:"refund_address,omitempty"`
	Affiliate         string `protobuf:"bytes,9,opt,name=affiliate,proto3" json:"affiliate,omitempty"`
	AffiliateBps      string `protobuf:"bytes,10,opt,name=affiliate_bps,json=affiliateBps,proto3" json:"affiliate_bps,omitempty"`
}

func (m *QueryQuoteSwapRequest) Reset()         { *m = QueryQuoteSwapRequest{} }
func (m *QueryQuoteSwapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSwapRequest) ProtoMessage()    {}
func (*QueryQuoteSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{0}
}
func (m *QueryQuoteSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSwapRequest.Merge(m, src)
}
func (m *QueryQuoteSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSwapRequest proto.InternalMessageInfo

func (m *QueryQuoteSwapRequest) GetFromAsset() string {
	if m != nil {
		return m.FromAsset
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetToAsset() string {
	if m != nil {
		return m.ToAsset
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetStreamingInterval() string {
	if m != nil {
		return m.StreamingInterval
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetStreamingQuantity() string {
	if m != nil {
		return m.StreamingQuantity
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetToleranceBps() string {
	if m != nil {
		return m.ToleranceBps
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetAffiliate() string {
	if m != nil {
		return m.Affiliate
	}
	return ""
}

func (m *QueryQuoteSwapRequest) GetAffiliateBps() string {
	if m != nil {
		return m.AffiliateBps
	}
	return ""
}

type QueryQuoteSwapResponse struct {
	InboundAddress             string     `protobuf:"bytes,1,opt,name=inbound_address,json=inboundAddress,proto3" json:"inbound_address,omitempty"`
	InboundConfirmationBlocks  int64      `protobuf:"varint,2,opt,name=inbound_confirmation_blocks,json=inboundConfirmationBlocks,proto3" json:"inbound_confirmation_blocks,omitempty"`
	InboundConfirmationSeconds int64      `protobuf:"varint,3,opt,name=inbound_confirmation_seconds,json=inboundConfirmationSeconds,proto3" json:"inbound_confirmation_seconds,omitempty"`
	OutboundDelayBlocks        int64      `protobuf:"varint,4,opt,name=outbound_delay_blocks,json=outboundDelayBlocks,proto3" json:"outbound_delay_blocks,omitempty"`
	OutboundDelaySeconds       int64      `protobuf:"varint,5,opt,name=outbound_delay_seconds,json=outboundDelaySeconds,proto3" json:"outbound_delay_seconds,omitempty"`
	Fees                       *QuoteFees `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Router                     string     `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	Expiry                     int64      `protobuf:"varint,8,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Warning                    string     `protobuf:"bytes,9,opt,name=warning,proto3" json:"warning,omitempty"`
	Notes                      string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	DustThreshold              string     `protobuf:"bytes,11,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
	RecommendedMinAmountIn     string     `protobuf:"bytes,12,opt,name=recommended_min_amount_in,json=recommendedMinAmountIn,proto3" json:"recommended_min_amount_in,omitempty"`
	RecommendedGasRate         string     `protobuf:"bytes,13,opt,name=recommended_gas_rate,json=recommendedGasRate,proto3" json:"recommended_gas_rate,omitempty"`
	GasRateUnits               string     `protobuf:"bytes,14,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	Memo                       string     `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	ExpectedAmountOut          string     `protobuf:"bytes,16,opt,name=expected_amount_out,json=expectedAmountOut,proto3" json:"expected_amount_out,omitempty"`
	MaxStreamingQuantity       int64      `protobuf:"varint,17,opt,name=max_streaming_quantity,json=maxStreamingQuantity,proto3" json:"max_streaming_quantity,omitempty"`
	StreamingSwapBlocks        int64      `protobuf:"varint,18,opt,name=streaming_swap_blocks,json=streamingSwapBlocks,proto3" json:"streaming_swap_blocks,omitempty"`
	StreamingSwapSeconds       int64      `protobuf:"varint,19,opt,name=streaming_swap_seconds,json=streamingSwapSeconds,proto3" json:"streaming_swap_seconds,omitempty"`
	TotalSwapSeconds           int64      `protobuf:"varint,20,opt,name=total_swap_seconds,json=totalSwapSeconds,proto3" json:"total_swap_seconds,omitempty"`
}

func (m *QueryQuoteSwapResponse) Reset()         { *m = QueryQuoteSwapResponse{} }
func (m *QueryQuoteSwapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSwapResponse) ProtoMessage()    {}
func (*QueryQuoteSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{1}
}
func (m *QueryQuoteSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSwapResponse.Merge(m, src)
}
func (m *QueryQuoteSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSwapResponse proto.InternalMessageInfo

func (m *QueryQuoteSwapResponse) GetInboundAddress() string {
	if m != nil {
		return m.InboundAddress
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetInboundConfirmationBlocks() int64 {
	if m != nil {
		return m.InboundConfirmationBlocks
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetInboundConfirmationSeconds() int64 {
	if m != nil {
		return m.InboundConfirmationSeconds
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetOutboundDelayBlocks() int64 {
	if m != nil {
		return m.OutboundDelayBlocks
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetOutboundDelaySeconds() int64 {
	if m != nil {
		return m.OutboundDelaySeconds
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetFees() *QuoteFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryQuoteSwapResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetRecommendedMinAmountIn() string {
	if m != nil {
		return m.RecommendedMinAmountIn
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetRecommendedGasRate() string {
	if m != nil {
		return m.RecommendedGasRate
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetExpectedAmountOut() string {
	if m != nil {
		return m.ExpectedAmountOut
	}
	return ""
}

func (m *QueryQuoteSwapResponse) GetMaxStreamingQuantity() int64 {
	if m != nil {
		return m.MaxStreamingQuantity
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetStreamingSwapBlocks() int64 {
	if m != nil {
		return m.StreamingSwapBlocks
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetStreamingSwapSeconds() int64 {
	if m != nil {
		return m.StreamingSwapSeconds
	}
	return 0
}

func (m *QueryQuoteSwapResponse) GetTotalSwapSeconds() int64 {
	if m != nil {
		return m.TotalSwapSeconds
	}
	return 0
}

type QueryQuoteSaverDepositRequest struct {
	Asset        string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount       string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Affiliate    string `protobuf:"bytes,3,opt,name=affiliate,proto3" json:"affiliate,omitempty"`
	AffiliateBps string `protobuf:"bytes,4,opt,name=affiliate_bps,json=affiliateBps,proto3" json:"affiliate_bps,omitempty"`
}

func (m *QueryQuoteSaverDepositRequest) Reset()         { *m = QueryQuoteSaverDepositRequest{} }
func (m *QueryQuoteSaverDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSaverDepositRequest) ProtoMessage()    {}
func (*QueryQuoteSaverDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{2}
}
func (m *QueryQuoteSaverDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSaverDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSaverDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSaverDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSaverDepositRequest.Merge(m, src)
}
func (m *QueryQuoteSaverDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSaverDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSaverDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSaverDepositRequest proto.InternalMessageInfo

func (m *QueryQuoteSaverDepositRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryQuoteSaverDepositRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryQuoteSaverDepositRequest) GetAffiliate() string {
	if m != nil {
		return m.Affiliate
	}
	return ""
}

func (m *QueryQuoteSaverDepositRequest) GetAffiliateBps() string {
	if m != nil {
		return m.AffiliateBps
	}
	return ""
}

type QueryQuoteSaverDepositResponse struct {
	InboundAddress             string     `protobuf:"bytes,1,opt,name=inbound_address,json=inboundAddress,proto3" json:"inbound_address,omitempty"`
	InboundConfirmationBlocks  int64      `protobuf:"varint,2,opt,name=inbound_confirmation_blocks,json=inboundConfirmationBlocks,proto3" json:"inbound_confirmation_blocks,omitempty"`
	InboundConfirmationSeconds int64      `protobuf:"varint,3,opt,name=inbound_confirmation_seconds,json=inboundConfirmationSeconds,proto3" json:"inbound_confirmation_seconds,omitempty"`
	OutboundDelayBlocks        int64      `protobuf:"varint,4,opt,name=outbound_delay_blocks,json=outboundDelayBlocks,proto3" json:"outbound_delay_blocks,omitempty"`
	OutboundDelaySeconds       int64      `protobuf:"varint,5,opt,name=outbound_delay_seconds,json=outboundDelaySeconds,proto3" json:"outbound_delay_seconds,omitempty"`
	Fees                       *QuoteFees `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Router                     string     `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	Expiry                     int64      `protobuf:"varint,8,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Warning                    string     `protobuf:"bytes,9,opt,name=warning,proto3" json:"warning,omitempty"`
	Notes                      string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	DustThreshold              string     `protobuf:"bytes,11,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
	RecommendedMinAmountIn     string     `protobuf:"bytes,12,opt,name=recommended_min_amount_in,json=recommendedMinAmountIn,proto3" json:"recommended_min_amount_in,omitempty"`
	RecommendedGasRate         string     `protobuf:"bytes,13,opt,name=recommended_gas_rate,json=recommendedGasRate,proto3" json:"recommended_gas_rate,omitempty"`
	GasRateUnits               string     `protobuf:"bytes,14,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	Memo                       string     `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	ExpectedAmountOut          string     `protobuf:"bytes,16,opt,name=expected_amount_out,json=expectedAmountOut,proto3" json:"expected_amount_out,omitempty"`
	ExpectedAmountDeposit      string     `protobuf:"bytes,17,opt,name=expected_amount_deposit,json=expectedAmountDeposit,proto3" json:"expected_amount_deposit,omitempty"`
}

func (m *QueryQuoteSaverDepositResponse) Reset()         { *m = QueryQuoteSaverDepositResponse{} }
func (m *QueryQuoteSaverDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSaverDepositResponse) ProtoMessage()    {}
func (*QueryQuoteSaverDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{3}
}
func (m *QueryQuoteSaverDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSaverDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSaverDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSaverDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSaverDepositResponse.Merge(m, src)
}
func (m *QueryQuoteSaverDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSaverDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSaverDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSaverDepositResponse proto.InternalMessageInfo

func (m *QueryQuoteSaverDepositResponse) GetInboundAddress() string {
	if m != nil {
		return m.InboundAddress
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetInboundConfirmationBlocks() int64 {
	if m != nil {
		return m.InboundConfirmationBlocks
	}
	return 0
}

func (m *QueryQuoteSaverDepositResponse) GetInboundConfirmationSeconds() int64 {
	if m != nil {
		return m.InboundConfirmationSeconds
	}
	return 0
}

func (m *QueryQuoteSaverDepositResponse) GetOutboundDelayBlocks() int64 {
	if m != nil {
		return m.OutboundDelayBlocks
	}
	return 0
}

func (m *QueryQuoteSaverDepositResponse) GetOutboundDelaySeconds() int64 {
	if m != nil {
		return m.OutboundDelaySeconds
	}
	return 0
}

func (m *QueryQuoteSaverDepositResponse) GetFees() *QuoteFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryQuoteSaverDepositResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *QueryQuoteSaverDepositResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetRecommendedMinAmountIn() string {
	if m != nil {
		return m.RecommendedMinAmountIn
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetRecommendedGasRate() string {
	if m != nil {
		return m.RecommendedGasRate
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetExpectedAmountOut() string {
	if m != nil {
		return m.ExpectedAmountOut
	}
	return ""
}

func (m *QueryQuoteSaverDepositResponse) GetExpectedAmountDeposit() string {
	if m != nil {
		return m.ExpectedAmountDeposit
	}
	return ""
}

type QueryQuoteSaverWithdrawRequest struct {
	Asset       string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Address     string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	WithdrawBps string `protobuf:"bytes,3,opt,name=withdraw_bps,json=withdrawBps,proto3" json:"withdraw_bps,omitempty"`
}

func (m *QueryQuoteSaverWithdrawRequest) Reset()         { *m = QueryQuoteSaverWithdrawRequest{} }
func (m *QueryQuoteSaverWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSaverWithdrawRequest) ProtoMessage()    {}
func (*QueryQuoteSaverWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{4}
}
func (m *QueryQuoteSaverWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSaverWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSaverWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSaverWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSaverWithdrawRequest.Merge(m, src)
}
func (m *QueryQuoteSaverWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSaverWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSaverWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSaverWithdrawRequest proto.InternalMessageInfo

func (m *QueryQuoteSaverWithdrawRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawRequest) GetWithdrawBps() string {
	if m != nil {
		return m.WithdrawBps
	}
	return ""
}

type QueryQuoteSaverWithdrawResponse struct {
	InboundAddress             string     `protobuf:"bytes,1,opt,name=inbound_address,json=inboundAddress,proto3" json:"inbound_address,omitempty"`
	InboundConfirmationBlocks  int64      `protobuf:"varint,2,opt,name=inbound_confirmation_blocks,json=inboundConfirmationBlocks,proto3" json:"inbound_confirmation_blocks,omitempty"`
	InboundConfirmationSeconds int64      `protobuf:"varint,3,opt,name=inbound_confirmation_seconds,json=inboundConfirmationSeconds,proto3" json:"inbound_confirmation_seconds,omitempty"`
	OutboundDelayBlocks        int64      `protobuf:"varint,4,opt,name=outbound_delay_blocks,json=outboundDelayBlocks,proto3" json:"outbound_delay_blocks,omitempty"`
	OutboundDelaySeconds       int64      `protobuf:"varint,5,opt,name=outbound_delay_seconds,json=outboundDelaySeconds,proto3" json:"outbound_delay_seconds,omitempty"`
	Fees                       *QuoteFees `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Router                     string     `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	Expiry                     int64      `protobuf:"varint,8,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Warning                    string     `protobuf:"bytes,9,opt,name=warning,proto3" json:"warning,omitempty"`
	Notes                      string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	DustThreshold              string     `protobuf:"bytes,11,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
	RecommendedMinAmountIn     string     `protobuf:"bytes,12,opt,name=recommended_min_amount_in,json=recommendedMinAmountIn,proto3" json:"recommended_min_amount_in,omitempty"`
	RecommendedGasRate         string     `protobuf:"bytes,13,opt,name=recommended_gas_rate,json=recommendedGasRate,proto3" json:"recommended_gas_rate,omitempty"`
	GasRateUnits               string     `protobuf:"bytes,14,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	Memo                       string     `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	DustAmount                 string     `protobuf:"bytes,16,opt,name=dust_amount,json=dustAmount,proto3" json:"dust_amount,omitempty"`
	ExpectedAmountOut          string     `protobuf:"bytes,17,opt,name=expected_amount_out,json=expectedAmountOut,proto3" json:"expected_amount_out,omitempty"`
}

func (m *QueryQuoteSaverWithdrawResponse) Reset()         { *m = QueryQuoteSaverWithdrawResponse{} }
func (m *QueryQuoteSaverWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteSaverWithdrawResponse) ProtoMessage()    {}
func (*QueryQuoteSaverWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{5}
}
func (m *QueryQuoteSaverWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteSaverWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteSaverWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteSaverWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteSaverWithdrawResponse.Merge(m, src)
}
func (m *QueryQuoteSaverWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteSaverWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteSaverWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteSaverWithdrawResponse proto.InternalMessageInfo

func (m *QueryQuoteSaverWithdrawResponse) GetInboundAddress() string {
	if m != nil {
		return m.InboundAddress
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetInboundConfirmationBlocks() int64 {
	if m != nil {
		return m.InboundConfirmationBlocks
	}
	return 0
}

func (m *QueryQuoteSaverWithdrawResponse) GetInboundConfirmationSeconds() int64 {
	if m != nil {
		return m.InboundConfirmationSeconds
	}
	return 0
}

func (m *QueryQuoteSaverWithdrawResponse) GetOutboundDelayBlocks() int64 {
	if m != nil {
		return m.OutboundDelayBlocks
	}
	return 0
}

func (m *QueryQuoteSaverWithdrawResponse) GetOutboundDelaySeconds() int64 {
	if m != nil {
		return m.OutboundDelaySeconds
	}
	return 0
}

func (m *QueryQuoteSaverWithdrawResponse) GetFees() *QuoteFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryQuoteSaverWithdrawResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *QueryQuoteSaverWithdrawResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetRecommendedMinAmountIn() string {
	if m != nil {
		return m.RecommendedMinAmountIn
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetRecommendedGasRate() string {
	if m != nil {
		return m.RecommendedGasRate
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetDustAmount() string {
	if m != nil {
		return m.DustAmount
	}
	return ""
}

func (m *QueryQuoteSaverWithdrawResponse) GetExpectedAmountOut() string {
	if m != nil {
		return m.ExpectedAmountOut
	}
	return ""
}

type QueryQuoteLoanOpenRequest struct {
	FromAsset    string `protobuf:"bytes,1,opt,name=from_asset,json=fromAsset,proto3" json:"from_asset,omitempty"`
	ToAsset      string `protobuf:"bytes,2,opt,name=to_asset,json=toAsset,proto3" json:"to_asset,omitempty"`
	Amount       string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	MinOut       string `protobuf:"bytes,4,opt,name=min_out,json=minOut,proto3" json:"min_out,omitempty"`
	Destination  string `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	Affiliate    string `protobuf:"bytes,6,opt,name=affiliate,proto3" json:"affiliate,omitempty"`
	AffiliateBps string `protobuf:"bytes,7,opt,name=affiliate_bps,json=affiliateBps,proto3" json:"affiliate_bps,omitempty"`
}

func (m *QueryQuoteLoanOpenRequest) Reset()         { *m = QueryQuoteLoanOpenRequest{} }
func (m *QueryQuoteLoanOpenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteLoanOpenRequest) ProtoMessage()    {}
func (*QueryQuoteLoanOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{6}
}
func (m *QueryQuoteLoanOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteLoanOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteLoanOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteLoanOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteLoanOpenRequest.Merge(m, src)
}
func (m *QueryQuoteLoanOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteLoanOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteLoanOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteLoanOpenRequest proto.InternalMessageInfo

func (m *QueryQuoteLoanOpenRequest) GetFromAsset() string {
	if m != nil {
		return m.FromAsset
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetToAsset() string {
	if m != nil {
		return m.ToAsset
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetMinOut() string {
	if m != nil {
		return m.MinOut
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetAffiliate() string {
	if m != nil {
		return m.Affiliate
	}
	return ""
}

func (m *QueryQuoteLoanOpenRequest) GetAffiliateBps() string {
	if m != nil {
		return m.AffiliateBps
	}
	return ""
}

type QueryQuoteLoanOpenResponse struct {
	InboundAddress                 string     `protobuf:"bytes,1,opt,name=inbound_address,json=inboundAddress,proto3" json:"inbound_address,omitempty"`
	InboundConfirmationBlocks      int64      `protobuf:"varint,2,opt,name=inbound_confirmation_blocks,json=inboundConfirmationBlocks,proto3" json:"inbound_confirmation_blocks,omitempty"`
	InboundConfirmationSeconds     int64      `protobuf:"varint,3,opt,name=inbound_confirmation_seconds,json=inboundConfirmationSeconds,proto3" json:"inbound_confirmation_seconds,omitempty"`
	OutboundDelayBlocks            int64      `protobuf:"varint,4,opt,name=outbound_delay_blocks,json=outboundDelayBlocks,proto3" json:"outbound_delay_blocks,omitempty"`
	OutboundDelaySeconds           int64      `protobuf:"varint,5,opt,name=outbound_delay_seconds,json=outboundDelaySeconds,proto3" json:"outbound_delay_seconds,omitempty"`
	Fees                           *QuoteFees `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Router                         string     `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	Expiry                         int64      `protobuf:"varint,8,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Warning                        string     `protobuf:"bytes,9,opt,name=warning,proto3" json:"warning,omitempty"`
	Notes                          string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	DustThreshold                  string     `protobuf:"bytes,11,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
	RecommendedMinAmountIn         string     `protobuf:"bytes,12,opt,name=recommended_min_amount_in,json=recommendedMinAmountIn,proto3" json:"recommended_min_amount_in,omitempty"`
	RecommendedGasRate             string     `protobuf:"bytes,13,opt,name=recommended_gas_rate,json=recommendedGasRate,proto3" json:"recommended_gas_rate,omitempty"`
	GasRateUnits                   string     `protobuf:"bytes,14,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	Memo                           string     `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	ExpectedAmountOut              string     `protobuf:"bytes,16,opt,name=expected_amount_out,json=expectedAmountOut,proto3" json:"expected_amount_out,omitempty"`
	ExpectedCollateralizationRatio string     `protobuf:"bytes,17,opt,name=expected_collateralization_ratio,json=expectedCollateralizationRatio,proto3" json:"expected_collateralization_ratio,omitempty"`
	ExpectedCollateralDeposited    string     `protobuf:"bytes,18,opt,name=expected_collateral_deposited,json=expectedCollateralDeposited,proto3" json:"expected_collateral_deposited,omitempty"`
	ExpectedDebtIssued             string     `protobuf:"bytes,19,opt,name=expected_debt_issued,json=expectedDebtIssued,proto3" json:"expected_debt_issued,omitempty"`
	StreamingSwapBlocks            int64      `protobuf:"varint,20,opt,name=streaming_swap_blocks,json=streamingSwapBlocks,proto3" json:"streaming_swap_blocks,omitempty"`
	StreamingSwapSeconds           int64      `protobuf:"varint,21,opt,name=streaming_swap_seconds,json=streamingSwapSeconds,proto3" json:"streaming_swap_seconds,omitempty"`
	TotalOpenLoanSeconds           int64      `protobuf:"varint,22,opt,name=total_open_loan_seconds,json=totalOpenLoanSeconds,proto3" json:"total_open_loan_seconds,omitempty"`
}

func (m *QueryQuoteLoanOpenResponse) Reset()         { *m = QueryQuoteLoanOpenResponse{} }
func (m *QueryQuoteLoanOpenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteLoanOpenResponse) ProtoMessage()    {}
func (*QueryQuoteLoanOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{7}
}
func (m *QueryQuoteLoanOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteLoanOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteLoanOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteLoanOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteLoanOpenResponse.Merge(m, src)
}
func (m *QueryQuoteLoanOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteLoanOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteLoanOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteLoanOpenResponse proto.InternalMessageInfo

func (m *QueryQuoteLoanOpenResponse) GetInboundAddress() string {
	if m != nil {
		return m.InboundAddress
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetInboundConfirmationBlocks() int64 {
	if m != nil {
		return m.InboundConfirmationBlocks
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetInboundConfirmationSeconds() int64 {
	if m != nil {
		return m.InboundConfirmationSeconds
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetOutboundDelayBlocks() int64 {
	if m != nil {
		return m.OutboundDelayBlocks
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetOutboundDelaySeconds() int64 {
	if m != nil {
		return m.OutboundDelaySeconds
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetFees() *QuoteFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryQuoteLoanOpenResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetRecommendedMinAmountIn() string {
	if m != nil {
		return m.RecommendedMinAmountIn
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetRecommendedGasRate() string {
	if m != nil {
		return m.RecommendedGasRate
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetExpectedAmountOut() string {
	if m != nil {
		return m.ExpectedAmountOut
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetExpectedCollateralizationRatio() string {
	if m != nil {
		return m.ExpectedCollateralizationRatio
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetExpectedCollateralDeposited() string {
	if m != nil {
		return m.ExpectedCollateralDeposited
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetExpectedDebtIssued() string {
	if m != nil {
		return m.ExpectedDebtIssued
	}
	return ""
}

func (m *QueryQuoteLoanOpenResponse) GetStreamingSwapBlocks() int64 {
	if m != nil {
		return m.StreamingSwapBlocks
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetStreamingSwapSeconds() int64 {
	if m != nil {
		return m.StreamingSwapSeconds
	}
	return 0
}

func (m *QueryQuoteLoanOpenResponse) GetTotalOpenLoanSeconds() int64 {
	if m != nil {
		return m.TotalOpenLoanSeconds
	}
	return 0
}

type QueryQuoteLoanCloseRequest struct {
	FromAsset string `protobuf:"bytes,1,opt,name=from_asset,json=fromAsset,proto3" json:"from_asset,omitempty"`
	ToAsset   string `protobuf:"bytes,2,opt,name=to_asset,json=toAsset,proto3" json:"to_asset,omitempty"`
	MinOut    string `protobuf:"bytes,3,opt,name=min_out,json=minOut,proto3" json:"min_out,omitempty"`
	RepayBps  string `protobuf:"bytes,4,opt,name=repay_bps,json=repayBps,proto3" json:"repay_bps,omitempty"`
	LoanOwner string `protobuf:"bytes,5,opt,name=loan_owner,json=loanOwner,proto3" json:"loan_owner,omitempty"`
}

func (m *QueryQuoteLoanCloseRequest) Reset()         { *m = QueryQuoteLoanCloseRequest{} }
func (m *QueryQuoteLoanCloseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteLoanCloseRequest) ProtoMessage()    {}
func (*QueryQuoteLoanCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{8}
}
func (m *QueryQuoteLoanCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteLoanCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteLoanCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteLoanCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteLoanCloseRequest.Merge(m, src)
}
func (m *QueryQuoteLoanCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteLoanCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteLoanCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteLoanCloseRequest proto.InternalMessageInfo

func (m *QueryQuoteLoanCloseRequest) GetFromAsset() string {
	if m != nil {
		return m.FromAsset
	}
	return ""
}

func (m *QueryQuoteLoanCloseRequest) GetToAsset() string {
	if m != nil {
		return m.ToAsset
	}
	return ""
}

func (m *QueryQuoteLoanCloseRequest) GetMinOut() string {
	if m != nil {
		return m.MinOut
	}
	return ""
}

func (m *QueryQuoteLoanCloseRequest) GetRepayBps() string {
	if m != nil {
		return m.RepayBps
	}
	return ""
}

func (m *QueryQuoteLoanCloseRequest) GetLoanOwner() string {
	if m != nil {
		return m.LoanOwner
	}
	return ""
}

type QueryQuoteLoanCloseResponse struct {
	InboundAddress              string     `protobuf:"bytes,1,opt,name=inbound_address,json=inboundAddress,proto3" json:"inbound_address,omitempty"`
	InboundConfirmationBlocks   int64      `protobuf:"varint,2,opt,name=inbound_confirmation_blocks,json=inboundConfirmationBlocks,proto3" json:"inbound_confirmation_blocks,omitempty"`
	InboundConfirmationSeconds  int64      `protobuf:"varint,3,opt,name=inbound_confirmation_seconds,json=inboundConfirmationSeconds,proto3" json:"inbound_confirmation_seconds,omitempty"`
	OutboundDelayBlocks         int64      `protobuf:"varint,4,opt,name=outbound_delay_blocks,json=outboundDelayBlocks,proto3" json:"outbound_delay_blocks,omitempty"`
	OutboundDelaySeconds        int64      `protobuf:"varint,5,opt,name=outbound_delay_seconds,json=outboundDelaySeconds,proto3" json:"outbound_delay_seconds,omitempty"`
	Fees                        *QuoteFees `protobuf:"bytes,6,opt,name=fees,proto3" json:"fees,omitempty"`
	Router                      string     `protobuf:"bytes,7,opt,name=router,proto3" json:"router,omitempty"`
	Expiry                      int64      `protobuf:"varint,8,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Warning                     string     `protobuf:"bytes,9,opt,name=warning,proto3" json:"warning,omitempty"`
	Notes                       string     `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	DustThreshold               string     `protobuf:"bytes,11,opt,name=dust_threshold,json=dustThreshold,proto3" json:"dust_threshold,omitempty"`
	RecommendedMinAmountIn      string     `protobuf:"bytes,12,opt,name=recommended_min_amount_in,json=recommendedMinAmountIn,proto3" json:"recommended_min_amount_in,omitempty"`
	RecommendedGasRate          string     `protobuf:"bytes,13,opt,name=recommended_gas_rate,json=recommendedGasRate,proto3" json:"recommended_gas_rate,omitempty"`
	GasRateUnits                string     `protobuf:"bytes,14,opt,name=gas_rate_units,json=gasRateUnits,proto3" json:"gas_rate_units,omitempty"`
	Memo                        string     `protobuf:"bytes,15,opt,name=memo,proto3" json:"memo,omitempty"`
	ExpectedAmountOut           string     `protobuf:"bytes,16,opt,name=expected_amount_out,json=expectedAmountOut,proto3" json:"expected_amount_out,omitempty"`
	ExpectedAmountIn            string     `protobuf:"bytes,17,opt,name=expected_amount_in,json=expectedAmountIn,proto3" json:"expected_amount_in,omitempty"`
	ExpectedCollateralWithdrawn string     `protobuf:"bytes,18,opt,name=expected_collateral_withdrawn,json=expectedCollateralWithdrawn,proto3" json:"expected_collateral_withdrawn,omitempty"`
	ExpectedDebtRepaid          string     `protobuf:"bytes,19,opt,name=expected_debt_repaid,json=expectedDebtRepaid,proto3" json:"expected_debt_repaid,omitempty"`
	StreamingSwapBlocks         int64      `protobuf:"varint,20,opt,name=streaming_swap_blocks,json=streamingSwapBlocks,proto3" json:"streaming_swap_blocks,omitempty"`
	StreamingSwapSeconds        int64      `protobuf:"varint,21,opt,name=streaming_swap_seconds,json=streamingSwapSeconds,proto3" json:"streaming_swap_seconds,omitempty"`
	TotalRepaySeconds           int64      `protobuf:"varint,22,opt,name=total_repay_seconds,json=totalRepaySeconds,proto3" json:"total_repay_seconds,omitempty"`
}

func (m *QueryQuoteLoanCloseResponse) Reset()         { *m = QueryQuoteLoanCloseResponse{} }
func (m *QueryQuoteLoanCloseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQuoteLoanCloseResponse) ProtoMessage()    {}
func (*QueryQuoteLoanCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{9}
}
func (m *QueryQuoteLoanCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQuoteLoanCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQuoteLoanCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQuoteLoanCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQuoteLoanCloseResponse.Merge(m, src)
}
func (m *QueryQuoteLoanCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQuoteLoanCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQuoteLoanCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQuoteLoanCloseResponse proto.InternalMessageInfo

func (m *QueryQuoteLoanCloseResponse) GetInboundAddress() string {
	if m != nil {
		return m.InboundAddress
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetInboundConfirmationBlocks() int64 {
	if m != nil {
		return m.InboundConfirmationBlocks
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetInboundConfirmationSeconds() int64 {
	if m != nil {
		return m.InboundConfirmationSeconds
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetOutboundDelayBlocks() int64 {
	if m != nil {
		return m.OutboundDelayBlocks
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetOutboundDelaySeconds() int64 {
	if m != nil {
		return m.OutboundDelaySeconds
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetFees() *QuoteFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *QueryQuoteLoanCloseResponse) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetDustThreshold() string {
	if m != nil {
		return m.DustThreshold
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetRecommendedMinAmountIn() string {
	if m != nil {
		return m.RecommendedMinAmountIn
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetRecommendedGasRate() string {
	if m != nil {
		return m.RecommendedGasRate
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetGasRateUnits() string {
	if m != nil {
		return m.GasRateUnits
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetExpectedAmountOut() string {
	if m != nil {
		return m.ExpectedAmountOut
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetExpectedAmountIn() string {
	if m != nil {
		return m.ExpectedAmountIn
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetExpectedCollateralWithdrawn() string {
	if m != nil {
		return m.ExpectedCollateralWithdrawn
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetExpectedDebtRepaid() string {
	if m != nil {
		return m.ExpectedDebtRepaid
	}
	return ""
}

func (m *QueryQuoteLoanCloseResponse) GetStreamingSwapBlocks() int64 {
	if m != nil {
		return m.StreamingSwapBlocks
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetStreamingSwapSeconds() int64 {
	if m != nil {
		return m.StreamingSwapSeconds
	}
	return 0
}

func (m *QueryQuoteLoanCloseResponse) GetTotalRepaySeconds() int64 {
	if m != nil {
		return m.TotalRepaySeconds
	}
	return 0
}

type QuoteFees struct {
	Asset       string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Affiliate   string `protobuf:"bytes,2,opt,name=affiliate,proto3" json:"affiliate,omitempty"`
	Outbound    string `protobuf:"bytes,3,opt,name=outbound,proto3" json:"outbound,omitempty"`
	Liquidity   string `protobuf:"bytes,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Total       string `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`
	SlippageBps int64  `protobuf:"varint,6,opt,name=slippage_bps,json=slippageBps,proto3" json:"slippage_bps,omitempty"`
	TotalBps    int64  `protobuf:"varint,7,opt,name=total_bps,json=totalBps,proto3" json:"total_bps,omitempty"`
}

func (m *QuoteFees) Reset()         { *m = QuoteFees{} }
func (m *QuoteFees) String() string { return proto.CompactTextString(m) }
func (*QuoteFees) ProtoMessage()    {}
func (*QuoteFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_5502cf9fcacfb1bc, []int{10}
}
func (m *QuoteFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteFees.Merge(m, src)
}
func (m *QuoteFees) XXX_Size() int {
	return m.Size()
}
func (m *QuoteFees) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteFees.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteFees proto.InternalMessageInfo

func (m *QuoteFees) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QuoteFees) GetAffiliate() string {
	if m != nil {
		return m.Affiliate
	}
	return ""
}

func (m *QuoteFees) GetOutbound() string {
	if m != nil {
		return m.Outbound
	}
	return ""
}

func (m *QuoteFees) GetLiquidity() string {
	if m != nil {
		return m.Liquidity
	}
	return ""
}

func (m *QuoteFees) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *QuoteFees) GetSlippageBps() int64 {
	if m != nil {
		return m.SlippageBps
	}
	return 0
}

func (m *QuoteFees) GetTotalBps() int64 {
	if m != nil {
		return m.TotalBps
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryQuoteSwapRequest)(nil), "types.QueryQuoteSwapRequest")
	proto.RegisterType((*QueryQuoteSwapResponse)(nil), "types.QueryQuoteSwapResponse")
	proto.RegisterType((*QueryQuoteSaverDepositRequest)(nil), "types.QueryQuoteSaverDepositRequest")
	proto.RegisterType((*QueryQuoteSaverDepositResponse)(nil), "types.QueryQuoteSaverDepositResponse")
	proto.RegisterType((*QueryQuoteSaverWithdrawRequest)(nil), "types.QueryQuoteSaverWithdrawRequest")
	proto.RegisterType((*QueryQuoteSaverWithdrawResponse)(nil), "types.QueryQuoteSaverWithdrawResponse")
	proto.RegisterType((*QueryQuoteLoanOpenRequest)(nil), "types.QueryQuoteLoanOpenRequest")
	proto.RegisterType((*QueryQuoteLoanOpenResponse)(nil), "types.QueryQuoteLoanOpenResponse")
	proto.RegisterType((*QueryQuoteLoanCloseRequest)(nil), "types.QueryQuoteLoanCloseRequest")
	proto.RegisterType((*QueryQuoteLoanCloseResponse)(nil), "types.QueryQuoteLoanCloseResponse")
	proto.RegisterType((*QuoteFees)(nil), "types.QuoteFees")
}

func init() { proto.RegisterFile("types/query_quotes.proto", fileDescriptor_5502cf9fcacfb1bc) }

var fileDescriptor_5502cf9fcacfb1bc = []byte{
	// 1267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xae, 0xe3, 0xf8, 0xdf, 0xeb, 0x36, 0x4d, 0x26, 0x4e, 0xba, 0x49, 0x5a, 0xb7, 0x3f, 0xff,
	0x8a, 0xe0, 0x50, 0x6c, 0x5a, 0xfe, 0x48, 0x5c, 0x10, 0x71, 0x22, 0x20, 0x12, 0x28, 0xca, 0x06,
	0x84, 0xc4, 0x65, 0x35, 0xf6, 0x8e, 0x9d, 0x11, 0xbb, 0x33, 0x9b, 0x9d, 0xd9, 0x38, 0xe6, 0x53,
	0xf4, 0xc4, 0x97, 0xe0, 0x8b, 0x70, 0xa3, 0x47, 0x24, 0x2e, 0x28, 0x39, 0x72, 0x42, 0xe2, 0xc0,
	0x0d, 0x34, 0x33, 0x3b, 0xce, 0xae, 0x63, 0xb7, 0x12, 0x88, 0x2a, 0x07, 0x5f, 0xda, 0x9d, 0xe7,
	0x7d, 0xde, 0x99, 0xd9, 0x9d, 0xf7, 0x79, 0xe6, 0x75, 0xc0, 0x91, 0xe3, 0x88, 0x88, 0xce, 0x69,
	0x42, 0xe2, 0xb1, 0x77, 0x9a, 0x70, 0x49, 0x44, 0x3b, 0x8a, 0xb9, 0xe4, 0xa8, 0xa4, 0x23, 0xdb,
	0xcd, 0x3e, 0x17, 0x21, 0x17, 0x9d, 0x1e, 0x16, 0xa4, 0x73, 0xf6, 0xb4, 0x47, 0x24, 0x7e, 0xda,
	0xe9, 0x73, 0xca, 0x0c, 0x6d, 0xbb, 0x31, 0xe4, 0x43, 0xae, 0x1f, 0x3b, 0xea, 0xc9, 0xa0, 0xad,
	0x3f, 0x97, 0x60, 0xe3, 0x48, 0xcd, 0x79, 0xa4, 0xa6, 0x3c, 0x1e, 0xe1, 0xc8, 0x25, 0xa7, 0x09,
	0x11, 0x12, 0x3d, 0x00, 0x18, 0xc4, 0x3c, 0xf4, 0xb0, 0x10, 0x44, 0x3a, 0x85, 0x47, 0x85, 0xb7,
	0x6a, 0x6e, 0x4d, 0x21, 0xbb, 0x0a, 0x40, 0x5b, 0x50, 0x95, 0x3c, 0x0d, 0x2e, 0xe9, 0x60, 0x45,
	0x72, 0x13, 0xda, 0x84, 0x32, 0x0e, 0x79, 0xc2, 0xa4, 0x53, 0xd4, 0x81, 0x74, 0x84, 0xde, 0x06,
	0x24, 0x64, 0x4c, 0x70, 0x48, 0xd9, 0xd0, 0xa3, 0x4c, 0x92, 0xf8, 0x0c, 0x07, 0xce, 0xb2, 0xe6,
	0xac, 0x4d, 0x22, 0x07, 0x69, 0x20, 0x4f, 0x3f, 0x4d, 0x30, 0x93, 0x54, 0x8e, 0x9d, 0xd2, 0x14,
	0xfd, 0x28, 0x0d, 0xa0, 0x47, 0x50, 0xf7, 0x89, 0x90, 0x94, 0x61, 0x49, 0x39, 0x73, 0xca, 0x9a,
	0x97, 0x85, 0xd0, 0xff, 0xe1, 0x8e, 0xe4, 0x01, 0x89, 0x31, 0xeb, 0x13, 0xaf, 0x17, 0x09, 0xa7,
	0xa2, 0x39, 0xb7, 0x27, 0x60, 0x37, 0x12, 0xe8, 0x0d, 0x58, 0x89, 0xc9, 0x20, 0x61, 0xbe, 0x87,
	0x7d, 0x3f, 0x26, 0x42, 0x38, 0x55, 0xcd, 0xba, 0x63, 0xd0, 0x5d, 0x03, 0xa2, 0xfb, 0x50, 0xc3,
	0x83, 0x01, 0x0d, 0x28, 0x96, 0xc4, 0xa9, 0x99, 0x8f, 0x33, 0x01, 0xd4, 0x4a, 0x93, 0x81, 0x5e,
	0x09, 0xcc, 0x4a, 0x13, 0xb0, 0x1b, 0x89, 0xd6, 0x5f, 0x65, 0xd8, 0x9c, 0xfe, 0xf4, 0x22, 0xe2,
	0x4c, 0x10, 0xf4, 0x26, 0xdc, 0xa5, 0xac, 0xc7, 0xb3, 0xbb, 0x30, 0x07, 0xb0, 0x92, 0xc2, 0x76,
	0x1b, 0x1f, 0xc1, 0x8e, 0x25, 0xf6, 0x39, 0x1b, 0xd0, 0x38, 0xd4, 0xaf, 0xea, 0xf5, 0x02, 0xde,
	0xff, 0x56, 0xe8, 0x83, 0x29, 0xba, 0x5b, 0x29, 0x65, 0x2f, 0xc3, 0xe8, 0x6a, 0x02, 0xfa, 0x18,
	0xee, 0xcf, 0xcc, 0x17, 0xa4, 0xcf, 0x99, 0x2f, 0xf4, 0x01, 0x16, 0xdd, 0xed, 0x19, 0x13, 0x1c,
	0x1b, 0x06, 0x7a, 0x06, 0x1b, 0x3c, 0x91, 0x66, 0x0a, 0x9f, 0x04, 0x78, 0x6c, 0xd7, 0x5e, 0xd6,
	0xa9, 0xeb, 0x36, 0xb8, 0xaf, 0x62, 0xe9, 0xaa, 0xef, 0xc1, 0xe6, 0x54, 0x8e, 0x5d, 0xaf, 0xa4,
	0x93, 0x1a, 0xb9, 0x24, 0xbb, 0xd2, 0x63, 0x58, 0x1e, 0x10, 0x22, 0xf4, 0xc9, 0xd6, 0x9f, 0xad,
	0xb6, 0x75, 0xd9, 0xb7, 0xf5, 0xc7, 0xfb, 0x84, 0x10, 0xe1, 0xea, 0xa8, 0x2a, 0xbe, 0x98, 0x27,
	0x92, 0xc4, 0xe9, 0xe9, 0xa6, 0x23, 0x85, 0x93, 0xf3, 0x88, 0xc6, 0x63, 0x7d, 0x9e, 0x45, 0x37,
	0x1d, 0x21, 0x07, 0x2a, 0x23, 0x1c, 0x33, 0xca, 0x86, 0xe9, 0x31, 0xda, 0x21, 0x6a, 0x40, 0x89,
	0x29, 0x99, 0xa5, 0x87, 0x67, 0x06, 0xaa, 0x3e, 0xfc, 0x44, 0x48, 0x4f, 0x9e, 0xc4, 0x44, 0x9c,
	0xf0, 0xc0, 0x77, 0xea, 0xa6, 0x3e, 0x14, 0xfa, 0xa5, 0x05, 0xd1, 0x87, 0xb0, 0x15, 0x93, 0x3e,
	0x0f, 0x43, 0xc2, 0x7c, 0xe2, 0x7b, 0x21, 0x65, 0x9e, 0x51, 0x81, 0x47, 0x99, 0x73, 0x5b, 0x67,
	0x6c, 0x66, 0x08, 0x5f, 0x50, 0xb6, 0xab, 0xc3, 0x07, 0x0c, 0xbd, 0x03, 0x8d, 0x6c, 0xea, 0x10,
	0x0b, 0x2f, 0x56, 0x55, 0x76, 0x47, 0x67, 0xa1, 0x4c, 0xec, 0x53, 0x2c, 0x5c, 0x55, 0x6e, 0x8f,
	0x61, 0xc5, 0xb2, 0xbc, 0x84, 0x51, 0x29, 0x9c, 0x15, 0x53, 0x6f, 0x43, 0x43, 0xf8, 0x4a, 0x61,
	0x08, 0xc1, 0x72, 0x48, 0x42, 0xee, 0xdc, 0xd5, 0x31, 0xfd, 0x8c, 0xda, 0xb0, 0x4e, 0xce, 0x23,
	0xd2, 0x97, 0xc4, 0xb7, 0xfb, 0xe3, 0x89, 0x74, 0x56, 0x8d, 0xc8, 0x6c, 0xc8, 0x6c, 0xed, 0x30,
	0x91, 0xea, 0xe4, 0x42, 0x7c, 0xee, 0xcd, 0xd0, 0xe5, 0x9a, 0x39, 0xb9, 0x10, 0x9f, 0x1f, 0x5f,
	0x93, 0xe6, 0x33, 0xd8, 0xb8, 0xca, 0x10, 0x23, 0x1c, 0xd9, 0x1a, 0x41, 0xa6, 0x46, 0x26, 0x41,
	0x25, 0x82, 0xab, 0x1a, 0x99, 0xca, 0xb1, 0x35, 0xb2, 0x6e, 0x56, 0xca, 0x25, 0xd9, 0x1a, 0x79,
	0x02, 0x48, 0x72, 0x89, 0x83, 0x7c, 0x46, 0x43, 0x67, 0xac, 0xea, 0x48, 0x86, 0xdd, 0x7a, 0x5e,
	0x80, 0x07, 0x19, 0x05, 0xe2, 0x33, 0x12, 0xef, 0x93, 0x88, 0x0b, 0x2a, 0xad, 0x09, 0x36, 0xa0,
	0x94, 0xf5, 0x3f, 0x33, 0xc8, 0x18, 0xdc, 0x52, 0xce, 0xe0, 0x72, 0xa6, 0x50, 0x7c, 0xa5, 0x29,
	0x2c, 0xcf, 0x30, 0x85, 0xdf, 0x4b, 0xd0, 0x9c, 0xb7, 0xa5, 0x85, 0x39, 0x2c, 0xcc, 0xe1, 0x26,
	0x9b, 0xc3, 0x07, 0x70, 0x6f, 0x9a, 0xef, 0x9b, 0xda, 0xd5, 0xee, 0x50, 0x73, 0x37, 0xf2, 0x39,
	0x69, 0x61, 0xb7, 0xc4, 0xb5, 0x92, 0xff, 0x9a, 0xca, 0x13, 0x3f, 0xc6, 0xa3, 0x97, 0xcb, 0xd0,
	0x81, 0x8a, 0x15, 0x40, 0xda, 0x81, 0xa4, 0x43, 0xf4, 0x3f, 0xb8, 0x3d, 0x4a, 0xa7, 0xd0, 0x4a,
	0x33, 0x5a, 0xac, 0x5b, 0x4c, 0x09, 0xed, 0x97, 0x12, 0x3c, 0x9c, 0xbb, 0xea, 0x42, 0x69, 0x0b,
	0xa5, 0xbd, 0x4e, 0xa5, 0x3d, 0x84, 0xba, 0x7e, 0x9b, 0xf4, 0x56, 0x31, 0x0a, 0x03, 0x05, 0x99,
	0xed, 0xcc, 0x93, 0xe2, 0xda, 0x1c, 0x29, 0xb6, 0x7e, 0x2b, 0xc0, 0xd6, 0x55, 0x75, 0x7f, 0xce,
	0x31, 0x3b, 0x8c, 0x08, 0xfb, 0xef, 0x5a, 0xfb, 0x7b, 0x50, 0x51, 0xdf, 0x56, 0xed, 0xc9, 0xdc,
	0x6a, 0xe5, 0x90, 0x32, 0xe5, 0x09, 0x53, 0x5d, 0x79, 0xe9, 0x7a, 0x57, 0x9e, 0xbb, 0x34, 0xcb,
	0xaf, 0xbc, 0x34, 0x2b, 0x33, 0x2e, 0xcd, 0xef, 0xab, 0xb0, 0x3d, 0xeb, 0x6d, 0x17, 0x32, 0x5e,
	0xc8, 0xf8, 0x26, 0x5f, 0x98, 0x9f, 0xc1, 0xa3, 0x09, 0xbf, 0xcf, 0x83, 0x00, 0x4b, 0x12, 0xe3,
	0x80, 0x7e, 0x67, 0xaa, 0x26, 0x56, 0xff, 0xa5, 0x12, 0x6f, 0x5a, 0xde, 0xde, 0x34, 0xcd, 0x55,
	0xff, 0xa2, 0x2e, 0x3c, 0x98, 0x31, 0x93, 0xbd, 0x7e, 0x89, 0xaf, 0x3b, 0xed, 0x9a, 0xbb, 0x73,
	0x7d, 0x9a, 0x7d, 0x4b, 0x51, 0x5f, 0x6a, 0x32, 0x87, 0x4f, 0x7a, 0xd2, 0xa3, 0x42, 0x24, 0xc4,
	0xd7, 0xfd, 0x76, 0xcd, 0x45, 0x36, 0xb6, 0x4f, 0x7a, 0xf2, 0x40, 0x47, 0xe6, 0xf7, 0xf5, 0x8d,
	0x7f, 0xd2, 0xd7, 0x6f, 0xbc, 0xa4, 0xaf, 0x7f, 0x1f, 0xee, 0x99, 0xbe, 0x9e, 0x47, 0x84, 0x79,
	0x01, 0xc7, 0x57, 0xa2, 0xda, 0x34, 0x69, 0x3a, 0xac, 0x64, 0xaf, 0xe4, 0x6f, 0x1b, 0xfc, 0x1f,
	0x0a, 0xd3, 0xc6, 0xb0, 0x17, 0x70, 0x41, 0xfe, 0xbd, 0x0f, 0x66, 0xfc, 0xae, 0x98, 0xf3, 0xbb,
	0x1d, 0xa8, 0xc5, 0x24, 0x52, 0xba, 0x9d, 0x34, 0xf8, 0x55, 0x0d, 0x74, 0x23, 0xa1, 0xd6, 0xd3,
	0x5b, 0xe7, 0x23, 0x46, 0xe2, 0xd4, 0x0b, 0x6b, 0x0a, 0x39, 0x54, 0x40, 0xeb, 0x8f, 0x0a, 0xec,
	0xcc, 0xdc, 0xed, 0xc2, 0xc7, 0x16, 0x3e, 0x76, 0x93, 0x7d, 0xec, 0x09, 0xa0, 0x69, 0x3e, 0x65,
	0xa9, 0x73, 0xad, 0xe6, 0xe9, 0x07, 0x6c, 0x9e, 0x57, 0xd9, 0xe6, 0x9c, 0xcd, 0xf7, 0x2a, 0xdb,
	0xa0, 0xb3, 0xeb, 0x5e, 0xa5, 0x34, 0x46, 0x67, 0x7a, 0x95, 0xab, 0x23, 0xaf, 0xd1, 0xab, 0xda,
	0xb0, 0x6e, 0xbc, 0xca, 0x18, 0x41, 0xde, 0xa7, 0xd6, 0x74, 0x48, 0xed, 0xc9, 0x56, 0x70, 0xeb,
	0xa7, 0x02, 0xd4, 0x26, 0xf5, 0x3a, 0xe7, 0xa7, 0x4e, 0xae, 0x49, 0x5a, 0x9a, 0x6e, 0x92, 0xb6,
	0xa1, 0x6a, 0xb5, 0x91, 0xda, 0xd1, 0x64, 0xac, 0x32, 0x03, 0x7a, 0x9a, 0x50, 0x9f, 0xca, 0x71,
	0x6a, 0x48, 0x57, 0x80, 0x5a, 0x4d, 0x6f, 0x28, 0x35, 0x23, 0x33, 0x50, 0x3f, 0x9f, 0x44, 0x40,
	0xa3, 0x08, 0x0f, 0x4d, 0xcf, 0x55, 0xd6, 0x5b, 0xaf, 0x5b, 0x4c, 0x59, 0xd9, 0x0e, 0xd4, 0xcc,
	0x4b, 0xda, 0x9e, 0xac, 0xe8, 0x56, 0x35, 0xd0, 0x8d, 0x44, 0xf7, 0xe0, 0xc7, 0x8b, 0x66, 0xe1,
	0xc5, 0x45, 0xb3, 0xf0, 0xeb, 0x45, 0xb3, 0xf0, 0xfc, 0xb2, 0x79, 0xeb, 0xc5, 0x65, 0xf3, 0xd6,
	0xcf, 0x97, 0xcd, 0x5b, 0xdf, 0x74, 0x86, 0x54, 0x06, 0xb8, 0xd7, 0xee, 0xf3, 0xb0, 0x23, 0x4f,
	0x78, 0xdc, 0x3f, 0xc1, 0x94, 0xe9, 0x27, 0xc6, 0x7d, 0xd2, 0x39, 0xcf, 0x82, 0x4a, 0xc8, 0xbd,
	0xb2, 0xfe, 0x33, 0xf5, 0xbb, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x60, 0xfb, 0x1f, 0x3d, 0xff,
	0x16, 0x00, 0x00,
}

func (m *QueryQuoteSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AffiliateBps) > 0 {
		i -= len(m.AffiliateBps)
		copy(dAtA[i:], m.AffiliateBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.AffiliateBps)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Affiliate) > 0 {
		i -= len(m.Affiliate)
		copy(dAtA[i:], m.Affiliate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Affiliate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ToleranceBps) > 0 {
		i -= len(m.ToleranceBps)
		copy(dAtA[i:], m.ToleranceBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ToleranceBps)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StreamingQuantity) > 0 {
		i -= len(m.StreamingQuantity)
		copy(dAtA[i:], m.StreamingQuantity)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.StreamingQuantity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StreamingInterval) > 0 {
		i -= len(m.StreamingInterval)
		copy(dAtA[i:], m.StreamingInterval)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.StreamingInterval)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAsset) > 0 {
		i -= len(m.ToAsset)
		copy(dAtA[i:], m.ToAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ToAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAsset) > 0 {
		i -= len(m.FromAsset)
		copy(dAtA[i:], m.FromAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.FromAsset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSwapSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.TotalSwapSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.StreamingSwapSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.StreamingSwapBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxStreamingQuantity != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.MaxStreamingQuantity))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ExpectedAmountOut) > 0 {
		i -= len(m.ExpectedAmountOut)
		copy(dAtA[i:], m.ExpectedAmountOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountOut)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RecommendedGasRate) > 0 {
		i -= len(m.RecommendedGasRate)
		copy(dAtA[i:], m.RecommendedGasRate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedGasRate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RecommendedMinAmountIn) > 0 {
		i -= len(m.RecommendedMinAmountIn)
		copy(dAtA[i:], m.RecommendedMinAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedMinAmountIn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Expiry != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryQuotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OutboundDelaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundDelayBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelayBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundConfirmationSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InboundConfirmationBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InboundAddress) > 0 {
		i -= len(m.InboundAddress)
		copy(dAtA[i:], m.InboundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.InboundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteSaverDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSaverDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSaverDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AffiliateBps) > 0 {
		i -= len(m.AffiliateBps)
		copy(dAtA[i:], m.AffiliateBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.AffiliateBps)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Affiliate) > 0 {
		i -= len(m.Affiliate)
		copy(dAtA[i:], m.Affiliate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Affiliate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteSaverDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSaverDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSaverDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedAmountDeposit) > 0 {
		i -= len(m.ExpectedAmountDeposit)
		copy(dAtA[i:], m.ExpectedAmountDeposit)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountDeposit)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ExpectedAmountOut) > 0 {
		i -= len(m.ExpectedAmountOut)
		copy(dAtA[i:], m.ExpectedAmountOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountOut)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RecommendedGasRate) > 0 {
		i -= len(m.RecommendedGasRate)
		copy(dAtA[i:], m.RecommendedGasRate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedGasRate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RecommendedMinAmountIn) > 0 {
		i -= len(m.RecommendedMinAmountIn)
		copy(dAtA[i:], m.RecommendedMinAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedMinAmountIn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Expiry != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryQuotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OutboundDelaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundDelayBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelayBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundConfirmationSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InboundConfirmationBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InboundAddress) > 0 {
		i -= len(m.InboundAddress)
		copy(dAtA[i:], m.InboundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.InboundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteSaverWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSaverWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSaverWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawBps) > 0 {
		i -= len(m.WithdrawBps)
		copy(dAtA[i:], m.WithdrawBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.WithdrawBps)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteSaverWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteSaverWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteSaverWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedAmountOut) > 0 {
		i -= len(m.ExpectedAmountOut)
		copy(dAtA[i:], m.ExpectedAmountOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountOut)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.DustAmount) > 0 {
		i -= len(m.DustAmount)
		copy(dAtA[i:], m.DustAmount)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustAmount)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RecommendedGasRate) > 0 {
		i -= len(m.RecommendedGasRate)
		copy(dAtA[i:], m.RecommendedGasRate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedGasRate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RecommendedMinAmountIn) > 0 {
		i -= len(m.RecommendedMinAmountIn)
		copy(dAtA[i:], m.RecommendedMinAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedMinAmountIn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Expiry != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryQuotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OutboundDelaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundDelayBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelayBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundConfirmationSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InboundConfirmationBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InboundAddress) > 0 {
		i -= len(m.InboundAddress)
		copy(dAtA[i:], m.InboundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.InboundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteLoanOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteLoanOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteLoanOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AffiliateBps) > 0 {
		i -= len(m.AffiliateBps)
		copy(dAtA[i:], m.AffiliateBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.AffiliateBps)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Affiliate) > 0 {
		i -= len(m.Affiliate)
		copy(dAtA[i:], m.Affiliate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Affiliate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MinOut) > 0 {
		i -= len(m.MinOut)
		copy(dAtA[i:], m.MinOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.MinOut)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAsset) > 0 {
		i -= len(m.ToAsset)
		copy(dAtA[i:], m.ToAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ToAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAsset) > 0 {
		i -= len(m.FromAsset)
		copy(dAtA[i:], m.FromAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.FromAsset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteLoanOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteLoanOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteLoanOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalOpenLoanSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.TotalOpenLoanSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.StreamingSwapSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.StreamingSwapBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ExpectedDebtIssued) > 0 {
		i -= len(m.ExpectedDebtIssued)
		copy(dAtA[i:], m.ExpectedDebtIssued)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedDebtIssued)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExpectedCollateralDeposited) > 0 {
		i -= len(m.ExpectedCollateralDeposited)
		copy(dAtA[i:], m.ExpectedCollateralDeposited)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedCollateralDeposited)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ExpectedCollateralizationRatio) > 0 {
		i -= len(m.ExpectedCollateralizationRatio)
		copy(dAtA[i:], m.ExpectedCollateralizationRatio)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedCollateralizationRatio)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ExpectedAmountOut) > 0 {
		i -= len(m.ExpectedAmountOut)
		copy(dAtA[i:], m.ExpectedAmountOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountOut)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RecommendedGasRate) > 0 {
		i -= len(m.RecommendedGasRate)
		copy(dAtA[i:], m.RecommendedGasRate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedGasRate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RecommendedMinAmountIn) > 0 {
		i -= len(m.RecommendedMinAmountIn)
		copy(dAtA[i:], m.RecommendedMinAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedMinAmountIn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Expiry != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryQuotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OutboundDelaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundDelayBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelayBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundConfirmationSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InboundConfirmationBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InboundAddress) > 0 {
		i -= len(m.InboundAddress)
		copy(dAtA[i:], m.InboundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.InboundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteLoanCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteLoanCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteLoanCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoanOwner) > 0 {
		i -= len(m.LoanOwner)
		copy(dAtA[i:], m.LoanOwner)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.LoanOwner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RepayBps) > 0 {
		i -= len(m.RepayBps)
		copy(dAtA[i:], m.RepayBps)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RepayBps)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MinOut) > 0 {
		i -= len(m.MinOut)
		copy(dAtA[i:], m.MinOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.MinOut)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAsset) > 0 {
		i -= len(m.ToAsset)
		copy(dAtA[i:], m.ToAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ToAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAsset) > 0 {
		i -= len(m.FromAsset)
		copy(dAtA[i:], m.FromAsset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.FromAsset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQuoteLoanCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQuoteLoanCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQuoteLoanCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalRepaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.TotalRepaySeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.StreamingSwapSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.StreamingSwapBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.StreamingSwapBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ExpectedDebtRepaid) > 0 {
		i -= len(m.ExpectedDebtRepaid)
		copy(dAtA[i:], m.ExpectedDebtRepaid)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedDebtRepaid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExpectedCollateralWithdrawn) > 0 {
		i -= len(m.ExpectedCollateralWithdrawn)
		copy(dAtA[i:], m.ExpectedCollateralWithdrawn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedCollateralWithdrawn)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ExpectedAmountIn) > 0 {
		i -= len(m.ExpectedAmountIn)
		copy(dAtA[i:], m.ExpectedAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountIn)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ExpectedAmountOut) > 0 {
		i -= len(m.ExpectedAmountOut)
		copy(dAtA[i:], m.ExpectedAmountOut)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.ExpectedAmountOut)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.GasRateUnits) > 0 {
		i -= len(m.GasRateUnits)
		copy(dAtA[i:], m.GasRateUnits)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.GasRateUnits)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RecommendedGasRate) > 0 {
		i -= len(m.RecommendedGasRate)
		copy(dAtA[i:], m.RecommendedGasRate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedGasRate)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RecommendedMinAmountIn) > 0 {
		i -= len(m.RecommendedMinAmountIn)
		copy(dAtA[i:], m.RecommendedMinAmountIn)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.RecommendedMinAmountIn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DustThreshold) > 0 {
		i -= len(m.DustThreshold)
		copy(dAtA[i:], m.DustThreshold)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.DustThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Expiry != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryQuotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OutboundDelaySeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.OutboundDelayBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.OutboundDelayBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.InboundConfirmationSeconds != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationSeconds))
		i--
		dAtA[i] = 0x18
	}
	if m.InboundConfirmationBlocks != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.InboundConfirmationBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InboundAddress) > 0 {
		i -= len(m.InboundAddress)
		copy(dAtA[i:], m.InboundAddress)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.InboundAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalBps != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.TotalBps))
		i--
		dAtA[i] = 0x38
	}
	if m.SlippageBps != 0 {
		i = encodeVarintQueryQuotes(dAtA, i, uint64(m.SlippageBps))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Liquidity) > 0 {
		i -= len(m.Liquidity)
		copy(dAtA[i:], m.Liquidity)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Liquidity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outbound) > 0 {
		i -= len(m.Outbound)
		copy(dAtA[i:], m.Outbound)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Outbound)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Affiliate) > 0 {
		i -= len(m.Affiliate)
		copy(dAtA[i:], m.Affiliate)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Affiliate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryQuotes(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryQuotes(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryQuotes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryQuoteSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ToAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.StreamingInterval)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.StreamingQuantity)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ToleranceBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Affiliate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.AffiliateBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.InboundConfirmationBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationBlocks))
	}
	if m.InboundConfirmationSeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationSeconds))
	}
	if m.OutboundDelayBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelayBlocks))
	}
	if m.OutboundDelaySeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelaySeconds))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovQueryQuotes(uint64(m.Expiry))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedMinAmountIn)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedGasRate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountOut)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	if m.MaxStreamingQuantity != 0 {
		n += 2 + sovQueryQuotes(uint64(m.MaxStreamingQuantity))
	}
	if m.StreamingSwapBlocks != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapBlocks))
	}
	if m.StreamingSwapSeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapSeconds))
	}
	if m.TotalSwapSeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.TotalSwapSeconds))
	}
	return n
}

func (m *QueryQuoteSaverDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Affiliate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.AffiliateBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteSaverDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.InboundConfirmationBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationBlocks))
	}
	if m.InboundConfirmationSeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationSeconds))
	}
	if m.OutboundDelayBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelayBlocks))
	}
	if m.OutboundDelaySeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelaySeconds))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovQueryQuotes(uint64(m.Expiry))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedMinAmountIn)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedGasRate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountOut)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountDeposit)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteSaverWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.WithdrawBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteSaverWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.InboundConfirmationBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationBlocks))
	}
	if m.InboundConfirmationSeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationSeconds))
	}
	if m.OutboundDelayBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelayBlocks))
	}
	if m.OutboundDelaySeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelaySeconds))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovQueryQuotes(uint64(m.Expiry))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedMinAmountIn)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedGasRate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustAmount)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountOut)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteLoanOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ToAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.MinOut)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Affiliate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.AffiliateBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteLoanOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.InboundConfirmationBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationBlocks))
	}
	if m.InboundConfirmationSeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationSeconds))
	}
	if m.OutboundDelayBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelayBlocks))
	}
	if m.OutboundDelaySeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelaySeconds))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovQueryQuotes(uint64(m.Expiry))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedMinAmountIn)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedGasRate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountOut)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedCollateralizationRatio)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedCollateralDeposited)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedDebtIssued)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	if m.StreamingSwapBlocks != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapBlocks))
	}
	if m.StreamingSwapSeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapSeconds))
	}
	if m.TotalOpenLoanSeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.TotalOpenLoanSeconds))
	}
	return n
}

func (m *QueryQuoteLoanCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ToAsset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.MinOut)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RepayBps)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.LoanOwner)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	return n
}

func (m *QueryQuoteLoanCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InboundAddress)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.InboundConfirmationBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationBlocks))
	}
	if m.InboundConfirmationSeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.InboundConfirmationSeconds))
	}
	if m.OutboundDelayBlocks != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelayBlocks))
	}
	if m.OutboundDelaySeconds != 0 {
		n += 1 + sovQueryQuotes(uint64(m.OutboundDelaySeconds))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovQueryQuotes(uint64(m.Expiry))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.DustThreshold)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedMinAmountIn)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.RecommendedGasRate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.GasRateUnits)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountOut)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedAmountIn)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedCollateralWithdrawn)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.ExpectedDebtRepaid)
	if l > 0 {
		n += 2 + l + sovQueryQuotes(uint64(l))
	}
	if m.StreamingSwapBlocks != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapBlocks))
	}
	if m.StreamingSwapSeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.StreamingSwapSeconds))
	}
	if m.TotalRepaySeconds != 0 {
		n += 2 + sovQueryQuotes(uint64(m.TotalRepaySeconds))
	}
	return n
}

func (m *QuoteFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Affiliate)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Outbound)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Liquidity)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovQueryQuotes(uint64(l))
	}
	if m.SlippageBps != 0 {
		n += 1 + sovQueryQuotes(uint64(m.SlippageBps))
	}
	if m.TotalBps != 0 {
		n += 1 + sovQueryQuotes(uint64(m.TotalBps))
	}
	return n
}

func sovQueryQuotes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryQuotes(x uint64) (n int) {
	return sovQueryQuotes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryQuoteSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamingQuantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToleranceBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToleranceBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationBlocks", wireType)
			}
			m.InboundConfirmationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationSeconds", wireType)
			}
			m.InboundConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelayBlocks", wireType)
			}
			m.OutboundDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelaySeconds", wireType)
			}
			m.OutboundDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &QuoteFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedMinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedMinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedGasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedGasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStreamingQuantity", wireType)
			}
			m.MaxStreamingQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStreamingQuantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapBlocks", wireType)
			}
			m.StreamingSwapBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapSeconds", wireType)
			}
			m.StreamingSwapSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSwapSeconds", wireType)
			}
			m.TotalSwapSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSwapSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteSaverDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSaverDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSaverDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteSaverDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSaverDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSaverDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationBlocks", wireType)
			}
			m.InboundConfirmationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationSeconds", wireType)
			}
			m.InboundConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelayBlocks", wireType)
			}
			m.OutboundDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelaySeconds", wireType)
			}
			m.OutboundDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &QuoteFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedMinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedMinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedGasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedGasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteSaverWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSaverWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSaverWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteSaverWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteSaverWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteSaverWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationBlocks", wireType)
			}
			m.InboundConfirmationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationSeconds", wireType)
			}
			m.InboundConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelayBlocks", wireType)
			}
			m.OutboundDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelaySeconds", wireType)
			}
			m.OutboundDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &QuoteFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedMinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedMinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedGasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedGasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteLoanOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteLoanOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteLoanOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteLoanOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteLoanOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteLoanOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationBlocks", wireType)
			}
			m.InboundConfirmationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationSeconds", wireType)
			}
			m.InboundConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelayBlocks", wireType)
			}
			m.OutboundDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelaySeconds", wireType)
			}
			m.OutboundDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &QuoteFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedMinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedMinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedGasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedGasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCollateralizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedCollateralizationRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCollateralDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedCollateralDeposited = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedDebtIssued", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedDebtIssued = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapBlocks", wireType)
			}
			m.StreamingSwapBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapSeconds", wireType)
			}
			m.StreamingSwapSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpenLoanSeconds", wireType)
			}
			m.TotalOpenLoanSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOpenLoanSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteLoanCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteLoanCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteLoanCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepayBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepayBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoanOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQuoteLoanCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQuoteLoanCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQuoteLoanCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationBlocks", wireType)
			}
			m.InboundConfirmationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationSeconds", wireType)
			}
			m.InboundConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelayBlocks", wireType)
			}
			m.OutboundDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelaySeconds", wireType)
			}
			m.OutboundDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &QuoteFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedMinAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedMinAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedGasRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedGasRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRateUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasRateUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedAmountIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCollateralWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedCollateralWithdrawn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedDebtRepaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedDebtRepaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapBlocks", wireType)
			}
			m.StreamingSwapBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwapSeconds", wireType)
			}
			m.StreamingSwapSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamingSwapSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRepaySeconds", wireType)
			}
			m.TotalRepaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRepaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affiliate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affiliate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outbound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outbound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageBps", wireType)
			}
			m.SlippageBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageBps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBps", wireType)
			}
			m.TotalBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryQuotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryQuotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryQuotes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryQuotes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryQuotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryQuotes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryQuotes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryQuotes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryQuotes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryQuotes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryQuotes = fmt.Errorf("proto: unexpected end of group")
)
