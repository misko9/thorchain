// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_trade_account.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradeAccount struct {
	Asset              common.Asset                                  `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	Units              cosmossdk_io_math.Uint                        `protobuf:"bytes,2,opt,name=units,proto3,customtype=cosmossdk.io/math.Uint" json:"units"`
	Owner              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	LastAddHeight      int64                                         `protobuf:"varint,4,opt,name=last_add_height,json=lastAddHeight,proto3" json:"last_add_height,omitempty"`
	LastWithdrawHeight int64                                         `protobuf:"varint,5,opt,name=last_withdraw_height,json=lastWithdrawHeight,proto3" json:"last_withdraw_height,omitempty"`
}

func (m *TradeAccount) Reset()         { *m = TradeAccount{} }
func (m *TradeAccount) String() string { return proto.CompactTextString(m) }
func (*TradeAccount) ProtoMessage()    {}
func (*TradeAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dec3a28ee06bd4, []int{0}
}
func (m *TradeAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeAccount.Merge(m, src)
}
func (m *TradeAccount) XXX_Size() int {
	return m.Size()
}
func (m *TradeAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeAccount.DiscardUnknown(m)
}

var xxx_messageInfo_TradeAccount proto.InternalMessageInfo

func (m *TradeAccount) GetAsset() common.Asset {
	if m != nil {
		return m.Asset
	}
	return common.Asset{}
}

func (m *TradeAccount) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TradeAccount) GetLastAddHeight() int64 {
	if m != nil {
		return m.LastAddHeight
	}
	return 0
}

func (m *TradeAccount) GetLastWithdrawHeight() int64 {
	if m != nil {
		return m.LastWithdrawHeight
	}
	return 0
}

type TradeUnit struct {
	Asset common.Asset           `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	Units cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=units,proto3,customtype=cosmossdk.io/math.Uint" json:"units"`
	Depth cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=depth,proto3,customtype=cosmossdk.io/math.Uint" json:"depth"`
}

func (m *TradeUnit) Reset()         { *m = TradeUnit{} }
func (m *TradeUnit) String() string { return proto.CompactTextString(m) }
func (*TradeUnit) ProtoMessage()    {}
func (*TradeUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dec3a28ee06bd4, []int{1}
}
func (m *TradeUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeUnit.Merge(m, src)
}
func (m *TradeUnit) XXX_Size() int {
	return m.Size()
}
func (m *TradeUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeUnit.DiscardUnknown(m)
}

var xxx_messageInfo_TradeUnit proto.InternalMessageInfo

func (m *TradeUnit) GetAsset() common.Asset {
	if m != nil {
		return m.Asset
	}
	return common.Asset{}
}

func init() {
	proto.RegisterType((*TradeAccount)(nil), "types.TradeAccount")
	proto.RegisterType((*TradeUnit)(nil), "types.TradeUnit")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_trade_account.proto", fileDescriptor_68dec3a28ee06bd4)
}

var fileDescriptor_68dec3a28ee06bd4 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xc1, 0x6a, 0xdb, 0x30,
	0x1c, 0xc6, 0xad, 0x24, 0x1e, 0x44, 0x4b, 0x18, 0x98, 0x30, 0x4c, 0x0e, 0x8e, 0xc9, 0x61, 0x78,
	0x87, 0xd8, 0xcb, 0x16, 0xd8, 0xd9, 0xbe, 0x6c, 0xbb, 0x9a, 0x85, 0xc1, 0x2e, 0x46, 0xb1, 0x84,
	0x25, 0x12, 0x4b, 0xc1, 0x52, 0x9a, 0xf6, 0x2d, 0x4a, 0x1f, 0xa1, 0x4f, 0x93, 0x63, 0x8e, 0xa5,
	0x87, 0x50, 0x92, 0xb7, 0xe8, 0xa9, 0x58, 0x72, 0x69, 0x4b, 0x2f, 0x3d, 0xf5, 0x62, 0xc9, 0xdf,
	0xf7, 0xfb, 0xfe, 0x82, 0x8f, 0x3f, 0xfc, 0xa9, 0xa8, 0xa8, 0x72, 0x8a, 0x18, 0x8f, 0xce, 0xa6,
	0xd1, 0x79, 0xf4, 0xf4, 0xab, 0x2e, 0xd6, 0x44, 0xea, 0x6f, 0xa6, 0x2a, 0x84, 0x49, 0x86, 0xf2,
	0x5c, 0x6c, 0xb8, 0x0a, 0xd7, 0x95, 0x50, 0xc2, 0xb1, 0xb5, 0x3f, 0xf4, 0x5f, 0xe4, 0x73, 0x51,
	0x96, 0x82, 0x37, 0x87, 0x01, 0x87, 0x83, 0x42, 0x14, 0x42, 0x5f, 0xa3, 0xfa, 0x66, 0xd4, 0xf1,
	0x55, 0x0b, 0xf6, 0xfe, 0xd6, 0x63, 0x63, 0x33, 0xd5, 0xf9, 0x0a, 0x6d, 0x24, 0x25, 0x51, 0x2e,
	0xf0, 0x41, 0xf0, 0xf1, 0x7b, 0x3f, 0x6c, 0x86, 0xc4, 0xb5, 0x98, 0x74, 0x76, 0x87, 0x91, 0x95,
	0x1a, 0xc2, 0x99, 0x41, 0x7b, 0xc3, 0x99, 0x92, 0x6e, 0xcb, 0x07, 0x41, 0x37, 0xf1, 0x6a, 0xef,
	0xf6, 0x30, 0xfa, 0x9c, 0x0b, 0x59, 0x0a, 0x29, 0xf1, 0x32, 0x64, 0x22, 0x2a, 0x91, 0xa2, 0xe1,
	0x9c, 0x71, 0x95, 0x1a, 0xd8, 0xf9, 0x05, 0x6d, 0xb1, 0xe5, 0xa4, 0x72, 0xdb, 0x3e, 0x08, 0x7a,
	0xc9, 0xf4, 0xfe, 0x30, 0x9a, 0x14, 0x4c, 0xd1, 0xcd, 0xa2, 0x7e, 0x2a, 0x32, 0xe1, 0xe6, 0x98,
	0x48, 0xbc, 0x34, 0x05, 0x84, 0x71, 0x9e, 0xc7, 0x18, 0x57, 0x44, 0xca, 0xd4, 0xe4, 0x9d, 0x2f,
	0xf0, 0xd3, 0x0a, 0x49, 0x95, 0x21, 0x8c, 0x33, 0x4a, 0x58, 0x41, 0x95, 0xdb, 0xf1, 0x41, 0xd0,
	0x4e, 0xfb, 0xb5, 0x1c, 0x63, 0xfc, 0x5b, 0x8b, 0xce, 0x37, 0x38, 0xd0, 0xdc, 0x96, 0x29, 0x8a,
	0x2b, 0xb4, 0x7d, 0x84, 0x6d, 0x0d, 0x3b, 0xb5, 0xf7, 0xaf, 0xb1, 0x4c, 0x62, 0x7c, 0x0d, 0x60,
	0x57, 0x97, 0x32, 0xe7, 0xec, 0x1d, 0x1a, 0x99, 0x41, 0x1b, 0x93, 0xb5, 0xa2, 0xba, 0x91, 0x37,
	0xa4, 0x34, 0x9c, 0xfc, 0xd9, 0x1d, 0x3d, 0xb0, 0x3f, 0x7a, 0xe0, 0xee, 0xe8, 0x81, 0xcb, 0x93,
	0x67, 0xed, 0x4f, 0x9e, 0x75, 0x73, 0xf2, 0xac, 0xff, 0x51, 0xc1, 0xd4, 0x0a, 0x99, 0x3a, 0x9f,
	0xed, 0x11, 0x15, 0x15, 0x17, 0x98, 0xbc, 0x5e, 0xae, 0xc5, 0x07, 0xbd, 0x0b, 0x3f, 0x1e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x25, 0x94, 0xfc, 0x85, 0x02, 0x00, 0x00,
}

func (m *TradeAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastWithdrawHeight != 0 {
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(m.LastWithdrawHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LastAddHeight != 0 {
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(m.LastAddHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TradeUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Depth) > 0 {
		i -= len(m.Depth)
		copy(dAtA[i:], m.Depth)
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(len(m.Depth)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeTradeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeTradeAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeTradeAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovTypeTradeAccount(uint64(l))
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovTypeTradeAccount(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypeTradeAccount(uint64(l))
	}
	if m.LastAddHeight != 0 {
		n += 1 + sovTypeTradeAccount(uint64(m.LastAddHeight))
	}
	if m.LastWithdrawHeight != 0 {
		n += 1 + sovTypeTradeAccount(uint64(m.LastWithdrawHeight))
	}
	return n
}

func (m *TradeUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovTypeTradeAccount(uint64(l))
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovTypeTradeAccount(uint64(l))
	}
	l = len(m.Depth)
	if l > 0 {
		n += 1 + l + sovTypeTradeAccount(uint64(l))
	}
	return n
}

func sovTypeTradeAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeTradeAccount(x uint64) (n int) {
	return sovTypeTradeAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTradeAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = cosmossdk_io_math.Uint(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAddHeight", wireType)
			}
			m.LastAddHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAddHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawHeight", wireType)
			}
			m.LastWithdrawHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTradeAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTradeAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = cosmossdk_io_math.Uint(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depth = cosmossdk_io_math.Uint(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTradeAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeTradeAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeTradeAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeTradeAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTradeAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeTradeAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeTradeAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeTradeAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeTradeAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeTradeAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeTradeAccount = fmt.Errorf("proto: unexpected end of group")
)
