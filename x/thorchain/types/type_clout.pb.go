// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_clout.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SwapperClout struct {
	Address           gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"address,omitempty"`
	Score             cosmossdk_io_math.Uint                       `protobuf:"bytes,2,opt,name=score,proto3,customtype=cosmossdk.io/math.Uint" json:"score"`
	Reclaimed         cosmossdk_io_math.Uint                       `protobuf:"bytes,3,opt,name=reclaimed,proto3,customtype=cosmossdk.io/math.Uint" json:"reclaimed"`
	Spent             cosmossdk_io_math.Uint                       `protobuf:"bytes,4,opt,name=spent,proto3,customtype=cosmossdk.io/math.Uint" json:"spent"`
	LastSpentHeight   int64                                        `protobuf:"varint,5,opt,name=last_spent_height,json=lastSpentHeight,proto3" json:"last_spent_height,omitempty"`
	LastReclaimHeight int64                                        `protobuf:"varint,6,opt,name=last_reclaim_height,json=lastReclaimHeight,proto3" json:"last_reclaim_height,omitempty"`
}

func (m *SwapperClout) Reset()         { *m = SwapperClout{} }
func (m *SwapperClout) String() string { return proto.CompactTextString(m) }
func (*SwapperClout) ProtoMessage()    {}
func (*SwapperClout) Descriptor() ([]byte, []int) {
	return fileDescriptor_abdf82d1027117eb, []int{0}
}
func (m *SwapperClout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapperClout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapperClout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapperClout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapperClout.Merge(m, src)
}
func (m *SwapperClout) XXX_Size() int {
	return m.Size()
}
func (m *SwapperClout) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapperClout.DiscardUnknown(m)
}

var xxx_messageInfo_SwapperClout proto.InternalMessageInfo

func (m *SwapperClout) GetAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SwapperClout) GetLastSpentHeight() int64 {
	if m != nil {
		return m.LastSpentHeight
	}
	return 0
}

func (m *SwapperClout) GetLastReclaimHeight() int64 {
	if m != nil {
		return m.LastReclaimHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*SwapperClout)(nil), "types.SwapperClout")
}

func init() { proto.RegisterFile("types/type_clout.proto", fileDescriptor_abdf82d1027117eb) }

var fileDescriptor_abdf82d1027117eb = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xdb, 0xcd, 0x4d, 0x16, 0x04, 0xb1, 0xca, 0x28, 0x1e, 0xb2, 0xe1, 0x69, 0x88, 0x24,
	0x82, 0x1e, 0xbd, 0x38, 0x2f, 0xea, 0xb1, 0xc3, 0x8b, 0x97, 0x91, 0xa5, 0xa1, 0x0d, 0x36, 0x7d,
	0x25, 0x89, 0xa8, 0xff, 0x85, 0x7f, 0xd6, 0x8e, 0x3b, 0x8a, 0x87, 0x31, 0xd6, 0xff, 0xc2, 0x93,
	0x24, 0x75, 0xe8, 0x49, 0x76, 0x29, 0xaf, 0xdf, 0xfb, 0x7d, 0xdf, 0x07, 0x79, 0xa8, 0x6f, 0xdf,
	0x2a, 0x61, 0xa8, 0xfb, 0x4e, 0x79, 0x01, 0xcf, 0x96, 0x54, 0x1a, 0x2c, 0x44, 0x1d, 0xaf, 0x1f,
	0x1f, 0x65, 0x90, 0x81, 0x57, 0xa8, 0x9b, 0x9a, 0xe5, 0xc9, 0xaa, 0x85, 0xf6, 0x26, 0x2f, 0xac,
	0xaa, 0x84, 0xbe, 0x71, 0x9e, 0xe8, 0x1e, 0xed, 0xb2, 0x34, 0xd5, 0xc2, 0x98, 0x38, 0x1c, 0x86,
	0xa3, 0xde, 0xf8, 0xfc, 0x6b, 0x39, 0x38, 0xcb, 0xa4, 0x2d, 0xd8, 0x8c, 0x70, 0x50, 0xd4, 0xe6,
	0xa0, 0x79, 0xce, 0x64, 0xe9, 0xa7, 0x12, 0x52, 0x41, 0x39, 0x28, 0x05, 0x25, 0xb9, 0x6e, 0x7c,
	0xc9, 0x26, 0x20, 0xba, 0x44, 0x1d, 0xc3, 0x41, 0x8b, 0xb8, 0xe5, 0x93, 0xf0, 0x7c, 0x39, 0x08,
	0x3e, 0x97, 0x83, 0x3e, 0x07, 0xa3, 0xc0, 0x98, 0xf4, 0x89, 0x48, 0xa0, 0x8a, 0xd9, 0x9c, 0x3c,
	0xc8, 0xd2, 0x26, 0x0d, 0x1c, 0x5d, 0xa1, 0x9e, 0x16, 0xbc, 0x60, 0x52, 0x89, 0x34, 0x6e, 0x6f,
	0xe5, 0xfc, 0x35, 0xf8, 0xce, 0x4a, 0x94, 0x36, 0xde, 0xd9, 0xb2, 0xd3, 0xc1, 0xd1, 0x29, 0x3a,
	0x28, 0x98, 0xb1, 0x53, 0xff, 0x37, 0xcd, 0x85, 0xcc, 0x72, 0x1b, 0x77, 0x86, 0xe1, 0xa8, 0x9d,
	0xec, 0xbb, 0xc5, 0xc4, 0xe9, 0xb7, 0x5e, 0x8e, 0x08, 0x3a, 0xf4, 0xec, 0x4f, 0xe7, 0x86, 0xee,
	0x7a, 0xda, 0xc7, 0x24, 0xcd, 0xa6, 0xe1, 0xc7, 0x77, 0xf3, 0x35, 0x0e, 0x17, 0x6b, 0x1c, 0xae,
	0xd6, 0x38, 0x7c, 0xaf, 0x71, 0xb0, 0xa8, 0x71, 0xf0, 0x51, 0xe3, 0xe0, 0x91, 0xfe, 0xff, 0xac,
	0xaf, 0x7f, 0x45, 0x77, 0xc3, 0x59, 0xd7, 0x1f, 0xed, 0xe2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x19,
	0xdf, 0x90, 0xe0, 0xeb, 0x01, 0x00, 0x00,
}

func (m *SwapperClout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapperClout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapperClout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReclaimHeight != 0 {
		i = encodeVarintTypeClout(dAtA, i, uint64(m.LastReclaimHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.LastSpentHeight != 0 {
		i = encodeVarintTypeClout(dAtA, i, uint64(m.LastSpentHeight))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Spent.Size()
		i -= size
		if _, err := m.Spent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeClout(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Reclaimed.Size()
		i -= size
		if _, err := m.Reclaimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeClout(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeClout(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypeClout(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeClout(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeClout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SwapperClout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypeClout(uint64(l))
	}
	l = m.Score.Size()
	n += 1 + l + sovTypeClout(uint64(l))
	l = m.Reclaimed.Size()
	n += 1 + l + sovTypeClout(uint64(l))
	l = m.Spent.Size()
	n += 1 + l + sovTypeClout(uint64(l))
	if m.LastSpentHeight != 0 {
		n += 1 + sovTypeClout(uint64(m.LastSpentHeight))
	}
	if m.LastReclaimHeight != 0 {
		n += 1 + sovTypeClout(uint64(m.LastReclaimHeight))
	}
	return n
}

func sovTypeClout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeClout(x uint64) (n int) {
	return sovTypeClout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SwapperClout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeClout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapperClout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapperClout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeClout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeClout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeClout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeClout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reclaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeClout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeClout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reclaimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeClout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeClout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSpentHeight", wireType)
			}
			m.LastSpentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSpentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReclaimHeight", wireType)
			}
			m.LastReclaimHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReclaimHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeClout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeClout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeClout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeClout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeClout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeClout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeClout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeClout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeClout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeClout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeClout = fmt.Errorf("proto: unexpected end of group")
)
