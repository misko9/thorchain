// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTxStagesRequest struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *QueryTxStagesRequest) Reset()         { *m = QueryTxStagesRequest{} }
func (m *QueryTxStagesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxStagesRequest) ProtoMessage()    {}
func (*QueryTxStagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{0}
}
func (m *QueryTxStagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStagesRequest.Merge(m, src)
}
func (m *QueryTxStagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStagesRequest proto.InternalMessageInfo

func (m *QueryTxStagesRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type QueryTxStagesResponse struct {
	InboundObserved            *InboundObservedStage            `protobuf:"bytes,1,opt,name=inbound_observed,json=inboundObserved,proto3" json:"inbound_observed,omitempty"`
	InboundConfirmationCounted *InboundConfirmationCountedStage `protobuf:"bytes,2,opt,name=inbound_confirmation_counted,json=inboundConfirmationCounted,proto3" json:"inbound_confirmation_counted,omitempty"`
	InboundFinalised           *InboundFinalisedStage           `protobuf:"bytes,3,opt,name=inbound_finalised,json=inboundFinalised,proto3" json:"inbound_finalised,omitempty"`
	SwapStatus                 *SwapStatus                      `protobuf:"bytes,4,opt,name=swap_status,json=swapStatus,proto3" json:"swap_status,omitempty"`
	SwapFinalised              *SwapFinalisedStage              `protobuf:"bytes,5,opt,name=swap_finalised,json=swapFinalised,proto3" json:"swap_finalised,omitempty"`
	OutboundDelay              *OutboundDelayStage              `protobuf:"bytes,6,opt,name=outbound_delay,json=outboundDelay,proto3" json:"outbound_delay,omitempty"`
	OutboundSigned             *OutboundSignedStage             `protobuf:"bytes,7,opt,name=outbound_signed,json=outboundSigned,proto3" json:"outbound_signed,omitempty"`
}

func (m *QueryTxStagesResponse) Reset()         { *m = QueryTxStagesResponse{} }
func (m *QueryTxStagesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxStagesResponse) ProtoMessage()    {}
func (*QueryTxStagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{1}
}
func (m *QueryTxStagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStagesResponse.Merge(m, src)
}
func (m *QueryTxStagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStagesResponse proto.InternalMessageInfo

func (m *QueryTxStagesResponse) GetInboundObserved() *InboundObservedStage {
	if m != nil {
		return m.InboundObserved
	}
	return nil
}

func (m *QueryTxStagesResponse) GetInboundConfirmationCounted() *InboundConfirmationCountedStage {
	if m != nil {
		return m.InboundConfirmationCounted
	}
	return nil
}

func (m *QueryTxStagesResponse) GetInboundFinalised() *InboundFinalisedStage {
	if m != nil {
		return m.InboundFinalised
	}
	return nil
}

func (m *QueryTxStagesResponse) GetSwapStatus() *SwapStatus {
	if m != nil {
		return m.SwapStatus
	}
	return nil
}

func (m *QueryTxStagesResponse) GetSwapFinalised() *SwapFinalisedStage {
	if m != nil {
		return m.SwapFinalised
	}
	return nil
}

func (m *QueryTxStagesResponse) GetOutboundDelay() *OutboundDelayStage {
	if m != nil {
		return m.OutboundDelay
	}
	return nil
}

func (m *QueryTxStagesResponse) GetOutboundSigned() *OutboundSignedStage {
	if m != nil {
		return m.OutboundSigned
	}
	return nil
}

type QueryTxStatusRequest struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *QueryTxStatusRequest) Reset()         { *m = QueryTxStatusRequest{} }
func (m *QueryTxStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxStatusRequest) ProtoMessage()    {}
func (*QueryTxStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{2}
}
func (m *QueryTxStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStatusRequest.Merge(m, src)
}
func (m *QueryTxStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStatusRequest proto.InternalMessageInfo

func (m *QueryTxStatusRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type QueryTxStatusResponse struct {
	Tx            *common.Tx                               `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	PlannedOutTxs []*PlannedOutTx                          `protobuf:"bytes,2,rep,name=planned_out_txs,json=plannedOutTxs,proto3" json:"planned_out_txs,omitempty"`
	OutTxs        gitlab_com_thorchain_thornode_common.Txs `protobuf:"bytes,3,rep,name=out_txs,json=outTxs,proto3,castrepeated=gitlab.com/thorchain/thornode/common.Txs" json:"out_txs"`
	Stages        *QueryTxStagesResponse                   `protobuf:"bytes,4,opt,name=stages,proto3" json:"stages,omitempty"`
}

func (m *QueryTxStatusResponse) Reset()         { *m = QueryTxStatusResponse{} }
func (m *QueryTxStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxStatusResponse) ProtoMessage()    {}
func (*QueryTxStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{3}
}
func (m *QueryTxStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxStatusResponse.Merge(m, src)
}
func (m *QueryTxStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxStatusResponse proto.InternalMessageInfo

func (m *QueryTxStatusResponse) GetTx() *common.Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *QueryTxStatusResponse) GetPlannedOutTxs() []*PlannedOutTx {
	if m != nil {
		return m.PlannedOutTxs
	}
	return nil
}

func (m *QueryTxStatusResponse) GetOutTxs() gitlab_com_thorchain_thornode_common.Txs {
	if m != nil {
		return m.OutTxs
	}
	return nil
}

func (m *QueryTxStatusResponse) GetStages() *QueryTxStagesResponse {
	if m != nil {
		return m.Stages
	}
	return nil
}

type QueryTxRequest struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *QueryTxRequest) Reset()         { *m = QueryTxRequest{} }
func (m *QueryTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxRequest) ProtoMessage()    {}
func (*QueryTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{4}
}
func (m *QueryTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxRequest.Merge(m, src)
}
func (m *QueryTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxRequest proto.InternalMessageInfo

func (m *QueryTxRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type QueryTxResponse struct {
	ObservedTx      *ObservedTx       `protobuf:"bytes,1,opt,name=observed_tx,json=observedTx,proto3" json:"observed_tx,omitempty"`
	ConsensusHeight int64             `protobuf:"varint,2,opt,name=consensus_height,json=consensusHeight,proto3" json:"consensus_height,omitempty"`
	FinalisedHeight int64             `protobuf:"varint,3,opt,name=finalised_height,json=finalisedHeight,proto3" json:"finalised_height,omitempty"`
	OutboundHeight  int64             `protobuf:"varint,4,opt,name=outbound_height,json=outboundHeight,proto3" json:"outbound_height,omitempty"`
	KeysignMetric   *TssKeysignMetric `protobuf:"bytes,5,opt,name=keysign_metric,json=keysignMetric,proto3" json:"keysign_metric,omitempty"`
}

func (m *QueryTxResponse) Reset()         { *m = QueryTxResponse{} }
func (m *QueryTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxResponse) ProtoMessage()    {}
func (*QueryTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{5}
}
func (m *QueryTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxResponse.Merge(m, src)
}
func (m *QueryTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxResponse proto.InternalMessageInfo

func (m *QueryTxResponse) GetObservedTx() *ObservedTx {
	if m != nil {
		return m.ObservedTx
	}
	return nil
}

func (m *QueryTxResponse) GetConsensusHeight() int64 {
	if m != nil {
		return m.ConsensusHeight
	}
	return 0
}

func (m *QueryTxResponse) GetFinalisedHeight() int64 {
	if m != nil {
		return m.FinalisedHeight
	}
	return 0
}

func (m *QueryTxResponse) GetOutboundHeight() int64 {
	if m != nil {
		return m.OutboundHeight
	}
	return 0
}

func (m *QueryTxResponse) GetKeysignMetric() *TssKeysignMetric {
	if m != nil {
		return m.KeysignMetric
	}
	return nil
}

type QueryTxVotersRequest struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *QueryTxVotersRequest) Reset()         { *m = QueryTxVotersRequest{} }
func (m *QueryTxVotersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxVotersRequest) ProtoMessage()    {}
func (*QueryTxVotersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{6}
}
func (m *QueryTxVotersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxVotersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxVotersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxVotersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxVotersRequest.Merge(m, src)
}
func (m *QueryTxVotersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxVotersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxVotersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxVotersRequest proto.InternalMessageInfo

func (m *QueryTxVotersRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type PlannedOutTx struct {
	Chain     string       `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	ToAddress string       `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Coin      *common.Coin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Refund    bool         `protobuf:"varint,4,opt,name=refund,proto3" json:"refund,omitempty"`
}

func (m *PlannedOutTx) Reset()         { *m = PlannedOutTx{} }
func (m *PlannedOutTx) String() string { return proto.CompactTextString(m) }
func (*PlannedOutTx) ProtoMessage()    {}
func (*PlannedOutTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{7}
}
func (m *PlannedOutTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedOutTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedOutTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedOutTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedOutTx.Merge(m, src)
}
func (m *PlannedOutTx) XXX_Size() int {
	return m.Size()
}
func (m *PlannedOutTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedOutTx.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedOutTx proto.InternalMessageInfo

func (m *PlannedOutTx) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *PlannedOutTx) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *PlannedOutTx) GetCoin() *common.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *PlannedOutTx) GetRefund() bool {
	if m != nil {
		return m.Refund
	}
	return false
}

type InboundObservedStage struct {
	Started              bool  `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
	PreConfirmationCount int64 `protobuf:"varint,2,opt,name=pre_confirmation_count,json=preConfirmationCount,proto3" json:"pre_confirmation_count,omitempty"`
	FinalCount           int64 `protobuf:"varint,3,opt,name=final_count,json=finalCount,proto3" json:"final_count,omitempty"`
	Completed            bool  `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *InboundObservedStage) Reset()         { *m = InboundObservedStage{} }
func (m *InboundObservedStage) String() string { return proto.CompactTextString(m) }
func (*InboundObservedStage) ProtoMessage()    {}
func (*InboundObservedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{8}
}
func (m *InboundObservedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundObservedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundObservedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundObservedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundObservedStage.Merge(m, src)
}
func (m *InboundObservedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundObservedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundObservedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundObservedStage proto.InternalMessageInfo

func (m *InboundObservedStage) GetStarted() bool {
	if m != nil {
		return m.Started
	}
	return false
}

func (m *InboundObservedStage) GetPreConfirmationCount() int64 {
	if m != nil {
		return m.PreConfirmationCount
	}
	return 0
}

func (m *InboundObservedStage) GetFinalCount() int64 {
	if m != nil {
		return m.FinalCount
	}
	return 0
}

func (m *InboundObservedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type InboundConfirmationCountedStage struct {
	CountingStartHeight             int64  `protobuf:"varint,1,opt,name=counting_start_height,json=countingStartHeight,proto3" json:"counting_start_height,omitempty"`
	Chain                           string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	ExternalObservedHeight          int64  `protobuf:"varint,3,opt,name=external_observed_height,json=externalObservedHeight,proto3" json:"external_observed_height,omitempty"`
	ExternalConfirmationDelayHeight int64  `protobuf:"varint,4,opt,name=external_confirmation_delay_height,json=externalConfirmationDelayHeight,proto3" json:"external_confirmation_delay_height,omitempty"`
	RemainingConfirmationSeconds    int64  `protobuf:"varint,5,opt,name=remaining_confirmation_seconds,json=remainingConfirmationSeconds,proto3" json:"remaining_confirmation_seconds,omitempty"`
	Completed                       bool   `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *InboundConfirmationCountedStage) Reset()         { *m = InboundConfirmationCountedStage{} }
func (m *InboundConfirmationCountedStage) String() string { return proto.CompactTextString(m) }
func (*InboundConfirmationCountedStage) ProtoMessage()    {}
func (*InboundConfirmationCountedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{9}
}
func (m *InboundConfirmationCountedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundConfirmationCountedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundConfirmationCountedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundConfirmationCountedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundConfirmationCountedStage.Merge(m, src)
}
func (m *InboundConfirmationCountedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundConfirmationCountedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundConfirmationCountedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundConfirmationCountedStage proto.InternalMessageInfo

func (m *InboundConfirmationCountedStage) GetCountingStartHeight() int64 {
	if m != nil {
		return m.CountingStartHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *InboundConfirmationCountedStage) GetExternalObservedHeight() int64 {
	if m != nil {
		return m.ExternalObservedHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetExternalConfirmationDelayHeight() int64 {
	if m != nil {
		return m.ExternalConfirmationDelayHeight
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetRemainingConfirmationSeconds() int64 {
	if m != nil {
		return m.RemainingConfirmationSeconds
	}
	return 0
}

func (m *InboundConfirmationCountedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type InboundFinalisedStage struct {
	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *InboundFinalisedStage) Reset()         { *m = InboundFinalisedStage{} }
func (m *InboundFinalisedStage) String() string { return proto.CompactTextString(m) }
func (*InboundFinalisedStage) ProtoMessage()    {}
func (*InboundFinalisedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{10}
}
func (m *InboundFinalisedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundFinalisedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundFinalisedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundFinalisedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundFinalisedStage.Merge(m, src)
}
func (m *InboundFinalisedStage) XXX_Size() int {
	return m.Size()
}
func (m *InboundFinalisedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundFinalisedStage.DiscardUnknown(m)
}

var xxx_messageInfo_InboundFinalisedStage proto.InternalMessageInfo

func (m *InboundFinalisedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type SwapStatus struct {
	Pending   bool             `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	Streaming *StreamingStatus `protobuf:"bytes,2,opt,name=streaming,proto3" json:"streaming,omitempty"`
}

func (m *SwapStatus) Reset()         { *m = SwapStatus{} }
func (m *SwapStatus) String() string { return proto.CompactTextString(m) }
func (*SwapStatus) ProtoMessage()    {}
func (*SwapStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{11}
}
func (m *SwapStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapStatus.Merge(m, src)
}
func (m *SwapStatus) XXX_Size() int {
	return m.Size()
}
func (m *SwapStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SwapStatus proto.InternalMessageInfo

func (m *SwapStatus) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

func (m *SwapStatus) GetStreaming() *StreamingStatus {
	if m != nil {
		return m.Streaming
	}
	return nil
}

type StreamingStatus struct {
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Count    int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *StreamingStatus) Reset()         { *m = StreamingStatus{} }
func (m *StreamingStatus) String() string { return proto.CompactTextString(m) }
func (*StreamingStatus) ProtoMessage()    {}
func (*StreamingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{12}
}
func (m *StreamingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingStatus.Merge(m, src)
}
func (m *StreamingStatus) XXX_Size() int {
	return m.Size()
}
func (m *StreamingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingStatus proto.InternalMessageInfo

func (m *StreamingStatus) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *StreamingStatus) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *StreamingStatus) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SwapFinalisedStage struct {
	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *SwapFinalisedStage) Reset()         { *m = SwapFinalisedStage{} }
func (m *SwapFinalisedStage) String() string { return proto.CompactTextString(m) }
func (*SwapFinalisedStage) ProtoMessage()    {}
func (*SwapFinalisedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{13}
}
func (m *SwapFinalisedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapFinalisedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapFinalisedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapFinalisedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapFinalisedStage.Merge(m, src)
}
func (m *SwapFinalisedStage) XXX_Size() int {
	return m.Size()
}
func (m *SwapFinalisedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapFinalisedStage.DiscardUnknown(m)
}

var xxx_messageInfo_SwapFinalisedStage proto.InternalMessageInfo

func (m *SwapFinalisedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type OutboundDelayStage struct {
	RemainingDelayBlocks  int64 `protobuf:"varint,1,opt,name=remaining_delay_blocks,json=remainingDelayBlocks,proto3" json:"remaining_delay_blocks,omitempty"`
	RemainingDelaySeconds int64 `protobuf:"varint,2,opt,name=remaining_delay_seconds,json=remainingDelaySeconds,proto3" json:"remaining_delay_seconds,omitempty"`
	Completed             bool  `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *OutboundDelayStage) Reset()         { *m = OutboundDelayStage{} }
func (m *OutboundDelayStage) String() string { return proto.CompactTextString(m) }
func (*OutboundDelayStage) ProtoMessage()    {}
func (*OutboundDelayStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{14}
}
func (m *OutboundDelayStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundDelayStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundDelayStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundDelayStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundDelayStage.Merge(m, src)
}
func (m *OutboundDelayStage) XXX_Size() int {
	return m.Size()
}
func (m *OutboundDelayStage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundDelayStage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundDelayStage proto.InternalMessageInfo

func (m *OutboundDelayStage) GetRemainingDelayBlocks() int64 {
	if m != nil {
		return m.RemainingDelayBlocks
	}
	return 0
}

func (m *OutboundDelayStage) GetRemainingDelaySeconds() int64 {
	if m != nil {
		return m.RemainingDelaySeconds
	}
	return 0
}

func (m *OutboundDelayStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type OutboundSignedStage struct {
	ScheduledOutboundHeight int64 `protobuf:"varint,1,opt,name=scheduled_outbound_height,json=scheduledOutboundHeight,proto3" json:"scheduled_outbound_height,omitempty"`
	BlocksSinceScheduled    int64 `protobuf:"varint,2,opt,name=blocks_since_scheduled,json=blocksSinceScheduled,proto3" json:"blocks_since_scheduled,omitempty"`
	Completed               bool  `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *OutboundSignedStage) Reset()         { *m = OutboundSignedStage{} }
func (m *OutboundSignedStage) String() string { return proto.CompactTextString(m) }
func (*OutboundSignedStage) ProtoMessage()    {}
func (*OutboundSignedStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c005b9edeb76148, []int{15}
}
func (m *OutboundSignedStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundSignedStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundSignedStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundSignedStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundSignedStage.Merge(m, src)
}
func (m *OutboundSignedStage) XXX_Size() int {
	return m.Size()
}
func (m *OutboundSignedStage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundSignedStage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundSignedStage proto.InternalMessageInfo

func (m *OutboundSignedStage) GetScheduledOutboundHeight() int64 {
	if m != nil {
		return m.ScheduledOutboundHeight
	}
	return 0
}

func (m *OutboundSignedStage) GetBlocksSinceScheduled() int64 {
	if m != nil {
		return m.BlocksSinceScheduled
	}
	return 0
}

func (m *OutboundSignedStage) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func init() {
	proto.RegisterType((*QueryTxStagesRequest)(nil), "types.QueryTxStagesRequest")
	proto.RegisterType((*QueryTxStagesResponse)(nil), "types.QueryTxStagesResponse")
	proto.RegisterType((*QueryTxStatusRequest)(nil), "types.QueryTxStatusRequest")
	proto.RegisterType((*QueryTxStatusResponse)(nil), "types.QueryTxStatusResponse")
	proto.RegisterType((*QueryTxRequest)(nil), "types.QueryTxRequest")
	proto.RegisterType((*QueryTxResponse)(nil), "types.QueryTxResponse")
	proto.RegisterType((*QueryTxVotersRequest)(nil), "types.QueryTxVotersRequest")
	proto.RegisterType((*PlannedOutTx)(nil), "types.PlannedOutTx")
	proto.RegisterType((*InboundObservedStage)(nil), "types.InboundObservedStage")
	proto.RegisterType((*InboundConfirmationCountedStage)(nil), "types.InboundConfirmationCountedStage")
	proto.RegisterType((*InboundFinalisedStage)(nil), "types.InboundFinalisedStage")
	proto.RegisterType((*SwapStatus)(nil), "types.SwapStatus")
	proto.RegisterType((*StreamingStatus)(nil), "types.StreamingStatus")
	proto.RegisterType((*SwapFinalisedStage)(nil), "types.SwapFinalisedStage")
	proto.RegisterType((*OutboundDelayStage)(nil), "types.OutboundDelayStage")
	proto.RegisterType((*OutboundSignedStage)(nil), "types.OutboundSignedStage")
}

func init() { proto.RegisterFile("types/query_tx.proto", fileDescriptor_7c005b9edeb76148) }

var fileDescriptor_7c005b9edeb76148 = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x4d, 0x4f, 0x24, 0x45,
	0x18, 0xa6, 0x67, 0x60, 0x80, 0x97, 0x85, 0xd9, 0x2d, 0x06, 0x98, 0x9d, 0xc5, 0x81, 0x4c, 0xa2,
	0x62, 0x4c, 0x18, 0x33, 0xa2, 0x31, 0x9a, 0x18, 0x85, 0xcd, 0x46, 0xb2, 0x31, 0x68, 0x0f, 0x7a,
	0x30, 0x26, 0x9d, 0xa6, 0xbb, 0x98, 0xa9, 0x30, 0x53, 0xd5, 0x74, 0x55, 0xb3, 0xcd, 0xc1, 0x9b,
	0x3f, 0x40, 0xff, 0x81, 0x97, 0xbd, 0xf8, 0x4b, 0xf6, 0xb8, 0x27, 0xe3, 0x49, 0x0d, 0xfc, 0x0e,
	0x13, 0x53, 0x9f, 0x74, 0x0f, 0xe3, 0xec, 0x05, 0xba, 0xde, 0xe7, 0x79, 0x9f, 0xfa, 0x78, 0x9f,
	0x7a, 0x6b, 0xa0, 0x21, 0xae, 0x13, 0xcc, 0xbb, 0x97, 0x19, 0x4e, 0xaf, 0x03, 0x91, 0xef, 0x27,
	0x29, 0x13, 0x0c, 0x2d, 0xa8, 0x68, 0xab, 0x31, 0x60, 0x03, 0xa6, 0x22, 0x5d, 0xf9, 0xa5, 0xc1,
	0xd6, 0x56, 0x31, 0xe5, 0x2a, 0xcc, 0x46, 0xc2, 0x00, 0x4f, 0x34, 0x20, 0xff, 0x06, 0x82, 0xf3,
	0x60, 0x8c, 0x45, 0x4a, 0x22, 0x03, 0x6e, 0x17, 0x40, 0x76, 0xc6, 0x71, 0x7a, 0x85, 0x63, 0x37,
	0xa1, 0xd5, 0xd4, 0xa9, 0x79, 0xc0, 0x32, 0xab, 0xb9, 0x1e, 0xb1, 0xf1, 0x98, 0xd1, 0xae, 0xfe,
	0xa7, 0x83, 0x9d, 0xf7, 0xa1, 0xf1, 0xad, 0x9c, 0xfd, 0x34, 0xef, 0x8b, 0x70, 0x80, 0xb9, 0x8f,
	0x2f, 0x33, 0xcc, 0x05, 0x5a, 0x87, 0x05, 0x91, 0x07, 0x24, 0x6e, 0x7a, 0xbb, 0xde, 0xde, 0xb2,
	0x3f, 0x2f, 0xf2, 0xe3, 0xb8, 0xf3, 0xeb, 0x3c, 0x6c, 0x4c, 0xb0, 0x79, 0xc2, 0x28, 0xc7, 0xe8,
	0x19, 0x3c, 0x24, 0xf4, 0x8c, 0x65, 0x34, 0x76, 0x2b, 0x52, 0x99, 0x2b, 0xbd, 0x27, 0xfb, 0x6a,
	0x3d, 0xfb, 0xc7, 0x1a, 0x3e, 0x31, 0xa8, 0xca, 0xf7, 0xeb, 0xa4, 0x1c, 0x45, 0x43, 0xd8, 0xb6,
	0x3a, 0x11, 0xa3, 0xe7, 0x24, 0x1d, 0x87, 0x82, 0x30, 0x1a, 0x44, 0x2c, 0xa3, 0x02, 0xc7, 0xcd,
	0x8a, 0xd2, 0x7c, 0xa7, 0xac, 0x79, 0x54, 0x60, 0x1e, 0x69, 0xa2, 0x96, 0x6f, 0x91, 0xff, 0x25,
	0xa0, 0x63, 0x78, 0x64, 0x67, 0x3a, 0x27, 0x34, 0x1c, 0x11, 0x8e, 0xe3, 0x66, 0x55, 0xc9, 0x6f,
	0x97, 0xe5, 0x9f, 0x59, 0x58, 0x8b, 0xda, 0x8d, 0xba, 0x30, 0xea, 0xc1, 0x0a, 0x7f, 0x11, 0x26,
	0x01, 0x17, 0xa1, 0xc8, 0x78, 0x73, 0x5e, 0x89, 0x3c, 0x32, 0x22, 0xfd, 0x17, 0x61, 0xd2, 0x57,
	0x80, 0x0f, 0xdc, 0x7d, 0xa3, 0x2f, 0x60, 0x4d, 0xe5, 0xdc, 0xcd, 0xbd, 0xa0, 0xd2, 0x1e, 0x17,
	0xd2, 0x26, 0x26, 0x5e, 0xe5, 0xc5, 0x98, 0x54, 0x60, 0x99, 0xd0, 0x3b, 0x88, 0xf1, 0x28, 0xbc,
	0x6e, 0xd6, 0x4a, 0x0a, 0x27, 0x06, 0x7c, 0x2a, 0x31, 0xa3, 0xc0, 0x8a, 0x31, 0x74, 0x04, 0x75,
	0xa7, 0xc0, 0xc9, 0x80, 0xe2, 0xb8, 0xb9, 0xa8, 0x24, 0x5a, 0x13, 0x12, 0x7d, 0x05, 0x6a, 0x0d,
	0x37, 0xa9, 0x0e, 0x96, 0x0d, 0x24, 0x77, 0x39, 0xcb, 0x40, 0xff, 0x7a, 0x45, 0x03, 0x29, 0xb6,
	0x31, 0x50, 0x0b, 0x2a, 0x22, 0x37, 0x96, 0x81, 0x7d, 0x63, 0xd1, 0xd3, 0xdc, 0xaf, 0x88, 0x1c,
	0x7d, 0x06, 0xf5, 0x64, 0x14, 0x52, 0x8a, 0x63, 0xe9, 0xe6, 0x40, 0xe4, 0xbc, 0x59, 0xd9, 0xad,
	0xee, 0xad, 0xf4, 0xd6, 0xcd, 0x3a, 0xbf, 0xd1, 0xe8, 0x49, 0x26, 0x4e, 0x73, 0x7f, 0x35, 0x29,
	0x8c, 0x38, 0xfa, 0x0e, 0x16, 0x6d, 0x52, 0x55, 0x25, 0x15, 0xd4, 0x0f, 0x3f, 0x78, 0xf5, 0xd7,
	0xce, 0xdc, 0xef, 0x7f, 0xef, 0xec, 0x0d, 0x88, 0x18, 0x85, 0x67, 0x12, 0xe9, 0x8a, 0x21, 0x4b,
	0xa3, 0x61, 0x48, 0xa8, 0xfa, 0xa2, 0x2c, 0xc6, 0x5d, 0x97, 0xc0, 0xfd, 0x1a, 0xd3, 0xb2, 0x07,
	0x50, 0xe3, 0xea, 0x0a, 0x98, 0x72, 0x5b, 0xcf, 0x4c, 0xbd, 0x1e, 0xbe, 0xe1, 0x76, 0xde, 0x86,
	0x35, 0x43, 0x98, 0x79, 0x4c, 0x3f, 0x57, 0xa0, 0xee, 0x78, 0xe6, 0x80, 0x7a, 0xb0, 0x52, 0xb8,
	0xeb, 0xe6, 0xa4, 0xac, 0xc9, 0xec, 0xfd, 0x39, 0xcd, 0x7d, 0x60, 0xee, 0x1b, 0xbd, 0x07, 0x0f,
	0x23, 0x99, 0x4c, 0x79, 0xc6, 0x83, 0x21, 0x26, 0x83, 0xa1, 0x50, 0x37, 0xa8, 0xea, 0xd7, 0x5d,
	0xfc, 0x2b, 0x15, 0x96, 0x54, 0x67, 0x45, 0x4b, 0xad, 0x6a, 0xaa, 0x8b, 0x1b, 0xea, 0xbb, 0x05,
	0xdb, 0x18, 0xe6, 0xbc, 0x62, 0x3a, 0x6b, 0x18, 0xe2, 0xe7, 0xb0, 0x76, 0x81, 0xaf, 0xa5, 0xb3,
	0x4c, 0xff, 0x32, 0x1e, 0xdf, 0x32, 0xab, 0x3e, 0xe5, 0xfc, 0xb9, 0xc6, 0xbf, 0x56, 0xb0, 0xbf,
	0x7a, 0x51, 0x1c, 0x16, 0xac, 0xf5, 0x3d, 0x13, 0x38, 0x9d, 0x6d, 0xad, 0x9f, 0xe0, 0x41, 0xd1,
	0x06, 0xa8, 0x01, 0x0b, 0xaa, 0x8a, 0x86, 0xa4, 0x07, 0xe8, 0x2d, 0x00, 0xc1, 0x82, 0x30, 0x8e,
	0x53, 0xcc, 0xb9, 0x3a, 0x8b, 0x65, 0x7f, 0x59, 0xb0, 0x2f, 0x75, 0x00, 0xed, 0xc2, 0x7c, 0xc4,
	0x08, 0x35, 0x7d, 0xe0, 0x81, 0x75, 0xca, 0x11, 0x23, 0xd4, 0x57, 0x08, 0xda, 0x84, 0x5a, 0x8a,
	0xcf, 0x33, 0x1a, 0xab, 0x3d, 0x2f, 0xf9, 0x66, 0xd4, 0x79, 0xe9, 0x41, 0x63, 0x5a, 0x8b, 0x43,
	0x4d, 0x58, 0xe4, 0x22, 0x4c, 0x85, 0x69, 0x88, 0x4b, 0xbe, 0x1d, 0xa2, 0x03, 0xd8, 0x4c, 0x52,
	0x3c, 0xa5, 0xcf, 0x99, 0x1a, 0x35, 0x92, 0x14, 0xdf, 0xeb, 0x5c, 0x68, 0x07, 0x56, 0x54, 0x41,
	0x0c, 0x55, 0xd7, 0x08, 0x54, 0x48, 0x13, 0xb6, 0x61, 0x39, 0x62, 0xe3, 0x64, 0x84, 0xe5, 0x94,
	0x7a, 0x91, 0x77, 0x81, 0xce, 0x1f, 0x15, 0xd8, 0x79, 0x43, 0xdb, 0x44, 0x3d, 0xd8, 0x50, 0xe2,
	0x84, 0x0e, 0x02, 0xb5, 0x58, 0x5b, 0x66, 0x4f, 0x4d, 0xb6, 0x6e, 0xc1, 0xbe, 0xc4, 0x4c, 0xad,
	0xdd, 0x71, 0x57, 0x8a, 0xc7, 0xfd, 0x09, 0x34, 0x71, 0x2e, 0x70, 0x2a, 0xd7, 0xeb, 0xdc, 0x5b,
	0x72, 0xd7, 0xa6, 0xc5, 0xed, 0xa9, 0x19, 0xbd, 0xe7, 0xd0, 0x71, 0x99, 0xa5, 0x13, 0x52, 0xad,
	0xae, 0xec, 0xbb, 0x1d, 0xcb, 0x2c, 0xee, 0x48, 0xb5, 0x38, 0x23, 0xf6, 0x14, 0xda, 0x29, 0x1e,
	0x87, 0x84, 0xca, 0x1d, 0x95, 0xd4, 0x38, 0x8e, 0x18, 0x8d, 0xb9, 0x32, 0x66, 0xd5, 0xdf, 0x76,
	0xac, 0xa2, 0x52, 0x5f, 0x73, 0xca, 0x07, 0x5b, 0x9b, 0x3c, 0xd8, 0x8f, 0x60, 0x63, 0xea, 0x7b,
	0x51, 0x4e, 0xf3, 0x26, 0xd3, 0x7e, 0x04, 0xb8, 0x7b, 0x21, 0xa4, 0x59, 0x12, 0x4c, 0x63, 0x42,
	0x07, 0xd6, 0x2c, 0x66, 0x88, 0x0e, 0x60, 0x99, 0x8b, 0x14, 0x87, 0x63, 0x89, 0xe9, 0x57, 0x70,
	0xd3, 0x3e, 0x15, 0x36, 0x6e, 0x5a, 0xea, 0x1d, 0xb1, 0x13, 0x40, 0x7d, 0x02, 0x45, 0x2d, 0x58,
	0x22, 0x54, 0xe0, 0xf4, 0x2a, 0x1c, 0x99, 0x7a, 0xba, 0xb1, 0xc4, 0x2e, 0xb3, 0x90, 0x0a, 0x22,
	0xae, 0x8d, 0x07, 0xdd, 0x58, 0x15, 0xb8, 0xe0, 0x38, 0x3d, 0xe8, 0xf4, 0x00, 0xdd, 0x7f, 0xa9,
	0xde, 0xb0, 0xe5, 0xdf, 0x3c, 0x40, 0xf7, 0x1f, 0x27, 0x79, 0x1d, 0xee, 0x8a, 0xa4, 0xab, 0x7c,
	0x36, 0x62, 0xd1, 0x05, 0x37, 0xcb, 0x6c, 0x38, 0x54, 0x25, 0x1d, 0x2a, 0x0c, 0x7d, 0x0c, 0x5b,
	0x93, 0x59, 0xb6, 0xa6, 0x7a, 0x07, 0x1b, 0xe5, 0xb4, 0xa9, 0xc5, 0xac, 0x4e, 0x2e, 0xf1, 0xa5,
	0x07, 0xeb, 0x53, 0x1e, 0x3f, 0xf4, 0x29, 0x3c, 0xe6, 0xd1, 0x10, 0xc7, 0xd9, 0x48, 0xbf, 0x45,
	0xa5, 0x26, 0xa8, 0x97, 0xb9, 0xe5, 0x08, 0x27, 0xe5, 0x6e, 0x78, 0x00, 0x9b, 0x7a, 0x3f, 0x01,
	0x27, 0x34, 0xc2, 0x81, 0xe3, 0xd9, 0xeb, 0xae, 0xd1, 0xbe, 0x04, 0xfb, 0x16, 0x9b, 0xbd, 0xce,
	0xc3, 0xe3, 0x57, 0x37, 0x6d, 0xef, 0xf5, 0x4d, 0xdb, 0xfb, 0xe7, 0xa6, 0xed, 0xfd, 0x72, 0xdb,
	0x9e, 0x7b, 0x7d, 0xdb, 0x9e, 0xfb, 0xf3, 0xb6, 0x3d, 0xf7, 0x43, 0x77, 0xf6, 0x8b, 0x96, 0x17,
	0x83, 0xd2, 0x45, 0x67, 0x35, 0xf5, 0x7b, 0xf0, 0xc3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0x0c, 0x16, 0xbd, 0xc6, 0x0a, 0x00, 0x00,
}

func (m *QueryTxStagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxStagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundSigned != nil {
		{
			size, err := m.OutboundSigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundDelay != nil {
		{
			size, err := m.OutboundDelay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SwapFinalised != nil {
		{
			size, err := m.SwapFinalised.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SwapStatus != nil {
		{
			size, err := m.SwapStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InboundFinalised != nil {
		{
			size, err := m.InboundFinalised.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InboundConfirmationCounted != nil {
		{
			size, err := m.InboundConfirmationCounted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InboundObserved != nil {
		{
			size, err := m.InboundObserved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stages != nil {
		{
			size, err := m.Stages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OutTxs) > 0 {
		for iNdEx := len(m.OutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlannedOutTxs) > 0 {
		for iNdEx := len(m.PlannedOutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlannedOutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeysignMetric != nil {
		{
			size, err := m.KeysignMetric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OutboundHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.OutboundHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.FinalisedHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinalisedHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ConsensusHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ObservedTx != nil {
		{
			size, err := m.ObservedTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxVotersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxVotersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxVotersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlannedOutTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedOutTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedOutTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refund {
		i--
		if m.Refund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InboundObservedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundObservedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundObservedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FinalCount != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.FinalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PreConfirmationCount != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.PreConfirmationCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Started {
		i--
		if m.Started {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InboundConfirmationCountedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundConfirmationCountedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundConfirmationCountedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.RemainingConfirmationSeconds != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingConfirmationSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.ExternalConfirmationDelayHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ExternalConfirmationDelayHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalObservedHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ExternalObservedHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQueryTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if m.CountingStartHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.CountingStartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InboundFinalisedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundFinalisedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundFinalisedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Streaming != nil {
		{
			size, err := m.Streaming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pending {
		i--
		if m.Pending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Quantity != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if m.Interval != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapFinalisedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapFinalisedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapFinalisedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundDelayStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundDelayStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundDelayStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RemainingDelaySeconds != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingDelaySeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.RemainingDelayBlocks != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.RemainingDelayBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutboundSignedStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundSignedStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundSignedStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BlocksSinceScheduled != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.BlocksSinceScheduled))
		i--
		dAtA[i] = 0x10
	}
	if m.ScheduledOutboundHeight != 0 {
		i = encodeVarintQueryTx(dAtA, i, uint64(m.ScheduledOutboundHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTxStagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InboundObserved != nil {
		l = m.InboundObserved.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.InboundConfirmationCounted != nil {
		l = m.InboundConfirmationCounted.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.InboundFinalised != nil {
		l = m.InboundFinalised.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.SwapStatus != nil {
		l = m.SwapStatus.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.SwapFinalised != nil {
		l = m.SwapFinalised.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.OutboundDelay != nil {
		l = m.OutboundDelay.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.OutboundSigned != nil {
		l = m.OutboundSigned.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if len(m.PlannedOutTxs) > 0 {
		for _, e := range m.PlannedOutTxs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if len(m.OutTxs) > 0 {
		for _, e := range m.OutTxs {
			l = e.Size()
			n += 1 + l + sovQueryTx(uint64(l))
		}
	}
	if m.Stages != nil {
		l = m.Stages.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObservedTx != nil {
		l = m.ObservedTx.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.ConsensusHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ConsensusHeight))
	}
	if m.FinalisedHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.FinalisedHeight))
	}
	if m.OutboundHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.OutboundHeight))
	}
	if m.KeysignMetric != nil {
		l = m.KeysignMetric.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *QueryTxVotersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *PlannedOutTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.Refund {
		n += 2
	}
	return n
}

func (m *InboundObservedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Started {
		n += 2
	}
	if m.PreConfirmationCount != 0 {
		n += 1 + sovQueryTx(uint64(m.PreConfirmationCount))
	}
	if m.FinalCount != 0 {
		n += 1 + sovQueryTx(uint64(m.FinalCount))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *InboundConfirmationCountedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountingStartHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.CountingStartHeight))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQueryTx(uint64(l))
	}
	if m.ExternalObservedHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ExternalObservedHeight))
	}
	if m.ExternalConfirmationDelayHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ExternalConfirmationDelayHeight))
	}
	if m.RemainingConfirmationSeconds != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingConfirmationSeconds))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *InboundFinalisedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed {
		n += 2
	}
	return n
}

func (m *SwapStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pending {
		n += 2
	}
	if m.Streaming != nil {
		l = m.Streaming.Size()
		n += 1 + l + sovQueryTx(uint64(l))
	}
	return n
}

func (m *StreamingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovQueryTx(uint64(m.Interval))
	}
	if m.Quantity != 0 {
		n += 1 + sovQueryTx(uint64(m.Quantity))
	}
	if m.Count != 0 {
		n += 1 + sovQueryTx(uint64(m.Count))
	}
	return n
}

func (m *SwapFinalisedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Completed {
		n += 2
	}
	return n
}

func (m *OutboundDelayStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingDelayBlocks != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingDelayBlocks))
	}
	if m.RemainingDelaySeconds != 0 {
		n += 1 + sovQueryTx(uint64(m.RemainingDelaySeconds))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func (m *OutboundSignedStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScheduledOutboundHeight != 0 {
		n += 1 + sovQueryTx(uint64(m.ScheduledOutboundHeight))
	}
	if m.BlocksSinceScheduled != 0 {
		n += 1 + sovQueryTx(uint64(m.BlocksSinceScheduled))
	}
	if m.Completed {
		n += 2
	}
	return n
}

func sovQueryTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTx(x uint64) (n int) {
	return sovQueryTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTxStagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundObserved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundObserved == nil {
				m.InboundObserved = &InboundObservedStage{}
			}
			if err := m.InboundObserved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundConfirmationCounted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundConfirmationCounted == nil {
				m.InboundConfirmationCounted = &InboundConfirmationCountedStage{}
			}
			if err := m.InboundConfirmationCounted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundFinalised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundFinalised == nil {
				m.InboundFinalised = &InboundFinalisedStage{}
			}
			if err := m.InboundFinalised.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapStatus == nil {
				m.SwapStatus = &SwapStatus{}
			}
			if err := m.SwapStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFinalised", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapFinalised == nil {
				m.SwapFinalised = &SwapFinalisedStage{}
			}
			if err := m.SwapFinalised.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundDelay == nil {
				m.OutboundDelay = &OutboundDelayStage{}
			}
			if err := m.OutboundDelay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundSigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundSigned == nil {
				m.OutboundSigned = &OutboundSignedStage{}
			}
			if err := m.OutboundSigned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &common.Tx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedOutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlannedOutTxs = append(m.PlannedOutTxs, &PlannedOutTx{})
			if err := m.PlannedOutTxs[len(m.PlannedOutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxs = append(m.OutTxs, common.Tx{})
			if err := m.OutTxs[len(m.OutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stages == nil {
				m.Stages = &QueryTxStagesResponse{}
			}
			if err := m.Stages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObservedTx == nil {
				m.ObservedTx = &ObservedTx{}
			}
			if err := m.ObservedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHeight", wireType)
			}
			m.ConsensusHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalisedHeight", wireType)
			}
			m.FinalisedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalisedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundHeight", wireType)
			}
			m.OutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeysignMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeysignMetric == nil {
				m.KeysignMetric = &TssKeysignMetric{}
			}
			if err := m.KeysignMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxVotersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxVotersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxVotersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannedOutTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedOutTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedOutTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &common.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refund = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundObservedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundObservedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundObservedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Started = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreConfirmationCount", wireType)
			}
			m.PreConfirmationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreConfirmationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalCount", wireType)
			}
			m.FinalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundConfirmationCountedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundConfirmationCountedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundConfirmationCountedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountingStartHeight", wireType)
			}
			m.CountingStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountingStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalObservedHeight", wireType)
			}
			m.ExternalObservedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalObservedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalConfirmationDelayHeight", wireType)
			}
			m.ExternalConfirmationDelayHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalConfirmationDelayHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingConfirmationSeconds", wireType)
			}
			m.RemainingConfirmationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingConfirmationSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundFinalisedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundFinalisedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundFinalisedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streaming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Streaming == nil {
				m.Streaming = &StreamingStatus{}
			}
			if err := m.Streaming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapFinalisedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapFinalisedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapFinalisedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundDelayStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundDelayStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundDelayStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingDelayBlocks", wireType)
			}
			m.RemainingDelayBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingDelayBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingDelaySeconds", wireType)
			}
			m.RemainingDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingDelaySeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundSignedStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundSignedStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundSignedStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledOutboundHeight", wireType)
			}
			m.ScheduledOutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledOutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksSinceScheduled", wireType)
			}
			m.BlocksSinceScheduled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksSinceScheduled |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTx = fmt.Errorf("proto: unexpected end of group")
)
