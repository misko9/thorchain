// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_streaming_swap.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryStreamingSwapRequest struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *QueryStreamingSwapRequest) Reset()         { *m = QueryStreamingSwapRequest{} }
func (m *QueryStreamingSwapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamingSwapRequest) ProtoMessage()    {}
func (*QueryStreamingSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf92a13f8c506349, []int{0}
}
func (m *QueryStreamingSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamingSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamingSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamingSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamingSwapRequest.Merge(m, src)
}
func (m *QueryStreamingSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamingSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamingSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamingSwapRequest proto.InternalMessageInfo

func (m *QueryStreamingSwapRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type QueryStreamingSwapResponse struct {
	TxId              string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Interval          int64    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Quantity          int64    `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Count             int64    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	LastHeight        int64    `protobuf:"varint,5,opt,name=last_height,json=lastHeight,proto3" json:"last_height,omitempty"`
	TradeTarget       string   `protobuf:"bytes,6,opt,name=trade_target,json=tradeTarget,proto3" json:"trade_target,omitempty"`
	SourceAsset       string   `protobuf:"bytes,7,opt,name=source_asset,json=sourceAsset,proto3" json:"source_asset,omitempty"`
	TargetAsset       string   `protobuf:"bytes,8,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	Destination       string   `protobuf:"bytes,9,opt,name=destination,proto3" json:"destination,omitempty"`
	Deposit           string   `protobuf:"bytes,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	In                string   `protobuf:"bytes,11,opt,name=in,proto3" json:"in,omitempty"`
	Out               string   `protobuf:"bytes,12,opt,name=out,proto3" json:"out,omitempty"`
	FailedSwaps       []int64  `protobuf:"varint,13,rep,packed,name=failed_swaps,json=failedSwaps,proto3" json:"failed_swaps,omitempty"`
	FailedSwapReasons []string `protobuf:"bytes,14,rep,name=failed_swap_reasons,json=failedSwapReasons,proto3" json:"failed_swap_reasons,omitempty"`
}

func (m *QueryStreamingSwapResponse) Reset()         { *m = QueryStreamingSwapResponse{} }
func (m *QueryStreamingSwapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamingSwapResponse) ProtoMessage()    {}
func (*QueryStreamingSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf92a13f8c506349, []int{1}
}
func (m *QueryStreamingSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamingSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamingSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamingSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamingSwapResponse.Merge(m, src)
}
func (m *QueryStreamingSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamingSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamingSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamingSwapResponse proto.InternalMessageInfo

func (m *QueryStreamingSwapResponse) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *QueryStreamingSwapResponse) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *QueryStreamingSwapResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryStreamingSwapResponse) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func (m *QueryStreamingSwapResponse) GetTradeTarget() string {
	if m != nil {
		return m.TradeTarget
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetSourceAsset() string {
	if m != nil {
		return m.SourceAsset
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetTargetAsset() string {
	if m != nil {
		return m.TargetAsset
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func (m *QueryStreamingSwapResponse) GetFailedSwaps() []int64 {
	if m != nil {
		return m.FailedSwaps
	}
	return nil
}

func (m *QueryStreamingSwapResponse) GetFailedSwapReasons() []string {
	if m != nil {
		return m.FailedSwapReasons
	}
	return nil
}

type QueryStreamingSwapsRequest struct {
}

func (m *QueryStreamingSwapsRequest) Reset()         { *m = QueryStreamingSwapsRequest{} }
func (m *QueryStreamingSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamingSwapsRequest) ProtoMessage()    {}
func (*QueryStreamingSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf92a13f8c506349, []int{2}
}
func (m *QueryStreamingSwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamingSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamingSwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamingSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamingSwapsRequest.Merge(m, src)
}
func (m *QueryStreamingSwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamingSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamingSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamingSwapsRequest proto.InternalMessageInfo

type QueryStreamingSwapsResponse struct {
	StreamingSwaps []*QueryStreamingSwapResponse `protobuf:"bytes,1,rep,name=streaming_swaps,json=streamingSwaps,proto3" json:"streaming_swaps,omitempty"`
}

func (m *QueryStreamingSwapsResponse) Reset()         { *m = QueryStreamingSwapsResponse{} }
func (m *QueryStreamingSwapsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamingSwapsResponse) ProtoMessage()    {}
func (*QueryStreamingSwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf92a13f8c506349, []int{3}
}
func (m *QueryStreamingSwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamingSwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamingSwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamingSwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamingSwapsResponse.Merge(m, src)
}
func (m *QueryStreamingSwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamingSwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamingSwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamingSwapsResponse proto.InternalMessageInfo

func (m *QueryStreamingSwapsResponse) GetStreamingSwaps() []*QueryStreamingSwapResponse {
	if m != nil {
		return m.StreamingSwaps
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryStreamingSwapRequest)(nil), "types.QueryStreamingSwapRequest")
	proto.RegisterType((*QueryStreamingSwapResponse)(nil), "types.QueryStreamingSwapResponse")
	proto.RegisterType((*QueryStreamingSwapsRequest)(nil), "types.QueryStreamingSwapsRequest")
	proto.RegisterType((*QueryStreamingSwapsResponse)(nil), "types.QueryStreamingSwapsResponse")
}

func init() { proto.RegisterFile("types/query_streaming_swap.proto", fileDescriptor_bf92a13f8c506349) }

var fileDescriptor_bf92a13f8c506349 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x72, 0xd3, 0x40,
	0x10, 0x86, 0x2d, 0x2b, 0x4e, 0xe2, 0x53, 0x30, 0x70, 0x49, 0x71, 0x18, 0x46, 0x28, 0xae, 0x54,
	0x49, 0x0c, 0x3c, 0x01, 0x54, 0x84, 0x0e, 0x85, 0x8a, 0x46, 0x73, 0xb1, 0x0e, 0xf9, 0x66, 0x9c,
	0x3b, 0x59, 0xbb, 0x22, 0xf6, 0x5b, 0xf0, 0x3c, 0x3c, 0x01, 0x65, 0x4a, 0x4a, 0xc6, 0x7e, 0x11,
	0xe6, 0xf6, 0x6c, 0x70, 0x66, 0x9c, 0x6e, 0xf7, 0xfb, 0xff, 0x5d, 0xdd, 0x68, 0x7f, 0x96, 0xe0,
	0xaa, 0x51, 0x90, 0x2f, 0x3a, 0xd5, 0xae, 0x4a, 0xc0, 0x56, 0xc9, 0x5b, 0x6d, 0xea, 0x12, 0xee,
	0x64, 0x93, 0x35, 0xad, 0x45, 0xcb, 0x07, 0xe4, 0x18, 0x5f, 0xd4, 0xb6, 0xb6, 0x44, 0x72, 0x57,
	0x79, 0x71, 0xf2, 0x86, 0xbd, 0xf8, 0xec, 0x46, 0xaf, 0x77, 0x93, 0xd7, 0x77, 0xb2, 0x29, 0xd4,
	0xa2, 0x53, 0x80, 0xfc, 0x9c, 0x0d, 0x70, 0x59, 0xea, 0x4a, 0x04, 0x49, 0x90, 0x0e, 0x8b, 0x23,
	0x5c, 0x5e, 0x55, 0x93, 0x9f, 0x21, 0x1b, 0x1f, 0x1a, 0x81, 0xc6, 0x1a, 0x50, 0x07, 0x67, 0xf8,
	0x98, 0x9d, 0x6a, 0x83, 0xaa, 0xfd, 0x2e, 0xe7, 0xa2, 0x9f, 0x04, 0x69, 0x58, 0xfc, 0xeb, 0x9d,
	0xb6, 0xe8, 0xa4, 0x41, 0x8d, 0x2b, 0x11, 0x7a, 0x6d, 0xd7, 0xf3, 0x0b, 0x36, 0x98, 0xda, 0xce,
	0xa0, 0x38, 0x22, 0xc1, 0x37, 0xfc, 0x35, 0x8b, 0xe6, 0x12, 0xb0, 0x9c, 0x29, 0x5d, 0xcf, 0x50,
	0x0c, 0x48, 0x63, 0x0e, 0x7d, 0x24, 0xc2, 0x2f, 0xd9, 0x19, 0xb6, 0xb2, 0x52, 0x25, 0xca, 0xb6,
	0x56, 0x28, 0x8e, 0xe9, 0x29, 0x11, 0xb1, 0x2f, 0x84, 0x9c, 0x05, 0x6c, 0xd7, 0x4e, 0x55, 0x29,
	0x01, 0x14, 0x8a, 0x13, 0x6f, 0xf1, 0xec, 0xbd, 0x43, 0xb4, 0x85, 0xcc, 0x5b, 0xcb, 0xe9, 0x76,
	0x0b, 0x31, 0x6f, 0x49, 0x58, 0x54, 0x29, 0x40, 0x6d, 0x24, 0x6a, 0x6b, 0xc4, 0xd0, 0x3b, 0xf6,
	0x10, 0x17, 0xec, 0xa4, 0x52, 0x8d, 0x05, 0x8d, 0x82, 0x91, 0xba, 0x6b, 0xf9, 0x88, 0xf5, 0xb5,
	0x11, 0x11, 0xc1, 0xbe, 0x36, 0xfc, 0x19, 0x0b, 0x6d, 0x87, 0xe2, 0x8c, 0x80, 0x2b, 0xdd, 0x03,
	0xbe, 0x49, 0x3d, 0x57, 0x15, 0x5d, 0x13, 0xc4, 0x93, 0x24, 0x4c, 0xc3, 0x22, 0xf2, 0xcc, 0xfd,
	0x74, 0xe0, 0x19, 0x3b, 0xdf, 0xb3, 0x94, 0xad, 0x92, 0x60, 0x0d, 0x88, 0x51, 0x12, 0xa6, 0xc3,
	0xe2, 0xf9, 0x7f, 0x67, 0xe1, 0x85, 0xc9, 0xab, 0x43, 0xb7, 0x83, 0xed, 0xbd, 0x27, 0x9a, 0xbd,
	0x3c, 0xa8, 0x6e, 0x4f, 0xfb, 0x89, 0x3d, 0x7d, 0x18, 0x30, 0x10, 0x41, 0x12, 0xa6, 0xd1, 0xdb,
	0xcb, 0x8c, 0x22, 0x96, 0x3d, 0x1e, 0x8b, 0x62, 0x04, 0x0f, 0x76, 0x7e, 0xb8, 0xfa, 0xb5, 0x8e,
	0x83, 0xfb, 0x75, 0x1c, 0xfc, 0x59, 0xc7, 0xc1, 0x8f, 0x4d, 0xdc, 0xbb, 0xdf, 0xc4, 0xbd, 0xdf,
	0x9b, 0xb8, 0xf7, 0x35, 0xaf, 0x35, 0xce, 0xe5, 0x4d, 0x36, 0xb5, 0xb7, 0x39, 0xce, 0x6c, 0x3b,
	0x9d, 0x49, 0x6d, 0xa8, 0x32, 0xb6, 0x52, 0xf9, 0x72, 0x1f, 0xba, 0xaf, 0xde, 0x1c, 0x53, 0x92,
	0xdf, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x7a, 0x4e, 0x66, 0x0a, 0x03, 0x00, 0x00,
}

func (m *QueryStreamingSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamingSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamingSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamingSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamingSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamingSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedSwapReasons) > 0 {
		for iNdEx := len(m.FailedSwapReasons) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FailedSwapReasons[iNdEx])
			copy(dAtA[i:], m.FailedSwapReasons[iNdEx])
			i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.FailedSwapReasons[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.FailedSwaps) > 0 {
		dAtA2 := make([]byte, len(m.FailedSwaps)*10)
		var j1 int
		for _, num1 := range m.FailedSwaps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Out) > 0 {
		i -= len(m.Out)
		copy(dAtA[i:], m.Out)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.Out)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.In) > 0 {
		i -= len(m.In)
		copy(dAtA[i:], m.In)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.In)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TargetAsset) > 0 {
		i -= len(m.TargetAsset)
		copy(dAtA[i:], m.TargetAsset)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.TargetAsset)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SourceAsset) > 0 {
		i -= len(m.SourceAsset)
		copy(dAtA[i:], m.SourceAsset)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.SourceAsset)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradeTarget) > 0 {
		i -= len(m.TradeTarget)
		copy(dAtA[i:], m.TradeTarget)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.TradeTarget)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastHeight != 0 {
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(m.LastHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.Quantity != 0 {
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if m.Interval != 0 {
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamingSwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamingSwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamingSwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStreamingSwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamingSwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamingSwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamingSwaps) > 0 {
		for iNdEx := len(m.StreamingSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamingSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryStreamingSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryStreamingSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryStreamingSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStreamingSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	return n
}

func (m *QueryStreamingSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovQueryStreamingSwap(uint64(m.Interval))
	}
	if m.Quantity != 0 {
		n += 1 + sovQueryStreamingSwap(uint64(m.Quantity))
	}
	if m.Count != 0 {
		n += 1 + sovQueryStreamingSwap(uint64(m.Count))
	}
	if m.LastHeight != 0 {
		n += 1 + sovQueryStreamingSwap(uint64(m.LastHeight))
	}
	l = len(m.TradeTarget)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.SourceAsset)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.TargetAsset)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.In)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	l = len(m.Out)
	if l > 0 {
		n += 1 + l + sovQueryStreamingSwap(uint64(l))
	}
	if len(m.FailedSwaps) > 0 {
		l = 0
		for _, e := range m.FailedSwaps {
			l += sovQueryStreamingSwap(uint64(e))
		}
		n += 1 + sovQueryStreamingSwap(uint64(l)) + l
	}
	if len(m.FailedSwapReasons) > 0 {
		for _, s := range m.FailedSwapReasons {
			l = len(s)
			n += 1 + l + sovQueryStreamingSwap(uint64(l))
		}
	}
	return n
}

func (m *QueryStreamingSwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStreamingSwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StreamingSwaps) > 0 {
		for _, e := range m.StreamingSwaps {
			l = e.Size()
			n += 1 + l + sovQueryStreamingSwap(uint64(l))
		}
	}
	return n
}

func sovQueryStreamingSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryStreamingSwap(x uint64) (n int) {
	return sovQueryStreamingSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStreamingSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStreamingSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamingSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamingSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStreamingSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamingSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStreamingSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamingSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamingSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeight", wireType)
			}
			m.LastHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Out = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryStreamingSwap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailedSwaps = append(m.FailedSwaps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueryStreamingSwap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueryStreamingSwap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQueryStreamingSwap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailedSwaps) == 0 {
					m.FailedSwaps = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueryStreamingSwap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailedSwaps = append(m.FailedSwaps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedSwaps", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedSwapReasons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedSwapReasons = append(m.FailedSwapReasons, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStreamingSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamingSwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStreamingSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamingSwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamingSwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStreamingSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamingSwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryStreamingSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamingSwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamingSwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamingSwaps = append(m.StreamingSwaps, &QueryStreamingSwapResponse{})
			if err := m.StreamingSwaps[len(m.StreamingSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryStreamingSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryStreamingSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryStreamingSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryStreamingSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryStreamingSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryStreamingSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryStreamingSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryStreamingSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryStreamingSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryStreamingSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryStreamingSwap = fmt.Errorf("proto: unexpected end of group")
)
