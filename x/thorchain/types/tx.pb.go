// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEmpty struct {
}

func (m *MsgEmpty) Reset()         { *m = MsgEmpty{} }
func (m *MsgEmpty) String() string { return proto.CompactTextString(m) }
func (*MsgEmpty) ProtoMessage()    {}
func (*MsgEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_991dda0e66fd389c, []int{0}
}
func (m *MsgEmpty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmpty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmpty.Merge(m, src)
}
func (m *MsgEmpty) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmpty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgEmpty)(nil), "types.MsgEmpty")
}

func init() { proto.RegisterFile("types/tx.proto", fileDescriptor_991dda0e66fd389c) }

var fileDescriptor_991dda0e66fd389c = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x5b, 0x96, 0xae, 0x65, 0x74, 0x2b, 0x8e, 0xbb, 0xdb, 0xa5, 0x62, 0x10, 0xc1, 0x83,
	0x8a, 0x0d, 0xba, 0x88, 0x88, 0x27, 0xab, 0xbb, 0x50, 0x96, 0x6e, 0x0b, 0x2d, 0x1e, 0xbc, 0x84,
	0x69, 0xf3, 0x36, 0x0d, 0x9b, 0x64, 0x42, 0xde, 0xb4, 0xb6, 0x37, 0x3f, 0x82, 0xe0, 0x17, 0xf1,
	0x63, 0x78, 0xdc, 0xa3, 0x47, 0x69, 0x0f, 0x7e, 0x0d, 0xc9, 0x64, 0xb2, 0x33, 0x65, 0x72, 0x6a,
	0xe7, 0xff, 0x7b, 0xff, 0xf6, 0xcd, 0x7b, 0xff, 0x84, 0xb4, 0xc4, 0x3a, 0x05, 0x74, 0xc5, 0xaa,
	0x9b, 0x66, 0x5c, 0x70, 0xda, 0x90, 0xe7, 0x4e, 0x7b, 0xc6, 0x31, 0xe6, 0xe8, 0xc6, 0x18, 0xb8,
	0xcb, 0xd7, 0xf9, 0x47, 0xc1, 0x3b, 0x0f, 0x8b, 0xfa, 0x18, 0x03, 0x6f, 0xca, 0x12, 0x25, 0xb6,
	0xb5, 0xe8, 0x43, 0xca, 0x31, 0x14, 0x0a, 0x1c, 0x6b, 0x00, 0x59, 0xc6, 0x04, 0x53, 0xfa, 0x91,
	0xd6, 0xe3, 0x30, 0x0e, 0x33, 0x25, 0x3f, 0xd2, 0x72, 0x02, 0xe2, 0x1b, 0xcf, 0xae, 0xbd, 0x2b,
	0x00, 0x05, 0x9f, 0x18, 0x90, 0xfb, 0xe0, 0xa5, 0x6c, 0x81, 0xe0, 0xcd, 0xe6, 0x2c, 0x2c, 0xdb,
	0x78, 0xac, 0x2b, 0xf8, 0x14, 0x21, 0x5b, 0x82, 0xef, 0x89, 0xd5, 0x2d, 0x76, 0x2a, 0x31, 0x5f,
	0x94, 0xcd, 0x1e, 0x6a, 0x8e, 0x90, 0xf8, 0xb6, 0x0b, 0x41, 0x78, 0x61, 0xea, 0x31, 0xdf, 0xcf,
	0x00, 0xd1, 0xfe, 0xd3, 0x9c, 0xcb, 0xd6, 0xae, 0x61, 0x5d, 0xe2, 0x13, 0x03, 0xf3, 0x68, 0x09,
	0xc9, 0x6c, 0x6d, 0xdf, 0x47, 0x20, 0x4a, 0x4f, 0x18, 0x24, 0xde, 0x15, 0x0b, 0x23, 0xdb, 0x9b,
	0x57, 0xa4, 0x9c, 0x47, 0xf6, 0xc0, 0x97, 0x90, 0x61, 0xc8, 0xd5, 0x1d, 0x9f, 0x12, 0xd2, 0x1c,
	0x60, 0x70, 0x16, 0xa7, 0x62, 0xfd, 0xe6, 0xe7, 0x3e, 0xd9, 0x1b, 0x60, 0x40, 0x9f, 0x91, 0xbd,
	0x1e, 0x4b, 0xe8, 0x41, 0x57, 0x9a, 0xba, 0x03, 0x0c, 0x7a, 0x2c, 0xe9, 0xdc, 0xd7, 0x47, 0x59,
	0x4e, 0x5f, 0x91, 0x3b, 0x9f, 0x8b, 0xe5, 0xd1, 0x07, 0x9a, 0x29, 0xc9, 0x2e, 0x77, 0x49, 0xf3,
	0x4c, 0xae, 0x74, 0xb2, 0xa2, 0xd4, 0x80, 0x4a, 0xb3, 0x0d, 0xcf, 0x49, 0x63, 0x90, 0xef, 0x9a,
	0x1a, 0x44, 0x0a, 0x76, 0xe9, 0x29, 0x21, 0x97, 0xc5, 0xfe, 0xcf, 0x01, 0xe8, 0xa1, 0xc6, 0x5a,
	0xb5, 0x4d, 0x1f, 0x48, 0xeb, 0x92, 0xfb, 0x30, 0xca, 0x63, 0xf1, 0x29, 0x4f, 0x05, 0x3d, 0x31,
	0x8c, 0x3b, 0xc4, 0x36, 0xbf, 0x23, 0xf7, 0x86, 0x2a, 0x13, 0x93, 0x55, 0x3f, 0xa1, 0xc7, 0xba,
	0xc0, 0xd4, 0x6d, 0xe3, 0x7b, 0x72, 0xa0, 0x0b, 0x86, 0x0b, 0x41, 0xdb, 0x55, 0xce, 0xe1, 0xa2,
	0x62, 0x82, 0x2f, 0x49, 0x73, 0x32, 0xe7, 0xd9, 0x18, 0x12, 0x9f, 0xb6, 0x34, 0xcc, 0xcf, 0x95,
	0x0d, 0x8e, 0x41, 0xf4, 0x47, 0x1f, 0x8b, 0xf0, 0x99, 0x0d, 0x9a, 0xba, 0x6d, 0x7c, 0x4b, 0xee,
	0x8e, 0x41, 0xe4, 0xf7, 0xbf, 0x80, 0x35, 0xd2, 0xa3, 0x1d, 0x5f, 0x29, 0x57, 0xae, 0x77, 0xac,
	0xf2, 0x6a, 0xae, 0xb7, 0xd4, 0x2a, 0xc7, 0x3f, 0x41, 0xbc, 0x28, 0x52, 0x7c, 0xce, 0xc2, 0xc8,
	0x1c, 0xff, 0x2e, 0xa9, 0xcc, 0xde, 0x04, 0x71, 0xc4, 0x79, 0x64, 0x66, 0x4f, 0x49, 0x95, 0xf9,
	0x18, 0x83, 0xf8, 0x52, 0x24, 0xdf, 0xcc, 0x87, 0x56, 0x2d, 0x53, 0xa7, 0xf1, 0xfd, 0xdf, 0xaf,
	0x17, 0xf5, 0x5e, 0xff, 0xf7, 0xc6, 0xa9, 0xdf, 0x6c, 0x9c, 0xfa, 0xdf, 0x8d, 0x53, 0xff, 0xb1,
	0x75, 0x6a, 0x37, 0x5b, 0xa7, 0xf6, 0x67, 0xeb, 0xd4, 0xbe, 0xba, 0x41, 0x28, 0x22, 0x36, 0xed,
	0xce, 0x78, 0xec, 0x8a, 0x39, 0xcf, 0xe4, 0xab, 0x45, 0x7e, 0xcb, 0x1f, 0x6a, 0x77, 0x65, 0x8a,
	0xf9, 0x4f, 0x4f, 0xf7, 0xe5, 0x33, 0x77, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xf2, 0x7a,
	0xea, 0x44, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Ban(ctx context.Context, in *MsgBan, opts ...grpc.CallOption) (*MsgEmpty, error)
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgEmpty, error)
	ErrataTx(ctx context.Context, in *MsgErrataTx, opts ...grpc.CallOption) (*MsgEmpty, error)
	Mimir(ctx context.Context, in *MsgMimir, opts ...grpc.CallOption) (*MsgEmpty, error)
	NetworkFee(ctx context.Context, in *MsgNetworkFee, opts ...grpc.CallOption) (*MsgEmpty, error)
	NodePauseChain(ctx context.Context, in *MsgNodePauseChain, opts ...grpc.CallOption) (*MsgEmpty, error)
	ObservedTxIn(ctx context.Context, in *MsgObservedTxIn, opts ...grpc.CallOption) (*MsgEmpty, error)
	ObservedTxOut(ctx context.Context, in *MsgObservedTxOut, opts ...grpc.CallOption) (*MsgEmpty, error)
	ThorSend(ctx context.Context, in *MsgSend, opts ...grpc.CallOption) (*MsgEmpty, error)
	SetIPAddress(ctx context.Context, in *MsgSetIPAddress, opts ...grpc.CallOption) (*MsgEmpty, error)
	SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgEmpty, error)
	Solvency(ctx context.Context, in *MsgSolvency, opts ...grpc.CallOption) (*MsgEmpty, error)
	TssKeysignFail(ctx context.Context, in *MsgTssKeysignFail, opts ...grpc.CallOption) (*MsgEmpty, error)
	TssPool(ctx context.Context, in *MsgTssPool, opts ...grpc.CallOption) (*MsgEmpty, error)
	SetVersion(ctx context.Context, in *MsgSetVersion, opts ...grpc.CallOption) (*MsgEmpty, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Ban(ctx context.Context, in *MsgBan, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ErrataTx(ctx context.Context, in *MsgErrataTx, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/ErrataTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mimir(ctx context.Context, in *MsgMimir, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/Mimir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NetworkFee(ctx context.Context, in *MsgNetworkFee, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/NetworkFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NodePauseChain(ctx context.Context, in *MsgNodePauseChain, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/NodePauseChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ObservedTxIn(ctx context.Context, in *MsgObservedTxIn, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/ObservedTxIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ObservedTxOut(ctx context.Context, in *MsgObservedTxOut, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/ObservedTxOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ThorSend(ctx context.Context, in *MsgSend, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/ThorSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetIPAddress(ctx context.Context, in *MsgSetIPAddress, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/SetIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/SetNodeKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Solvency(ctx context.Context, in *MsgSolvency, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/Solvency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TssKeysignFail(ctx context.Context, in *MsgTssKeysignFail, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/TssKeysignFail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TssPool(ctx context.Context, in *MsgTssPool, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/TssPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetVersion(ctx context.Context, in *MsgSetVersion, opts ...grpc.CallOption) (*MsgEmpty, error) {
	out := new(MsgEmpty)
	err := c.cc.Invoke(ctx, "/types.Msg/SetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Ban(context.Context, *MsgBan) (*MsgEmpty, error)
	Deposit(context.Context, *MsgDeposit) (*MsgEmpty, error)
	ErrataTx(context.Context, *MsgErrataTx) (*MsgEmpty, error)
	Mimir(context.Context, *MsgMimir) (*MsgEmpty, error)
	NetworkFee(context.Context, *MsgNetworkFee) (*MsgEmpty, error)
	NodePauseChain(context.Context, *MsgNodePauseChain) (*MsgEmpty, error)
	ObservedTxIn(context.Context, *MsgObservedTxIn) (*MsgEmpty, error)
	ObservedTxOut(context.Context, *MsgObservedTxOut) (*MsgEmpty, error)
	ThorSend(context.Context, *MsgSend) (*MsgEmpty, error)
	SetIPAddress(context.Context, *MsgSetIPAddress) (*MsgEmpty, error)
	SetNodeKeys(context.Context, *MsgSetNodeKeys) (*MsgEmpty, error)
	Solvency(context.Context, *MsgSolvency) (*MsgEmpty, error)
	TssKeysignFail(context.Context, *MsgTssKeysignFail) (*MsgEmpty, error)
	TssPool(context.Context, *MsgTssPool) (*MsgEmpty, error)
	SetVersion(context.Context, *MsgSetVersion) (*MsgEmpty, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Ban(ctx context.Context, req *MsgBan) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedMsgServer) ErrataTx(ctx context.Context, req *MsgErrataTx) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrataTx not implemented")
}
func (*UnimplementedMsgServer) Mimir(ctx context.Context, req *MsgMimir) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mimir not implemented")
}
func (*UnimplementedMsgServer) NetworkFee(ctx context.Context, req *MsgNetworkFee) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkFee not implemented")
}
func (*UnimplementedMsgServer) NodePauseChain(ctx context.Context, req *MsgNodePauseChain) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodePauseChain not implemented")
}
func (*UnimplementedMsgServer) ObservedTxIn(ctx context.Context, req *MsgObservedTxIn) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservedTxIn not implemented")
}
func (*UnimplementedMsgServer) ObservedTxOut(ctx context.Context, req *MsgObservedTxOut) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservedTxOut not implemented")
}
func (*UnimplementedMsgServer) ThorSend(ctx context.Context, req *MsgSend) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThorSend not implemented")
}
func (*UnimplementedMsgServer) SetIPAddress(ctx context.Context, req *MsgSetIPAddress) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIPAddress not implemented")
}
func (*UnimplementedMsgServer) SetNodeKeys(ctx context.Context, req *MsgSetNodeKeys) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeKeys not implemented")
}
func (*UnimplementedMsgServer) Solvency(ctx context.Context, req *MsgSolvency) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solvency not implemented")
}
func (*UnimplementedMsgServer) TssKeysignFail(ctx context.Context, req *MsgTssKeysignFail) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssKeysignFail not implemented")
}
func (*UnimplementedMsgServer) TssPool(ctx context.Context, req *MsgTssPool) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssPool not implemented")
}
func (*UnimplementedMsgServer) SetVersion(ctx context.Context, req *MsgSetVersion) (*MsgEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVersion not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Ban(ctx, req.(*MsgBan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ErrataTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgErrataTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ErrataTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/ErrataTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ErrataTx(ctx, req.(*MsgErrataTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mimir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMimir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mimir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/Mimir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mimir(ctx, req.(*MsgMimir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNetworkFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/NetworkFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NetworkFee(ctx, req.(*MsgNetworkFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NodePauseChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNodePauseChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NodePauseChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/NodePauseChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NodePauseChain(ctx, req.(*MsgNodePauseChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ObservedTxIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgObservedTxIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ObservedTxIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/ObservedTxIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ObservedTxIn(ctx, req.(*MsgObservedTxIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ObservedTxOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgObservedTxOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ObservedTxOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/ObservedTxOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ObservedTxOut(ctx, req.(*MsgObservedTxOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ThorSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ThorSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/ThorSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ThorSend(ctx, req.(*MsgSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetIPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/SetIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetIPAddress(ctx, req.(*MsgSetIPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNodeKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNodeKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNodeKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/SetNodeKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNodeKeys(ctx, req.(*MsgSetNodeKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Solvency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSolvency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Solvency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/Solvency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Solvency(ctx, req.(*MsgSolvency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TssKeysignFail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTssKeysignFail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TssKeysignFail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/TssKeysignFail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TssKeysignFail(ctx, req.(*MsgTssKeysignFail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TssPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTssPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TssPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/TssPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TssPool(ctx, req.(*MsgTssPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Msg/SetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetVersion(ctx, req.(*MsgSetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ban",
			Handler:    _Msg_Ban_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "ErrataTx",
			Handler:    _Msg_ErrataTx_Handler,
		},
		{
			MethodName: "Mimir",
			Handler:    _Msg_Mimir_Handler,
		},
		{
			MethodName: "NetworkFee",
			Handler:    _Msg_NetworkFee_Handler,
		},
		{
			MethodName: "NodePauseChain",
			Handler:    _Msg_NodePauseChain_Handler,
		},
		{
			MethodName: "ObservedTxIn",
			Handler:    _Msg_ObservedTxIn_Handler,
		},
		{
			MethodName: "ObservedTxOut",
			Handler:    _Msg_ObservedTxOut_Handler,
		},
		{
			MethodName: "ThorSend",
			Handler:    _Msg_ThorSend_Handler,
		},
		{
			MethodName: "SetIPAddress",
			Handler:    _Msg_SetIPAddress_Handler,
		},
		{
			MethodName: "SetNodeKeys",
			Handler:    _Msg_SetNodeKeys_Handler,
		},
		{
			MethodName: "Solvency",
			Handler:    _Msg_Solvency_Handler,
		},
		{
			MethodName: "TssKeysignFail",
			Handler:    _Msg_TssKeysignFail_Handler,
		},
		{
			MethodName: "TssPool",
			Handler:    _Msg_TssPool_Handler,
		},
		{
			MethodName: "SetVersion",
			Handler:    _Msg_SetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/tx.proto",
}

func (m *MsgEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmpty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmpty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
