// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_keysign.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryKeysignRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryKeysignRequest) Reset()         { *m = QueryKeysignRequest{} }
func (m *QueryKeysignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeysignRequest) ProtoMessage()    {}
func (*QueryKeysignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7418656f442b074f, []int{0}
}
func (m *QueryKeysignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysignRequest.Merge(m, src)
}
func (m *QueryKeysignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysignRequest proto.InternalMessageInfo

func (m *QueryKeysignRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryKeysignPubkeyRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *QueryKeysignPubkeyRequest) Reset()         { *m = QueryKeysignPubkeyRequest{} }
func (m *QueryKeysignPubkeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeysignPubkeyRequest) ProtoMessage()    {}
func (*QueryKeysignPubkeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7418656f442b074f, []int{1}
}
func (m *QueryKeysignPubkeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysignPubkeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysignPubkeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysignPubkeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysignPubkeyRequest.Merge(m, src)
}
func (m *QueryKeysignPubkeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysignPubkeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysignPubkeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysignPubkeyRequest proto.InternalMessageInfo

func (m *QueryKeysignPubkeyRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

func (m *QueryKeysignPubkeyRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

type QueryKeysignResponse struct {
	Keysign   *TxOut `protobuf:"bytes,1,opt,name=keysign,proto3" json:"keysign,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *QueryKeysignResponse) Reset()         { *m = QueryKeysignResponse{} }
func (m *QueryKeysignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeysignResponse) ProtoMessage()    {}
func (*QueryKeysignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7418656f442b074f, []int{2}
}
func (m *QueryKeysignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysignResponse.Merge(m, src)
}
func (m *QueryKeysignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysignResponse proto.InternalMessageInfo

func (m *QueryKeysignResponse) GetKeysign() *TxOut {
	if m != nil {
		return m.Keysign
	}
	return nil
}

func (m *QueryKeysignResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryKeysignRequest)(nil), "types.QueryKeysignRequest")
	proto.RegisterType((*QueryKeysignPubkeyRequest)(nil), "types.QueryKeysignPubkeyRequest")
	proto.RegisterType((*QueryKeysignResponse)(nil), "types.QueryKeysignResponse")
}

func init() { proto.RegisterFile("types/query_keysign.proto", fileDescriptor_7418656f442b074f) }

var fileDescriptor_7418656f442b074f = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0xcf, 0x4e, 0xad, 0x2c, 0xce, 0x4c, 0xcf, 0xd3,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x4b, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83,
	0x45, 0xf4, 0x41, 0x2c, 0x88, 0xa4, 0x94, 0x38, 0x44, 0x1f, 0x88, 0x8c, 0x2f, 0xa9, 0x88, 0xcf,
	0x2f, 0x2d, 0x81, 0x48, 0x28, 0xe9, 0x72, 0x09, 0x07, 0x82, 0x0c, 0xf3, 0x86, 0x98, 0x15, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc6, 0xc5, 0x96, 0x91, 0x9a, 0x99, 0x9e, 0x51, 0x22,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0x29, 0xf9, 0x70, 0x49, 0x22, 0x2b, 0x0f, 0x28,
	0x4d, 0xca, 0x4e, 0xad, 0x24, 0xa0, 0x49, 0x48, 0x9c, 0x8b, 0xbd, 0xa0, 0x34, 0x09, 0xe4, 0x5c,
	0x09, 0x26, 0x88, 0x44, 0x41, 0x69, 0x92, 0x77, 0x6a, 0xa5, 0x52, 0x0c, 0x97, 0x08, 0xaa, 0xe5,
	0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x6a, 0x5c, 0xec, 0x50, 0xbf, 0x81, 0x4d, 0xe2, 0x36,
	0xe2, 0xd1, 0x03, 0xbb, 0x5f, 0x2f, 0xa4, 0xc2, 0xbf, 0xb4, 0x24, 0x08, 0x26, 0x29, 0x24, 0xc3,
	0xc5, 0x09, 0xa2, 0x13, 0x4b, 0x4a, 0x8b, 0x52, 0xa1, 0x46, 0x23, 0x04, 0x9c, 0x3c, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e,
	0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3f, 0x3d, 0xb3, 0x24, 0x27, 0x31, 0x49,
	0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x24, 0x23, 0xbf, 0x28, 0x39, 0x23, 0x31, 0x33, 0x0f, 0xcc, 0xca,
	0xcb, 0x4f, 0x49, 0xd5, 0xaf, 0x40, 0x16, 0x04, 0xd9, 0x9b, 0xc4, 0x06, 0x0e, 0x2c, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xa2, 0x22, 0x9c, 0x7f, 0x01, 0x00, 0x00,
}

func (m *QueryKeysignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryKeysign(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysignPubkeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysignPubkeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysignPubkeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQueryKeysign(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryKeysign(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQueryKeysign(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Keysign != nil {
		{
			size, err := m.Keysign.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryKeysign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryKeysign(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryKeysign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryKeysignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryKeysign(uint64(l))
	}
	return n
}

func (m *QueryKeysignPubkeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryKeysign(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQueryKeysign(uint64(l))
	}
	return n
}

func (m *QueryKeysignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keysign != nil {
		l = m.Keysign.Size()
		n += 1 + l + sovQueryKeysign(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQueryKeysign(uint64(l))
	}
	return n
}

func sovQueryKeysign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryKeysign(x uint64) (n int) {
	return sovQueryKeysign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryKeysignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryKeysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryKeysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysignPubkeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryKeysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysignPubkeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysignPubkeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryKeysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryKeysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keysign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keysign == nil {
				m.Keysign = &TxOut{}
			}
			if err := m.Keysign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryKeysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryKeysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryKeysign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryKeysign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryKeysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryKeysign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryKeysign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryKeysign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryKeysign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryKeysign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryKeysign = fmt.Errorf("proto: unexpected end of group")
)
