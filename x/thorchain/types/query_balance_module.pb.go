// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_balance_module.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryBalanceModuleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryBalanceModuleRequest) Reset()         { *m = QueryBalanceModuleRequest{} }
func (m *QueryBalanceModuleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceModuleRequest) ProtoMessage()    {}
func (*QueryBalanceModuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10cc4e5224eb3a8, []int{0}
}
func (m *QueryBalanceModuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceModuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceModuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceModuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceModuleRequest.Merge(m, src)
}
func (m *QueryBalanceModuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceModuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceModuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceModuleRequest proto.InternalMessageInfo

func (m *QueryBalanceModuleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryBalanceModuleResponse struct {
	Name    string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Coins   github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *QueryBalanceModuleResponse) Reset()         { *m = QueryBalanceModuleResponse{} }
func (m *QueryBalanceModuleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceModuleResponse) ProtoMessage()    {}
func (*QueryBalanceModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10cc4e5224eb3a8, []int{1}
}
func (m *QueryBalanceModuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceModuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceModuleResponse.Merge(m, src)
}
func (m *QueryBalanceModuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceModuleResponse proto.InternalMessageInfo

func (m *QueryBalanceModuleResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryBalanceModuleResponse) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *QueryBalanceModuleResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryBalanceModuleRequest)(nil), "types.QueryBalanceModuleRequest")
	proto.RegisterType((*QueryBalanceModuleResponse)(nil), "types.QueryBalanceModuleResponse")
}

func init() { proto.RegisterFile("types/query_balance_module.proto", fileDescriptor_b10cc4e5224eb3a8) }

var fileDescriptor_b10cc4e5224eb3a8 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xe3, 0xdb, 0x5b, 0x10, 0x81, 0x29, 0x62, 0x68, 0x3b, 0xb8, 0x51, 0xa7, 0x2c, 0xb5,
	0x29, 0x3c, 0x41, 0xc3, 0x84, 0x10, 0x03, 0x19, 0x59, 0x2a, 0xc7, 0xb1, 0xd2, 0x88, 0xc6, 0xa7,
	0xcd, 0x71, 0x10, 0x7d, 0x0b, 0x9e, 0x83, 0x27, 0xe9, 0xd8, 0x91, 0xa9, 0x54, 0xed, 0x5b, 0x30,
	0xa1, 0xd8, 0x45, 0x62, 0xe8, 0xc0, 0xe4, 0x5f, 0x47, 0xe7, 0xfb, 0xec, 0xdf, 0x7e, 0x68, 0x96,
	0x73, 0x85, 0x7c, 0x51, 0xab, 0x6a, 0x39, 0x49, 0xc5, 0x4c, 0x68, 0xa9, 0x26, 0x25, 0x64, 0xf5,
	0x4c, 0xb1, 0x79, 0x05, 0x06, 0x82, 0xb6, 0xdd, 0xe8, 0x51, 0x09, 0x58, 0x02, 0xf2, 0x54, 0xa0,
	0xe2, 0x2f, 0xa3, 0x54, 0x19, 0x31, 0xe2, 0x12, 0x0a, 0xed, 0xd6, 0x7a, 0x97, 0x39, 0xe4, 0x60,
	0x23, 0x6f, 0x92, 0x9b, 0x0e, 0xb8, 0xdf, 0x7d, 0x6c, 0xd4, 0xb1, 0x33, 0x3f, 0x58, 0x71, 0xa2,
	0x16, 0xb5, 0x42, 0x13, 0x04, 0xfe, 0x7f, 0x2d, 0x4a, 0xd5, 0x21, 0x21, 0x89, 0xce, 0x12, 0x9b,
	0x07, 0x5b, 0xe2, 0xf7, 0x8e, 0x11, 0x38, 0x07, 0x8d, 0xea, 0x18, 0x12, 0xdc, 0xfb, 0xa7, 0x22,
	0xcb, 0x2a, 0x85, 0xd8, 0xf9, 0x17, 0x92, 0xe8, 0x22, 0x1e, 0x7d, 0x6d, 0xfa, 0xc3, 0xbc, 0x30,
	0xd3, 0x3a, 0x65, 0x12, 0x4a, 0x7e, 0x78, 0xb9, 0x3b, 0x86, 0x98, 0x3d, 0x73, 0x5b, 0x89, 0x8d,
	0xa5, 0x1c, 0x3b, 0x30, 0xf9, 0x31, 0x04, 0xc2, 0x6f, 0x37, 0xa5, 0xb0, 0xd3, 0x0a, 0x5b, 0xd1,
	0xf9, 0x75, 0x97, 0x39, 0x8a, 0x35, 0xb5, 0xd9, 0xa1, 0x36, 0xbb, 0x85, 0x42, 0xc7, 0x57, 0xab,
	0x4d, 0xdf, 0x7b, 0xff, 0xec, 0x47, 0x7f, 0xb8, 0xa9, 0x01, 0x30, 0x71, 0xe6, 0xf8, 0x6e, 0xb5,
	0xa3, 0x64, 0xbd, 0xa3, 0x64, 0xbb, 0xa3, 0xe4, 0x6d, 0x4f, 0xbd, 0xf5, 0x9e, 0x7a, 0x1f, 0x7b,
	0xea, 0x3d, 0xf1, 0xbc, 0x30, 0x33, 0xe1, 0x54, 0x66, 0x0a, 0x95, 0x9c, 0x8a, 0x42, 0xdb, 0xa4,
	0x21, 0x53, 0xfc, 0xf5, 0xf7, 0xb0, 0xf1, 0xa6, 0x27, 0xf6, 0x97, 0x6f, 0xbe, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x62, 0xc5, 0xb8, 0x6e, 0xc6, 0x01, 0x00, 0x00,
}

func (m *QueryBalanceModuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceModuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceModuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryBalanceModule(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceModuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceModuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceModuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBalanceModule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryBalanceModule(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueryBalanceModule(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryBalanceModule(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryBalanceModule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBalanceModuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryBalanceModule(uint64(l))
	}
	return n
}

func (m *QueryBalanceModuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueryBalanceModule(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryBalanceModule(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQueryBalanceModule(uint64(l))
		}
	}
	return n
}

func sovQueryBalanceModule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryBalanceModule(x uint64) (n int) {
	return sovQueryBalanceModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBalanceModuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBalanceModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceModuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceModuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBalanceModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceModuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBalanceModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceModuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceModuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBalanceModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBalanceModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryBalanceModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryBalanceModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryBalanceModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryBalanceModule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryBalanceModule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryBalanceModule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryBalanceModule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryBalanceModule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryBalanceModule = fmt.Errorf("proto: unexpected end of group")
)
