syntax = "proto3";
package types;


option go_package = "gitlab.com/thorchain/thornode/x/thorchain/types";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "types/query_pool.proto";
import "types/query_derived_pool.proto";
import "types/query_liquidity_provider.proto";
import "types/query_saver.proto";
import "types/query_borrower.proto";
import "types/query_trade_unit.proto";
import "types/query_trade_account.proto";
import "types/query_node.proto";
import "types/query_pool_slip.proto";

option (gogoproto.marshaler_all) = true;

// Query defines the gRPC querier service.
service Query {
  // Returns the extended pool information for the provided asset.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}";
  }

  // Pools returns all extended pools
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/thorchain/pools";
  }

  rpc DerivedPool(QueryDerivedPoolRequest) returns (QueryDerivedPoolResponse) {
    option (google.api.http).get = "/thorchain/dpool/{asset}";
  }

  rpc DerivedPools(QueryDerivedPoolsRequest) returns (QueryDerivedPoolsResponse) {
    option (google.api.http).get = "/thorchain/dpools";
  }

  rpc LiquidityProvider(QueryLiquidityProviderRequest) returns (QueryLiquidityProviderResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/liquidity_provider/{address}";
  }

  rpc LiquidityProviders(QueryLiquidityProvidersRequest) returns (QueryLiquidityProvidersResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/liquidity_providers";
  }

  rpc Saver(QuerySaverRequest) returns (QuerySaverResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/saver/{address}";
  }

  rpc Savers(QuerySaversRequest) returns (QuerySaversResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/savers";
  }

  rpc Borrower(QueryBorrowerRequest) returns (QueryBorrowerResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/borrower/{address}";
  }

  rpc Borrowers(QueryBorrowersRequest) returns (QueryBorrowersResponse) {
    option (google.api.http).get = "/thorchain/pool/{asset}/borrowers";
  }

  rpc TradeUnit(QueryTradeUnitRequest) returns (QueryTradeUnitResponse) {
    option (google.api.http).get = "/thorchain/trade/unit/{asset}";
  }

  rpc TradeUnits(QueryTradeUnitsRequest) returns (QueryTradeUnitsResponse) {
    option (google.api.http).get = "/thorchain/trade/units";
  }

  rpc TradeAccount(QueryTradeAccountRequest) returns (QueryTradeAccountsResponse) {
    option (google.api.http).get = "/thorchain/trade/account/{address}";
  }

  rpc TradeAccounts(QueryTradeAccountsRequest) returns (QueryTradeAccountsResponse) {
    option (google.api.http).get = "/thorchain/trade/accounts/{asset}";
  }

  rpc Node(QueryNodeRequest) returns (QueryNodeResponse) {
    option (google.api.http).get = "/thorchain/node/{address}";
  }

  rpc Nodes(QueryNodesRequest) returns (QueryNodesResponse) {
    option (google.api.http).get = "/thorchain/nodes";
  }

  rpc PoolSlip(QueryPoolSlipRequest) returns (QueryPoolSlipsResponse) {
    option (google.api.http).get = "/thorchain/slip/{asset}";
  }

  rpc PoolSlips(QueryPoolSlipsRequest) returns (QueryPoolSlipsResponse) {
    option (google.api.http).get = "/thorchain/slips";
  }
}
