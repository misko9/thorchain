syntax = "proto3";
package types;

import "cosmos/msg/v1/msg.proto";
import "types/msg_add_liquidity.proto";
import "types/msg_ban.proto";
import "types/msg_bond.proto";
import "types/msg_consolidate.proto";
import "types/msg_deposit.proto";
import "types/msg_donate.proto";
import "types/msg_errata.proto";
import "types/msg_leave.proto";
import "types/msg_loan.proto";
import "types/msg_manage_thorname.proto";
import "types/msg_migrate.proto";
import "types/msg_mimir.proto";
import "types/msg_network_fee.proto";
import "types/msg_node_pause_chain.proto";
import "types/msg_noop.proto";
import "types/msg_observed_txin.proto";
import "types/msg_observed_txout.proto";
import "types/msg_ragnarok.proto";
import "types/msg_refund.proto";
import "types/msg_reserve_contributor.proto";
import "types/msg_rune_pool.proto";
import "types/msg_send.proto";
import "types/msg_set_ip_address.proto";
import "types/msg_set_node_keys.proto";
import "types/msg_solvency.proto";
import "types/msg_swap.proto";
import "types/msg_trade_account.proto";
import "types/msg_tss_keysign_fail.proto";
import "types/msg_tss_pool.proto";
import "types/msg_tx_outbound.proto";
import "types/msg_unbond.proto";
import "types/msg_version.proto";
import "types/msg_withdraw_liquidity.proto";

option go_package = "gitlab.com/thorchain/thornode/x/thorchain/types";

// Msg defines the bank Msg service.
service Msg {
    option (cosmos.msg.v1.service) = true;
  
    rpc AddLiquidity(MsgAddLiquidity) returns (MsgEmpty);
    rpc Ban(MsgBan) returns (MsgEmpty);
    rpc Bond(MsgBond) returns (MsgEmpty);
    rpc Consolidate(MsgConsolidate) returns (MsgEmpty);
    rpc Deposit(MsgDeposit) returns (MsgEmpty);
    rpc Donate(MsgDonate) returns (MsgEmpty);
    rpc ErrataTx(MsgErrataTx) returns (MsgEmpty);
    rpc Leave(MsgLeave) returns (MsgEmpty);
    rpc LoanOpen(MsgLoanOpen) returns (MsgEmpty);
    rpc LoanRepayment(MsgLoanRepayment) returns (MsgEmpty);
    rpc ManageThorname(MsgManageTHORName) returns (MsgEmpty);
    rpc Migrate(MsgMigrate) returns (MsgEmpty);
    rpc Mimir(MsgMimir) returns (MsgEmpty);
    rpc NetworkFee(MsgNetworkFee) returns (MsgEmpty);
    rpc NodePauseChain(MsgNodePauseChain) returns (MsgEmpty);
    rpc Noop(MsgNoOp) returns (MsgEmpty);
    rpc ObservedTxIn(MsgObservedTxIn) returns (MsgEmpty);
    rpc ObservedTxOut(MsgObservedTxOut) returns (MsgEmpty);
    rpc Ragnarok(MsgRagnarok) returns (MsgEmpty);
    rpc RefundTx(MsgRefundTx) returns (MsgEmpty);
    rpc ReserveContributor(MsgReserveContributor) returns (MsgEmpty);
    rpc RunePoolDeposit(MsgRunePoolDeposit) returns (MsgEmpty);
    rpc RunePoolWithdraw(MsgRunePoolWithdraw) returns (MsgEmpty);
    rpc ThorSend(MsgSend) returns (MsgEmpty);
    rpc SetIPAddress(MsgSetIPAddress) returns (MsgEmpty);
    rpc SetNodeKeys(MsgSetNodeKeys) returns (MsgEmpty);
    rpc Solvency(MsgSolvency) returns (MsgEmpty);
    rpc Swap(MsgSwap) returns (MsgEmpty);
    rpc TradeAccountDeposit(MsgTradeAccountDeposit) returns (MsgEmpty);
    rpc TradeAccountWithdrawal(MsgTradeAccountWithdrawal) returns (MsgEmpty);
    rpc TssKeysignFail(MsgTssKeysignFail) returns (MsgEmpty);
    rpc TssPool(MsgTssPool) returns (MsgEmpty);
    rpc OutboundTx(MsgOutboundTx) returns (MsgEmpty);
    rpc UnBond(MsgUnBond) returns (MsgEmpty);
    rpc SetVersion(MsgSetVersion) returns (MsgEmpty);
    rpc WithdrawLiquidity(MsgWithdrawLiquidity) returns (MsgEmpty);
}

message MsgEmpty {}