/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RUNEPool struct for RUNEPool
type RUNEPool struct {
	// the units of RUNEPool owned by the reserve
	ReserveUnits string `json:"reserve_units"`
	// the units of RUNEPool owned by providers (including pending)
	PoolUnits string `json:"pool_units"`
	// the units of RUNEPool owned by providers that remain pending
	PendingPoolUnits string `json:"pending_pool_units"`
}

// NewRUNEPool instantiates a new RUNEPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRUNEPool(reserveUnits string, poolUnits string, pendingPoolUnits string) *RUNEPool {
	this := RUNEPool{}
	this.ReserveUnits = reserveUnits
	this.PoolUnits = poolUnits
	this.PendingPoolUnits = pendingPoolUnits
	return &this
}

// NewRUNEPoolWithDefaults instantiates a new RUNEPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRUNEPoolWithDefaults() *RUNEPool {
	this := RUNEPool{}
	return &this
}

// GetReserveUnits returns the ReserveUnits field value
func (o *RUNEPool) GetReserveUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReserveUnits
}

// GetReserveUnitsOk returns a tuple with the ReserveUnits field value
// and a boolean to check if the value has been set.
func (o *RUNEPool) GetReserveUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReserveUnits, true
}

// SetReserveUnits sets field value
func (o *RUNEPool) SetReserveUnits(v string) {
	o.ReserveUnits = v
}

// GetPoolUnits returns the PoolUnits field value
func (o *RUNEPool) GetPoolUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolUnits
}

// GetPoolUnitsOk returns a tuple with the PoolUnits field value
// and a boolean to check if the value has been set.
func (o *RUNEPool) GetPoolUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolUnits, true
}

// SetPoolUnits sets field value
func (o *RUNEPool) SetPoolUnits(v string) {
	o.PoolUnits = v
}

// GetPendingPoolUnits returns the PendingPoolUnits field value
func (o *RUNEPool) GetPendingPoolUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PendingPoolUnits
}

// GetPendingPoolUnitsOk returns a tuple with the PendingPoolUnits field value
// and a boolean to check if the value has been set.
func (o *RUNEPool) GetPendingPoolUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PendingPoolUnits, true
}

// SetPendingPoolUnits sets field value
func (o *RUNEPool) SetPendingPoolUnits(v string) {
	o.PendingPoolUnits = v
}

func (o RUNEPool) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reserve_units"] = o.ReserveUnits
	}
	if true {
		toSerialize["pool_units"] = o.PoolUnits
	}
	if true {
		toSerialize["pending_pool_units"] = o.PendingPoolUnits
	}
	return json.Marshal(toSerialize)
}

type NullableRUNEPool struct {
	value *RUNEPool
	isSet bool
}

func (v NullableRUNEPool) Get() *RUNEPool {
	return v.value
}

func (v *NullableRUNEPool) Set(val *RUNEPool) {
	v.value = val
	v.isSet = true
}

func (v NullableRUNEPool) IsSet() bool {
	return v.isSet
}

func (v *NullableRUNEPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRUNEPool(val *RUNEPool) *NullableRUNEPool {
	return &NullableRUNEPool{value: val, isSet: true}
}

func (v NullableRUNEPool) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRUNEPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
